
Lab5d.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000978  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000009cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004861  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003cf4  00000000  00000000  000052fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000701  00000000  00000000  00008ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000096f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002e35  00000000  00000000  000097cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c3  00000000  00000000  0000c601  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000c6c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 74 02 	call	0x4e8	; 0x4e8 <main>
 218:	0c 94 ba 04 	jmp	0x974	; 0x974 <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <CLK_init>:
#define BSel  137		//28.8k Baud
#define BScale  -1

void CLK_init(void) {
	
	OSC.CTRL = 0x02;					//32 Mhz internal oscillator enable
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32 MHz oscillator ready flag
 226:	e0 e5       	ldi	r30, 0x50	; 80
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	81 81       	ldd	r24, Z+1	; 0x01
 22c:	81 ff       	sbrs	r24, 1
 22e:	fd cf       	rjmp	.-6      	; 0x22a <CLK_init+0xa>
	CPU_CCP = 0xD8; 					//IOREG
 230:	88 ed       	ldi	r24, 0xD8	; 216
 232:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01; 					//bit 0 is 32 MHz internal oscillator
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 23a:	08 95       	ret

0000023c <USART_init>:
	
}

void USART_init(void) {
	
	USARTD0.BAUDCTRLA = (BSel & 0xFF);			//sets BAUDCTRLA to lower 8 bits of BSel
 23c:	e0 ea       	ldi	r30, 0xA0	; 160
 23e:	f9 e0       	ldi	r31, 0x09	; 9
 240:	89 e8       	ldi	r24, 0x89	; 137
 242:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = ((BScale << 4) & 0xF0) | ((BSel >> 8) & 0x0F);
 244:	80 ef       	ldi	r24, 0xF0	; 240
 246:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLB = 0x18;						//RXEN/TEXEN
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0x0B;						//asynchronous/no parity/1 stop bit/8 data
 24c:	8b e0       	ldi	r24, 0x0B	; 11
 24e:	85 83       	std	Z+5, r24	; 0x05
 250:	08 95       	ret

00000252 <IO_init>:



void IO_init(void) {
	
	PORTD.DIRSET = 0xF8;	//set TxD and RBG LED as output
 252:	e0 e6       	ldi	r30, 0x60	; 96
 254:	f6 e0       	ldi	r31, 0x06	; 6
 256:	88 ef       	ldi	r24, 0xF8	; 248
 258:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0xF8;	//set TxD to high, LED to off
 25a:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRCLR = 0x04;	//set RxD pin as input
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	82 83       	std	Z+2, r24	; 0x02
	
	//PortQ bits 1 and 3 enable and select
	PORTQ.DIRSET = 0x0A;	//PortD bits 2 and 3 serial pins
 260:	e0 ec       	ldi	r30, 0xC0	; 192
 262:	f7 e0       	ldi	r31, 0x07	; 7
 264:	8a e0       	ldi	r24, 0x0A	; 10
 266:	81 83       	std	Z+1, r24	; 0x01
	PORTQ.OUTCLR = 0x0A;	//connected to the USB lines
 268:	86 83       	std	Z+6, r24	; 0x06
 26a:	08 95       	ret

0000026c <send_char>:
}

void send_char(char c)
{
	
	while( !(USARTD0.STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
 26c:	e0 ea       	ldi	r30, 0xA0	; 160
 26e:	f9 e0       	ldi	r31, 0x09	; 9
 270:	91 81       	ldd	r25, Z+1	; 0x01
 272:	95 ff       	sbrs	r25, 5
 274:	fd cf       	rjmp	.-6      	; 0x270 <send_char+0x4>
	
	USARTD0.DATA = c;
 276:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 27a:	08 95       	ret

0000027c <ADC_init>:


void ADC_init(void)
{
	
	PORTA.DIR = 0x00;			//Port A as input
 27c:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	ADCA.CTRLA = 0x09;			//enable
 280:	e0 e0       	ldi	r30, 0x00	; 0
 282:	f2 e0       	ldi	r31, 0x02	; 2
 284:	89 e0       	ldi	r24, 0x09	; 9
 286:	80 83       	st	Z, r24
	ADCA.CTRLB = 0x1C;			// 8 bit right adjusted, conversion mode
 288:	8c e1       	ldi	r24, 0x1C	; 28
 28a:	81 83       	std	Z+1, r24	; 0x01
	ADCA.REFCTRL = 0x30;		//AREFB
 28c:	80 e3       	ldi	r24, 0x30	; 48
 28e:	82 83       	std	Z+2, r24	; 0x02
	ADCA.EVCTRL = 0x40;
 290:	80 e4       	ldi	r24, 0x40	; 64
 292:	83 83       	std	Z+3, r24	; 0x03
	
	ADCA.CH1.CTRL = 0x83;		//Dif with gain of 1  
 294:	83 e8       	ldi	r24, 0x83	; 131
 296:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH1.MUXCTRL = 0x21;	//Pin 4 and 5  0100010
 298:	81 e2       	ldi	r24, 0x21	; 33
 29a:	81 a7       	std	Z+41, r24	; 0x29

	
	ADCA.INTFLAGS = 0x01;		// clearing flag
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	86 83       	std	Z+6, r24	; 0x06
 2a0:	08 95       	ret

000002a2 <ADC_read>:


uint16_t ADC_read() {
	
	
	ADCA.CH1.CTRL |= (1 << ADC_CH_START_bp);			//start conversion
 2a2:	e0 e0       	ldi	r30, 0x00	; 0
 2a4:	f2 e0       	ldi	r31, 0x02	; 2
 2a6:	80 a5       	ldd	r24, Z+40	; 0x28
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	80 a7       	std	Z+40, r24	; 0x28
	while(!(ADCA.CH1.INTFLAGS & ADC_CH_CHIF_bm));		//wait until conversion is complete
 2ac:	83 a5       	ldd	r24, Z+43	; 0x2b
 2ae:	80 ff       	sbrs	r24, 0
 2b0:	fd cf       	rjmp	.-6      	; 0x2ac <ADC_read+0xa>
	ADCA.INTFLAGS = 0x01;								//clear flag
 2b2:	e0 e0       	ldi	r30, 0x00	; 0
 2b4:	f2 e0       	ldi	r31, 0x02	; 2
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	86 83       	std	Z+6, r24	; 0x06
	
	
	return ADCA.CH1.RES;
 2ba:	84 a5       	ldd	r24, Z+44	; 0x2c
 2bc:	95 a5       	ldd	r25, Z+45	; 0x2d
	
	
}
 2be:	08 95       	ret

000002c0 <delay_3s>:


void delay_3s(void)
{
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	00 d0       	rcall	.+0      	; 0x2c6 <delay_3s+0x6>
 2c6:	1f 92       	push	r1
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;				//Volatile prevents compiler optimization
	for(ticks = 0; ticks <= 2000000; ticks++);	//increment 2e6 times -> ~ 1 sec
 2cc:	19 82       	std	Y+1, r1	; 0x01
 2ce:	1a 82       	std	Y+2, r1	; 0x02
 2d0:	1b 82       	std	Y+3, r1	; 0x03
 2d2:	1c 82       	std	Y+4, r1	; 0x04
 2d4:	89 81       	ldd	r24, Y+1	; 0x01
 2d6:	9a 81       	ldd	r25, Y+2	; 0x02
 2d8:	ab 81       	ldd	r26, Y+3	; 0x03
 2da:	bc 81       	ldd	r27, Y+4	; 0x04
 2dc:	81 38       	cpi	r24, 0x81	; 129
 2de:	94 48       	sbci	r25, 0x84	; 132
 2e0:	ae 41       	sbci	r26, 0x1E	; 30
 2e2:	b1 05       	cpc	r27, r1
 2e4:	a0 f4       	brcc	.+40     	; 0x30e <delay_3s+0x4e>
 2e6:	89 81       	ldd	r24, Y+1	; 0x01
 2e8:	9a 81       	ldd	r25, Y+2	; 0x02
 2ea:	ab 81       	ldd	r26, Y+3	; 0x03
 2ec:	bc 81       	ldd	r27, Y+4	; 0x04
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	a1 1d       	adc	r26, r1
 2f2:	b1 1d       	adc	r27, r1
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	ab 83       	std	Y+3, r26	; 0x03
 2fa:	bc 83       	std	Y+4, r27	; 0x04
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	ab 81       	ldd	r26, Y+3	; 0x03
 302:	bc 81       	ldd	r27, Y+4	; 0x04
 304:	81 38       	cpi	r24, 0x81	; 129
 306:	94 48       	sbci	r25, 0x84	; 132
 308:	ae 41       	sbci	r26, 0x1E	; 30
 30a:	b1 05       	cpc	r27, r1
 30c:	60 f3       	brcs	.-40     	; 0x2e6 <delay_3s+0x26>
}
 30e:	24 96       	adiw	r28, 0x04	; 4
 310:	cd bf       	out	0x3d, r28	; 61
 312:	de bf       	out	0x3e, r29	; 62
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <send_Values>:

void send_Values() {
 31a:	cf 92       	push	r12
 31c:	df 92       	push	r13
 31e:	ef 92       	push	r14
 320:	ff 92       	push	r15
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	28 97       	sbiw	r28, 0x08	; 8
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	de bf       	out	0x3e, r29	; 62
	
	volatile int8_t adcVal = 0;
 330:	19 82       	std	Y+1, r1	; 0x01
	volatile int intVal = 0;
 332:	1a 82       	std	Y+2, r1	; 0x02
 334:	1b 82       	std	Y+3, r1	; 0x03
	volatile float voltVal = 0;
 336:	1c 82       	std	Y+4, r1	; 0x04
 338:	1d 82       	std	Y+5, r1	; 0x05
 33a:	1e 82       	std	Y+6, r1	; 0x06
 33c:	1f 82       	std	Y+7, r1	; 0x07
	
	adcVal = (ADC_read() << 2);
 33e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <ADC_read>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	89 83       	std	Y+1, r24	; 0x01

	//voltVal = (1/50)*adcVal + .0098
	voltVal = adcVal;
 34c:	69 81       	ldd	r22, Y+1	; 0x01
 34e:	06 2e       	mov	r0, r22
 350:	00 0c       	add	r0, r0
 352:	77 0b       	sbc	r23, r23
 354:	88 0b       	sbc	r24, r24
 356:	99 0b       	sbc	r25, r25
 358:	0e 94 98 03 	call	0x730	; 0x730 <__floatsisf>
 35c:	6c 83       	std	Y+4, r22	; 0x04
 35e:	7d 83       	std	Y+5, r23	; 0x05
 360:	8e 83       	std	Y+6, r24	; 0x06
 362:	9f 83       	std	Y+7, r25	; 0x07
	voltVal /= 50;
 364:	6c 81       	ldd	r22, Y+4	; 0x04
 366:	7d 81       	ldd	r23, Y+5	; 0x05
 368:	8e 81       	ldd	r24, Y+6	; 0x06
 36a:	9f 81       	ldd	r25, Y+7	; 0x07
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	48 e4       	ldi	r20, 0x48	; 72
 372:	52 e4       	ldi	r21, 0x42	; 66
 374:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__divsf3>
 378:	6c 83       	std	Y+4, r22	; 0x04
 37a:	7d 83       	std	Y+5, r23	; 0x05
 37c:	8e 83       	std	Y+6, r24	; 0x06
 37e:	9f 83       	std	Y+7, r25	; 0x07
	voltVal += .0098;
 380:	6c 81       	ldd	r22, Y+4	; 0x04
 382:	7d 81       	ldd	r23, Y+5	; 0x05
 384:	8e 81       	ldd	r24, Y+6	; 0x06
 386:	9f 81       	ldd	r25, Y+7	; 0x07
 388:	2e e2       	ldi	r18, 0x2E	; 46
 38a:	30 e9       	ldi	r19, 0x90	; 144
 38c:	40 e2       	ldi	r20, 0x20	; 32
 38e:	5c e3       	ldi	r21, 0x3C	; 60
 390:	0e 94 82 02 	call	0x504	; 0x504 <__addsf3>
 394:	6c 83       	std	Y+4, r22	; 0x04
 396:	7d 83       	std	Y+5, r23	; 0x05
 398:	8e 83       	std	Y+6, r24	; 0x06
 39a:	9f 83       	std	Y+7, r25	; 0x07

	if (voltVal >= 0) {
 39c:	6c 81       	ldd	r22, Y+4	; 0x04
 39e:	7d 81       	ldd	r23, Y+5	; 0x05
 3a0:	8e 81       	ldd	r24, Y+6	; 0x06
 3a2:	9f 81       	ldd	r25, Y+7	; 0x07
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	a9 01       	movw	r20, r18
 3aa:	0e 94 24 04 	call	0x848	; 0x848 <__gesf2>
 3ae:	88 23       	and	r24, r24
 3b0:	24 f0       	brlt	.+8      	; 0x3ba <send_Values+0xa0>
		send_char((char)0x2B);				//+/-
 3b2:	8b e2       	ldi	r24, 0x2B	; 43
 3b4:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
 3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <send_Values+0xb8>
	}
	
	else  {
		send_char((char)0x2D);
 3ba:	8d e2       	ldi	r24, 0x2D	; 45
 3bc:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
		voltVal *= -1;
 3c0:	8c 81       	ldd	r24, Y+4	; 0x04
 3c2:	9d 81       	ldd	r25, Y+5	; 0x05
 3c4:	ae 81       	ldd	r26, Y+6	; 0x06
 3c6:	bf 81       	ldd	r27, Y+7	; 0x07
 3c8:	b0 58       	subi	r27, 0x80	; 128
 3ca:	8c 83       	std	Y+4, r24	; 0x04
 3cc:	9d 83       	std	Y+5, r25	; 0x05
 3ce:	ae 83       	std	Y+6, r26	; 0x06
 3d0:	bf 83       	std	Y+7, r27	; 0x07
	}
	
	intVal = (int)voltVal;					//1st iteration
 3d2:	6c 81       	ldd	r22, Y+4	; 0x04
 3d4:	7d 81       	ldd	r23, Y+5	; 0x05
 3d6:	8e 81       	ldd	r24, Y+6	; 0x06
 3d8:	9f 81       	ldd	r25, Y+7	; 0x07
 3da:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fixsfsi>
 3de:	6a 83       	std	Y+2, r22	; 0x02
 3e0:	7b 83       	std	Y+3, r23	; 0x03
	send_char((char)(intVal + '0'));
 3e2:	8a 81       	ldd	r24, Y+2	; 0x02
 3e4:	9b 81       	ldd	r25, Y+3	; 0x03
 3e6:	80 5d       	subi	r24, 0xD0	; 208
 3e8:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	send_char((char)0x2E);					//.
 3ec:	8e e2       	ldi	r24, 0x2E	; 46
 3ee:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	
	voltVal = 10*(voltVal - intVal);		//2nd iteration
 3f2:	cc 80       	ldd	r12, Y+4	; 0x04
 3f4:	dd 80       	ldd	r13, Y+5	; 0x05
 3f6:	ee 80       	ldd	r14, Y+6	; 0x06
 3f8:	ff 80       	ldd	r15, Y+7	; 0x07
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	9b 81       	ldd	r25, Y+3	; 0x03
 3fe:	bc 01       	movw	r22, r24
 400:	99 0f       	add	r25, r25
 402:	88 0b       	sbc	r24, r24
 404:	99 0b       	sbc	r25, r25
 406:	0e 94 98 03 	call	0x730	; 0x730 <__floatsisf>
 40a:	9b 01       	movw	r18, r22
 40c:	ac 01       	movw	r20, r24
 40e:	c7 01       	movw	r24, r14
 410:	b6 01       	movw	r22, r12
 412:	0e 94 81 02 	call	0x502	; 0x502 <__subsf3>
 416:	20 e0       	ldi	r18, 0x00	; 0
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	40 e2       	ldi	r20, 0x20	; 32
 41c:	51 e4       	ldi	r21, 0x41	; 65
 41e:	0e 94 29 04 	call	0x852	; 0x852 <__mulsf3>
 422:	6c 83       	std	Y+4, r22	; 0x04
 424:	7d 83       	std	Y+5, r23	; 0x05
 426:	8e 83       	std	Y+6, r24	; 0x06
 428:	9f 83       	std	Y+7, r25	; 0x07
	intVal = (int)voltVal;
 42a:	6c 81       	ldd	r22, Y+4	; 0x04
 42c:	7d 81       	ldd	r23, Y+5	; 0x05
 42e:	8e 81       	ldd	r24, Y+6	; 0x06
 430:	9f 81       	ldd	r25, Y+7	; 0x07
 432:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fixsfsi>
 436:	6a 83       	std	Y+2, r22	; 0x02
 438:	7b 83       	std	Y+3, r23	; 0x03
	send_char((char)(intVal + '0'));
 43a:	8a 81       	ldd	r24, Y+2	; 0x02
 43c:	9b 81       	ldd	r25, Y+3	; 0x03
 43e:	80 5d       	subi	r24, 0xD0	; 208
 440:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	
	voltVal = 10*(voltVal - intVal);		//3rd iteration
 444:	cc 80       	ldd	r12, Y+4	; 0x04
 446:	dd 80       	ldd	r13, Y+5	; 0x05
 448:	ee 80       	ldd	r14, Y+6	; 0x06
 44a:	ff 80       	ldd	r15, Y+7	; 0x07
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	9b 81       	ldd	r25, Y+3	; 0x03
 450:	bc 01       	movw	r22, r24
 452:	99 0f       	add	r25, r25
 454:	88 0b       	sbc	r24, r24
 456:	99 0b       	sbc	r25, r25
 458:	0e 94 98 03 	call	0x730	; 0x730 <__floatsisf>
 45c:	9b 01       	movw	r18, r22
 45e:	ac 01       	movw	r20, r24
 460:	c7 01       	movw	r24, r14
 462:	b6 01       	movw	r22, r12
 464:	0e 94 81 02 	call	0x502	; 0x502 <__subsf3>
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	40 e2       	ldi	r20, 0x20	; 32
 46e:	51 e4       	ldi	r21, 0x41	; 65
 470:	0e 94 29 04 	call	0x852	; 0x852 <__mulsf3>
 474:	6c 83       	std	Y+4, r22	; 0x04
 476:	7d 83       	std	Y+5, r23	; 0x05
 478:	8e 83       	std	Y+6, r24	; 0x06
 47a:	9f 83       	std	Y+7, r25	; 0x07
	intVal = (int)voltVal;
 47c:	6c 81       	ldd	r22, Y+4	; 0x04
 47e:	7d 81       	ldd	r23, Y+5	; 0x05
 480:	8e 81       	ldd	r24, Y+6	; 0x06
 482:	9f 81       	ldd	r25, Y+7	; 0x07
 484:	0e 94 60 03 	call	0x6c0	; 0x6c0 <__fixsfsi>
 488:	6a 83       	std	Y+2, r22	; 0x02
 48a:	7b 83       	std	Y+3, r23	; 0x03
	send_char((char)(intVal + '0'));
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	9b 81       	ldd	r25, Y+3	; 0x03
 490:	80 5d       	subi	r24, 0xD0	; 208
 492:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	send_char((char)0x20);					//space
 496:	80 e2       	ldi	r24, 0x20	; 32
 498:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	
	//hex Values
	volatile int8_t hexVal = 0;
 49c:	18 86       	std	Y+8, r1	; 0x08
	hexVal = (adcVal >> 1);
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	85 95       	asr	r24
 4a2:	88 87       	std	Y+8, r24	; 0x08
	
	send_char((char)0x28);							//(
 4a4:	88 e2       	ldi	r24, 0x28	; 40
 4a6:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	send_char((char)0x30);							//0
 4aa:	80 e3       	ldi	r24, 0x30	; 48
 4ac:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	send_char((char)0x78);							//x;
 4b0:	88 e7       	ldi	r24, 0x78	; 120
 4b2:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	send_char((char)(hexVal + '0'));				//firs byte
 4b6:	88 85       	ldd	r24, Y+8	; 0x08
 4b8:	80 5d       	subi	r24, 0xD0	; 208
 4ba:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	send_char((char)((adcVal & 0x0F) + '0'));		//second byte
 4be:	89 81       	ldd	r24, Y+1	; 0x01
 4c0:	8f 70       	andi	r24, 0x0F	; 15
 4c2:	80 5d       	subi	r24, 0xD0	; 208
 4c4:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	send_char((char)0x29);							//)
 4c8:	89 e2       	ldi	r24, 0x29	; 41
 4ca:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	send_char((char)0x20);							//space
 4ce:	80 e2       	ldi	r24, 0x20	; 32
 4d0:	0e 94 36 01 	call	0x26c	; 0x26c <send_char>
	
	
}
 4d4:	28 96       	adiw	r28, 0x08	; 8
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	de bf       	out	0x3e, r29	; 62
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	ff 90       	pop	r15
 4e0:	ef 90       	pop	r14
 4e2:	df 90       	pop	r13
 4e4:	cf 90       	pop	r12
 4e6:	08 95       	ret

000004e8 <main>:


int main(void)
{
   
	CLK_init();
 4e8:	0e 94 10 01 	call	0x220	; 0x220 <CLK_init>
	ADC_init();
 4ec:	0e 94 3e 01 	call	0x27c	; 0x27c <ADC_init>
	USART_init();
 4f0:	0e 94 1e 01 	call	0x23c	; 0x23c <USART_init>
	IO_init();	     
 4f4:	0e 94 29 01 	call	0x252	; 0x252 <IO_init>
	
	
    while(1){
		
		send_Values();
 4f8:	0e 94 8d 01 	call	0x31a	; 0x31a <send_Values>
		delay_3s();
 4fc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <delay_3s>
	
	
	}
 500:	fb cf       	rjmp	.-10     	; 0x4f8 <main+0x10>

00000502 <__subsf3>:
 502:	50 58       	subi	r21, 0x80	; 128

00000504 <__addsf3>:
 504:	bb 27       	eor	r27, r27
 506:	aa 27       	eor	r26, r26
 508:	0e 94 99 02 	call	0x532	; 0x532 <__addsf3x>
 50c:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_round>
 510:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscA>
 514:	38 f0       	brcs	.+14     	; 0x524 <__addsf3+0x20>
 516:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_pscB>
 51a:	20 f0       	brcs	.+8      	; 0x524 <__addsf3+0x20>
 51c:	39 f4       	brne	.+14     	; 0x52c <__addsf3+0x28>
 51e:	9f 3f       	cpi	r25, 0xFF	; 255
 520:	19 f4       	brne	.+6      	; 0x528 <__addsf3+0x24>
 522:	26 f4       	brtc	.+8      	; 0x52c <__addsf3+0x28>
 524:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_nan>
 528:	0e f4       	brtc	.+2      	; 0x52c <__addsf3+0x28>
 52a:	e0 95       	com	r30
 52c:	e7 fb       	bst	r30, 7
 52e:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>

00000532 <__addsf3x>:
 532:	e9 2f       	mov	r30, r25
 534:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_split3>
 538:	58 f3       	brcs	.-42     	; 0x510 <__addsf3+0xc>
 53a:	ba 17       	cp	r27, r26
 53c:	62 07       	cpc	r22, r18
 53e:	73 07       	cpc	r23, r19
 540:	84 07       	cpc	r24, r20
 542:	95 07       	cpc	r25, r21
 544:	20 f0       	brcs	.+8      	; 0x54e <__addsf3x+0x1c>
 546:	79 f4       	brne	.+30     	; 0x566 <__addsf3x+0x34>
 548:	a6 f5       	brtc	.+104    	; 0x5b2 <__addsf3x+0x80>
 54a:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_zero>
 54e:	0e f4       	brtc	.+2      	; 0x552 <__addsf3x+0x20>
 550:	e0 95       	com	r30
 552:	0b 2e       	mov	r0, r27
 554:	ba 2f       	mov	r27, r26
 556:	a0 2d       	mov	r26, r0
 558:	0b 01       	movw	r0, r22
 55a:	b9 01       	movw	r22, r18
 55c:	90 01       	movw	r18, r0
 55e:	0c 01       	movw	r0, r24
 560:	ca 01       	movw	r24, r20
 562:	a0 01       	movw	r20, r0
 564:	11 24       	eor	r1, r1
 566:	ff 27       	eor	r31, r31
 568:	59 1b       	sub	r21, r25
 56a:	99 f0       	breq	.+38     	; 0x592 <__addsf3x+0x60>
 56c:	59 3f       	cpi	r21, 0xF9	; 249
 56e:	50 f4       	brcc	.+20     	; 0x584 <__addsf3x+0x52>
 570:	50 3e       	cpi	r21, 0xE0	; 224
 572:	68 f1       	brcs	.+90     	; 0x5ce <__addsf3x+0x9c>
 574:	1a 16       	cp	r1, r26
 576:	f0 40       	sbci	r31, 0x00	; 0
 578:	a2 2f       	mov	r26, r18
 57a:	23 2f       	mov	r18, r19
 57c:	34 2f       	mov	r19, r20
 57e:	44 27       	eor	r20, r20
 580:	58 5f       	subi	r21, 0xF8	; 248
 582:	f3 cf       	rjmp	.-26     	; 0x56a <__addsf3x+0x38>
 584:	46 95       	lsr	r20
 586:	37 95       	ror	r19
 588:	27 95       	ror	r18
 58a:	a7 95       	ror	r26
 58c:	f0 40       	sbci	r31, 0x00	; 0
 58e:	53 95       	inc	r21
 590:	c9 f7       	brne	.-14     	; 0x584 <__addsf3x+0x52>
 592:	7e f4       	brtc	.+30     	; 0x5b2 <__addsf3x+0x80>
 594:	1f 16       	cp	r1, r31
 596:	ba 0b       	sbc	r27, r26
 598:	62 0b       	sbc	r22, r18
 59a:	73 0b       	sbc	r23, r19
 59c:	84 0b       	sbc	r24, r20
 59e:	ba f0       	brmi	.+46     	; 0x5ce <__addsf3x+0x9c>
 5a0:	91 50       	subi	r25, 0x01	; 1
 5a2:	a1 f0       	breq	.+40     	; 0x5cc <__addsf3x+0x9a>
 5a4:	ff 0f       	add	r31, r31
 5a6:	bb 1f       	adc	r27, r27
 5a8:	66 1f       	adc	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	c2 f7       	brpl	.-16     	; 0x5a0 <__addsf3x+0x6e>
 5b0:	0e c0       	rjmp	.+28     	; 0x5ce <__addsf3x+0x9c>
 5b2:	ba 0f       	add	r27, r26
 5b4:	62 1f       	adc	r22, r18
 5b6:	73 1f       	adc	r23, r19
 5b8:	84 1f       	adc	r24, r20
 5ba:	48 f4       	brcc	.+18     	; 0x5ce <__addsf3x+0x9c>
 5bc:	87 95       	ror	r24
 5be:	77 95       	ror	r23
 5c0:	67 95       	ror	r22
 5c2:	b7 95       	ror	r27
 5c4:	f7 95       	ror	r31
 5c6:	9e 3f       	cpi	r25, 0xFE	; 254
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <__addsf3x+0x9a>
 5ca:	b0 cf       	rjmp	.-160    	; 0x52c <__addsf3+0x28>
 5cc:	93 95       	inc	r25
 5ce:	88 0f       	add	r24, r24
 5d0:	08 f0       	brcs	.+2      	; 0x5d4 <__addsf3x+0xa2>
 5d2:	99 27       	eor	r25, r25
 5d4:	ee 0f       	add	r30, r30
 5d6:	97 95       	ror	r25
 5d8:	87 95       	ror	r24
 5da:	08 95       	ret

000005dc <__divsf3>:
 5dc:	0e 94 02 03 	call	0x604	; 0x604 <__divsf3x>
 5e0:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_round>
 5e4:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_pscB>
 5e8:	58 f0       	brcs	.+22     	; 0x600 <__divsf3+0x24>
 5ea:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscA>
 5ee:	40 f0       	brcs	.+16     	; 0x600 <__divsf3+0x24>
 5f0:	29 f4       	brne	.+10     	; 0x5fc <__divsf3+0x20>
 5f2:	5f 3f       	cpi	r21, 0xFF	; 255
 5f4:	29 f0       	breq	.+10     	; 0x600 <__divsf3+0x24>
 5f6:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 5fa:	51 11       	cpse	r21, r1
 5fc:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>
 600:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_nan>

00000604 <__divsf3x>:
 604:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_split3>
 608:	68 f3       	brcs	.-38     	; 0x5e4 <__divsf3+0x8>

0000060a <__divsf3_pse>:
 60a:	99 23       	and	r25, r25
 60c:	b1 f3       	breq	.-20     	; 0x5fa <__divsf3+0x1e>
 60e:	55 23       	and	r21, r21
 610:	91 f3       	breq	.-28     	; 0x5f6 <__divsf3+0x1a>
 612:	95 1b       	sub	r25, r21
 614:	55 0b       	sbc	r21, r21
 616:	bb 27       	eor	r27, r27
 618:	aa 27       	eor	r26, r26
 61a:	62 17       	cp	r22, r18
 61c:	73 07       	cpc	r23, r19
 61e:	84 07       	cpc	r24, r20
 620:	38 f0       	brcs	.+14     	; 0x630 <__divsf3_pse+0x26>
 622:	9f 5f       	subi	r25, 0xFF	; 255
 624:	5f 4f       	sbci	r21, 0xFF	; 255
 626:	22 0f       	add	r18, r18
 628:	33 1f       	adc	r19, r19
 62a:	44 1f       	adc	r20, r20
 62c:	aa 1f       	adc	r26, r26
 62e:	a9 f3       	breq	.-22     	; 0x61a <__divsf3_pse+0x10>
 630:	35 d0       	rcall	.+106    	; 0x69c <__divsf3_pse+0x92>
 632:	0e 2e       	mov	r0, r30
 634:	3a f0       	brmi	.+14     	; 0x644 <__divsf3_pse+0x3a>
 636:	e0 e8       	ldi	r30, 0x80	; 128
 638:	32 d0       	rcall	.+100    	; 0x69e <__divsf3_pse+0x94>
 63a:	91 50       	subi	r25, 0x01	; 1
 63c:	50 40       	sbci	r21, 0x00	; 0
 63e:	e6 95       	lsr	r30
 640:	00 1c       	adc	r0, r0
 642:	ca f7       	brpl	.-14     	; 0x636 <__divsf3_pse+0x2c>
 644:	2b d0       	rcall	.+86     	; 0x69c <__divsf3_pse+0x92>
 646:	fe 2f       	mov	r31, r30
 648:	29 d0       	rcall	.+82     	; 0x69c <__divsf3_pse+0x92>
 64a:	66 0f       	add	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	88 1f       	adc	r24, r24
 650:	bb 1f       	adc	r27, r27
 652:	26 17       	cp	r18, r22
 654:	37 07       	cpc	r19, r23
 656:	48 07       	cpc	r20, r24
 658:	ab 07       	cpc	r26, r27
 65a:	b0 e8       	ldi	r27, 0x80	; 128
 65c:	09 f0       	breq	.+2      	; 0x660 <__divsf3_pse+0x56>
 65e:	bb 0b       	sbc	r27, r27
 660:	80 2d       	mov	r24, r0
 662:	bf 01       	movw	r22, r30
 664:	ff 27       	eor	r31, r31
 666:	93 58       	subi	r25, 0x83	; 131
 668:	5f 4f       	sbci	r21, 0xFF	; 255
 66a:	3a f0       	brmi	.+14     	; 0x67a <__divsf3_pse+0x70>
 66c:	9e 3f       	cpi	r25, 0xFE	; 254
 66e:	51 05       	cpc	r21, r1
 670:	78 f0       	brcs	.+30     	; 0x690 <__divsf3_pse+0x86>
 672:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 676:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>
 67a:	5f 3f       	cpi	r21, 0xFF	; 255
 67c:	e4 f3       	brlt	.-8      	; 0x676 <__divsf3_pse+0x6c>
 67e:	98 3e       	cpi	r25, 0xE8	; 232
 680:	d4 f3       	brlt	.-12     	; 0x676 <__divsf3_pse+0x6c>
 682:	86 95       	lsr	r24
 684:	77 95       	ror	r23
 686:	67 95       	ror	r22
 688:	b7 95       	ror	r27
 68a:	f7 95       	ror	r31
 68c:	9f 5f       	subi	r25, 0xFF	; 255
 68e:	c9 f7       	brne	.-14     	; 0x682 <__divsf3_pse+0x78>
 690:	88 0f       	add	r24, r24
 692:	91 1d       	adc	r25, r1
 694:	96 95       	lsr	r25
 696:	87 95       	ror	r24
 698:	97 f9       	bld	r25, 7
 69a:	08 95       	ret
 69c:	e1 e0       	ldi	r30, 0x01	; 1
 69e:	66 0f       	add	r22, r22
 6a0:	77 1f       	adc	r23, r23
 6a2:	88 1f       	adc	r24, r24
 6a4:	bb 1f       	adc	r27, r27
 6a6:	62 17       	cp	r22, r18
 6a8:	73 07       	cpc	r23, r19
 6aa:	84 07       	cpc	r24, r20
 6ac:	ba 07       	cpc	r27, r26
 6ae:	20 f0       	brcs	.+8      	; 0x6b8 <__divsf3_pse+0xae>
 6b0:	62 1b       	sub	r22, r18
 6b2:	73 0b       	sbc	r23, r19
 6b4:	84 0b       	sbc	r24, r20
 6b6:	ba 0b       	sbc	r27, r26
 6b8:	ee 1f       	adc	r30, r30
 6ba:	88 f7       	brcc	.-30     	; 0x69e <__divsf3_pse+0x94>
 6bc:	e0 95       	com	r30
 6be:	08 95       	ret

000006c0 <__fixsfsi>:
 6c0:	0e 94 67 03 	call	0x6ce	; 0x6ce <__fixunssfsi>
 6c4:	68 94       	set
 6c6:	b1 11       	cpse	r27, r1
 6c8:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>
 6cc:	08 95       	ret

000006ce <__fixunssfsi>:
 6ce:	0e 94 03 04 	call	0x806	; 0x806 <__fp_splitA>
 6d2:	88 f0       	brcs	.+34     	; 0x6f6 <__fixunssfsi+0x28>
 6d4:	9f 57       	subi	r25, 0x7F	; 127
 6d6:	98 f0       	brcs	.+38     	; 0x6fe <__fixunssfsi+0x30>
 6d8:	b9 2f       	mov	r27, r25
 6da:	99 27       	eor	r25, r25
 6dc:	b7 51       	subi	r27, 0x17	; 23
 6de:	b0 f0       	brcs	.+44     	; 0x70c <__fixunssfsi+0x3e>
 6e0:	e1 f0       	breq	.+56     	; 0x71a <__fixunssfsi+0x4c>
 6e2:	66 0f       	add	r22, r22
 6e4:	77 1f       	adc	r23, r23
 6e6:	88 1f       	adc	r24, r24
 6e8:	99 1f       	adc	r25, r25
 6ea:	1a f0       	brmi	.+6      	; 0x6f2 <__fixunssfsi+0x24>
 6ec:	ba 95       	dec	r27
 6ee:	c9 f7       	brne	.-14     	; 0x6e2 <__fixunssfsi+0x14>
 6f0:	14 c0       	rjmp	.+40     	; 0x71a <__fixunssfsi+0x4c>
 6f2:	b1 30       	cpi	r27, 0x01	; 1
 6f4:	91 f0       	breq	.+36     	; 0x71a <__fixunssfsi+0x4c>
 6f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_zero>
 6fa:	b1 e0       	ldi	r27, 0x01	; 1
 6fc:	08 95       	ret
 6fe:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__fp_zero>
 702:	67 2f       	mov	r22, r23
 704:	78 2f       	mov	r23, r24
 706:	88 27       	eor	r24, r24
 708:	b8 5f       	subi	r27, 0xF8	; 248
 70a:	39 f0       	breq	.+14     	; 0x71a <__fixunssfsi+0x4c>
 70c:	b9 3f       	cpi	r27, 0xF9	; 249
 70e:	cc f3       	brlt	.-14     	; 0x702 <__fixunssfsi+0x34>
 710:	86 95       	lsr	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	b3 95       	inc	r27
 718:	d9 f7       	brne	.-10     	; 0x710 <__fixunssfsi+0x42>
 71a:	3e f4       	brtc	.+14     	; 0x72a <__fixunssfsi+0x5c>
 71c:	90 95       	com	r25
 71e:	80 95       	com	r24
 720:	70 95       	com	r23
 722:	61 95       	neg	r22
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	08 95       	ret

0000072c <__floatunsisf>:
 72c:	e8 94       	clt
 72e:	09 c0       	rjmp	.+18     	; 0x742 <__floatsisf+0x12>

00000730 <__floatsisf>:
 730:	97 fb       	bst	r25, 7
 732:	3e f4       	brtc	.+14     	; 0x742 <__floatsisf+0x12>
 734:	90 95       	com	r25
 736:	80 95       	com	r24
 738:	70 95       	com	r23
 73a:	61 95       	neg	r22
 73c:	7f 4f       	sbci	r23, 0xFF	; 255
 73e:	8f 4f       	sbci	r24, 0xFF	; 255
 740:	9f 4f       	sbci	r25, 0xFF	; 255
 742:	99 23       	and	r25, r25
 744:	a9 f0       	breq	.+42     	; 0x770 <__floatsisf+0x40>
 746:	f9 2f       	mov	r31, r25
 748:	96 e9       	ldi	r25, 0x96	; 150
 74a:	bb 27       	eor	r27, r27
 74c:	93 95       	inc	r25
 74e:	f6 95       	lsr	r31
 750:	87 95       	ror	r24
 752:	77 95       	ror	r23
 754:	67 95       	ror	r22
 756:	b7 95       	ror	r27
 758:	f1 11       	cpse	r31, r1
 75a:	f8 cf       	rjmp	.-16     	; 0x74c <__floatsisf+0x1c>
 75c:	fa f4       	brpl	.+62     	; 0x79c <__floatsisf+0x6c>
 75e:	bb 0f       	add	r27, r27
 760:	11 f4       	brne	.+4      	; 0x766 <__floatsisf+0x36>
 762:	60 ff       	sbrs	r22, 0
 764:	1b c0       	rjmp	.+54     	; 0x79c <__floatsisf+0x6c>
 766:	6f 5f       	subi	r22, 0xFF	; 255
 768:	7f 4f       	sbci	r23, 0xFF	; 255
 76a:	8f 4f       	sbci	r24, 0xFF	; 255
 76c:	9f 4f       	sbci	r25, 0xFF	; 255
 76e:	16 c0       	rjmp	.+44     	; 0x79c <__floatsisf+0x6c>
 770:	88 23       	and	r24, r24
 772:	11 f0       	breq	.+4      	; 0x778 <__floatsisf+0x48>
 774:	96 e9       	ldi	r25, 0x96	; 150
 776:	11 c0       	rjmp	.+34     	; 0x79a <__floatsisf+0x6a>
 778:	77 23       	and	r23, r23
 77a:	21 f0       	breq	.+8      	; 0x784 <__floatsisf+0x54>
 77c:	9e e8       	ldi	r25, 0x8E	; 142
 77e:	87 2f       	mov	r24, r23
 780:	76 2f       	mov	r23, r22
 782:	05 c0       	rjmp	.+10     	; 0x78e <__floatsisf+0x5e>
 784:	66 23       	and	r22, r22
 786:	71 f0       	breq	.+28     	; 0x7a4 <__floatsisf+0x74>
 788:	96 e8       	ldi	r25, 0x86	; 134
 78a:	86 2f       	mov	r24, r22
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	2a f0       	brmi	.+10     	; 0x79c <__floatsisf+0x6c>
 792:	9a 95       	dec	r25
 794:	66 0f       	add	r22, r22
 796:	77 1f       	adc	r23, r23
 798:	88 1f       	adc	r24, r24
 79a:	da f7       	brpl	.-10     	; 0x792 <__floatsisf+0x62>
 79c:	88 0f       	add	r24, r24
 79e:	96 95       	lsr	r25
 7a0:	87 95       	ror	r24
 7a2:	97 f9       	bld	r25, 7
 7a4:	08 95       	ret

000007a6 <__fp_inf>:
 7a6:	97 f9       	bld	r25, 7
 7a8:	9f 67       	ori	r25, 0x7F	; 127
 7aa:	80 e8       	ldi	r24, 0x80	; 128
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	08 95       	ret

000007b2 <__fp_nan>:
 7b2:	9f ef       	ldi	r25, 0xFF	; 255
 7b4:	80 ec       	ldi	r24, 0xC0	; 192
 7b6:	08 95       	ret

000007b8 <__fp_pscA>:
 7b8:	00 24       	eor	r0, r0
 7ba:	0a 94       	dec	r0
 7bc:	16 16       	cp	r1, r22
 7be:	17 06       	cpc	r1, r23
 7c0:	18 06       	cpc	r1, r24
 7c2:	09 06       	cpc	r0, r25
 7c4:	08 95       	ret

000007c6 <__fp_pscB>:
 7c6:	00 24       	eor	r0, r0
 7c8:	0a 94       	dec	r0
 7ca:	12 16       	cp	r1, r18
 7cc:	13 06       	cpc	r1, r19
 7ce:	14 06       	cpc	r1, r20
 7d0:	05 06       	cpc	r0, r21
 7d2:	08 95       	ret

000007d4 <__fp_round>:
 7d4:	09 2e       	mov	r0, r25
 7d6:	03 94       	inc	r0
 7d8:	00 0c       	add	r0, r0
 7da:	11 f4       	brne	.+4      	; 0x7e0 <__fp_round+0xc>
 7dc:	88 23       	and	r24, r24
 7de:	52 f0       	brmi	.+20     	; 0x7f4 <__fp_round+0x20>
 7e0:	bb 0f       	add	r27, r27
 7e2:	40 f4       	brcc	.+16     	; 0x7f4 <__fp_round+0x20>
 7e4:	bf 2b       	or	r27, r31
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__fp_round+0x18>
 7e8:	60 ff       	sbrs	r22, 0
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__fp_round+0x20>
 7ec:	6f 5f       	subi	r22, 0xFF	; 255
 7ee:	7f 4f       	sbci	r23, 0xFF	; 255
 7f0:	8f 4f       	sbci	r24, 0xFF	; 255
 7f2:	9f 4f       	sbci	r25, 0xFF	; 255
 7f4:	08 95       	ret

000007f6 <__fp_split3>:
 7f6:	57 fd       	sbrc	r21, 7
 7f8:	90 58       	subi	r25, 0x80	; 128
 7fa:	44 0f       	add	r20, r20
 7fc:	55 1f       	adc	r21, r21
 7fe:	59 f0       	breq	.+22     	; 0x816 <__fp_splitA+0x10>
 800:	5f 3f       	cpi	r21, 0xFF	; 255
 802:	71 f0       	breq	.+28     	; 0x820 <__fp_splitA+0x1a>
 804:	47 95       	ror	r20

00000806 <__fp_splitA>:
 806:	88 0f       	add	r24, r24
 808:	97 fb       	bst	r25, 7
 80a:	99 1f       	adc	r25, r25
 80c:	61 f0       	breq	.+24     	; 0x826 <__fp_splitA+0x20>
 80e:	9f 3f       	cpi	r25, 0xFF	; 255
 810:	79 f0       	breq	.+30     	; 0x830 <__fp_splitA+0x2a>
 812:	87 95       	ror	r24
 814:	08 95       	ret
 816:	12 16       	cp	r1, r18
 818:	13 06       	cpc	r1, r19
 81a:	14 06       	cpc	r1, r20
 81c:	55 1f       	adc	r21, r21
 81e:	f2 cf       	rjmp	.-28     	; 0x804 <__fp_split3+0xe>
 820:	46 95       	lsr	r20
 822:	f1 df       	rcall	.-30     	; 0x806 <__fp_splitA>
 824:	08 c0       	rjmp	.+16     	; 0x836 <__fp_splitA+0x30>
 826:	16 16       	cp	r1, r22
 828:	17 06       	cpc	r1, r23
 82a:	18 06       	cpc	r1, r24
 82c:	99 1f       	adc	r25, r25
 82e:	f1 cf       	rjmp	.-30     	; 0x812 <__fp_splitA+0xc>
 830:	86 95       	lsr	r24
 832:	71 05       	cpc	r23, r1
 834:	61 05       	cpc	r22, r1
 836:	08 94       	sec
 838:	08 95       	ret

0000083a <__fp_zero>:
 83a:	e8 94       	clt

0000083c <__fp_szero>:
 83c:	bb 27       	eor	r27, r27
 83e:	66 27       	eor	r22, r22
 840:	77 27       	eor	r23, r23
 842:	cb 01       	movw	r24, r22
 844:	97 f9       	bld	r25, 7
 846:	08 95       	ret

00000848 <__gesf2>:
 848:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_cmp>
 84c:	08 f4       	brcc	.+2      	; 0x850 <__gesf2+0x8>
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	08 95       	ret

00000852 <__mulsf3>:
 852:	0e 94 3c 04 	call	0x878	; 0x878 <__mulsf3x>
 856:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__fp_round>
 85a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscA>
 85e:	38 f0       	brcs	.+14     	; 0x86e <__mulsf3+0x1c>
 860:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_pscB>
 864:	20 f0       	brcs	.+8      	; 0x86e <__mulsf3+0x1c>
 866:	95 23       	and	r25, r21
 868:	11 f0       	breq	.+4      	; 0x86e <__mulsf3+0x1c>
 86a:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 86e:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_nan>
 872:	11 24       	eor	r1, r1
 874:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>

00000878 <__mulsf3x>:
 878:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__fp_split3>
 87c:	70 f3       	brcs	.-36     	; 0x85a <__mulsf3+0x8>

0000087e <__mulsf3_pse>:
 87e:	95 9f       	mul	r25, r21
 880:	c1 f3       	breq	.-16     	; 0x872 <__mulsf3+0x20>
 882:	95 0f       	add	r25, r21
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	55 1f       	adc	r21, r21
 888:	62 9f       	mul	r22, r18
 88a:	f0 01       	movw	r30, r0
 88c:	72 9f       	mul	r23, r18
 88e:	bb 27       	eor	r27, r27
 890:	f0 0d       	add	r31, r0
 892:	b1 1d       	adc	r27, r1
 894:	63 9f       	mul	r22, r19
 896:	aa 27       	eor	r26, r26
 898:	f0 0d       	add	r31, r0
 89a:	b1 1d       	adc	r27, r1
 89c:	aa 1f       	adc	r26, r26
 89e:	64 9f       	mul	r22, r20
 8a0:	66 27       	eor	r22, r22
 8a2:	b0 0d       	add	r27, r0
 8a4:	a1 1d       	adc	r26, r1
 8a6:	66 1f       	adc	r22, r22
 8a8:	82 9f       	mul	r24, r18
 8aa:	22 27       	eor	r18, r18
 8ac:	b0 0d       	add	r27, r0
 8ae:	a1 1d       	adc	r26, r1
 8b0:	62 1f       	adc	r22, r18
 8b2:	73 9f       	mul	r23, r19
 8b4:	b0 0d       	add	r27, r0
 8b6:	a1 1d       	adc	r26, r1
 8b8:	62 1f       	adc	r22, r18
 8ba:	83 9f       	mul	r24, r19
 8bc:	a0 0d       	add	r26, r0
 8be:	61 1d       	adc	r22, r1
 8c0:	22 1f       	adc	r18, r18
 8c2:	74 9f       	mul	r23, r20
 8c4:	33 27       	eor	r19, r19
 8c6:	a0 0d       	add	r26, r0
 8c8:	61 1d       	adc	r22, r1
 8ca:	23 1f       	adc	r18, r19
 8cc:	84 9f       	mul	r24, r20
 8ce:	60 0d       	add	r22, r0
 8d0:	21 1d       	adc	r18, r1
 8d2:	82 2f       	mov	r24, r18
 8d4:	76 2f       	mov	r23, r22
 8d6:	6a 2f       	mov	r22, r26
 8d8:	11 24       	eor	r1, r1
 8da:	9f 57       	subi	r25, 0x7F	; 127
 8dc:	50 40       	sbci	r21, 0x00	; 0
 8de:	9a f0       	brmi	.+38     	; 0x906 <__mulsf3_pse+0x88>
 8e0:	f1 f0       	breq	.+60     	; 0x91e <__mulsf3_pse+0xa0>
 8e2:	88 23       	and	r24, r24
 8e4:	4a f0       	brmi	.+18     	; 0x8f8 <__mulsf3_pse+0x7a>
 8e6:	ee 0f       	add	r30, r30
 8e8:	ff 1f       	adc	r31, r31
 8ea:	bb 1f       	adc	r27, r27
 8ec:	66 1f       	adc	r22, r22
 8ee:	77 1f       	adc	r23, r23
 8f0:	88 1f       	adc	r24, r24
 8f2:	91 50       	subi	r25, 0x01	; 1
 8f4:	50 40       	sbci	r21, 0x00	; 0
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__mulsf3_pse+0x64>
 8f8:	9e 3f       	cpi	r25, 0xFE	; 254
 8fa:	51 05       	cpc	r21, r1
 8fc:	80 f0       	brcs	.+32     	; 0x91e <__mulsf3_pse+0xa0>
 8fe:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <__fp_inf>
 902:	0c 94 1e 04 	jmp	0x83c	; 0x83c <__fp_szero>
 906:	5f 3f       	cpi	r21, 0xFF	; 255
 908:	e4 f3       	brlt	.-8      	; 0x902 <__mulsf3_pse+0x84>
 90a:	98 3e       	cpi	r25, 0xE8	; 232
 90c:	d4 f3       	brlt	.-12     	; 0x902 <__mulsf3_pse+0x84>
 90e:	86 95       	lsr	r24
 910:	77 95       	ror	r23
 912:	67 95       	ror	r22
 914:	b7 95       	ror	r27
 916:	f7 95       	ror	r31
 918:	e7 95       	ror	r30
 91a:	9f 5f       	subi	r25, 0xFF	; 255
 91c:	c1 f7       	brne	.-16     	; 0x90e <__mulsf3_pse+0x90>
 91e:	fe 2b       	or	r31, r30
 920:	88 0f       	add	r24, r24
 922:	91 1d       	adc	r25, r1
 924:	96 95       	lsr	r25
 926:	87 95       	ror	r24
 928:	97 f9       	bld	r25, 7
 92a:	08 95       	ret

0000092c <__fp_cmp>:
 92c:	99 0f       	add	r25, r25
 92e:	00 08       	sbc	r0, r0
 930:	55 0f       	add	r21, r21
 932:	aa 0b       	sbc	r26, r26
 934:	e0 e8       	ldi	r30, 0x80	; 128
 936:	fe ef       	ldi	r31, 0xFE	; 254
 938:	16 16       	cp	r1, r22
 93a:	17 06       	cpc	r1, r23
 93c:	e8 07       	cpc	r30, r24
 93e:	f9 07       	cpc	r31, r25
 940:	c0 f0       	brcs	.+48     	; 0x972 <__fp_cmp+0x46>
 942:	12 16       	cp	r1, r18
 944:	13 06       	cpc	r1, r19
 946:	e4 07       	cpc	r30, r20
 948:	f5 07       	cpc	r31, r21
 94a:	98 f0       	brcs	.+38     	; 0x972 <__fp_cmp+0x46>
 94c:	62 1b       	sub	r22, r18
 94e:	73 0b       	sbc	r23, r19
 950:	84 0b       	sbc	r24, r20
 952:	95 0b       	sbc	r25, r21
 954:	39 f4       	brne	.+14     	; 0x964 <__fp_cmp+0x38>
 956:	0a 26       	eor	r0, r26
 958:	61 f0       	breq	.+24     	; 0x972 <__fp_cmp+0x46>
 95a:	23 2b       	or	r18, r19
 95c:	24 2b       	or	r18, r20
 95e:	25 2b       	or	r18, r21
 960:	21 f4       	brne	.+8      	; 0x96a <__fp_cmp+0x3e>
 962:	08 95       	ret
 964:	0a 26       	eor	r0, r26
 966:	09 f4       	brne	.+2      	; 0x96a <__fp_cmp+0x3e>
 968:	a1 40       	sbci	r26, 0x01	; 1
 96a:	a6 95       	lsr	r26
 96c:	8f ef       	ldi	r24, 0xFF	; 255
 96e:	81 1d       	adc	r24, r1
 970:	81 1d       	adc	r24, r1
 972:	08 95       	ret

00000974 <_exit>:
 974:	f8 94       	cli

00000976 <__stop_program>:
 976:	ff cf       	rjmp	.-2      	; 0x976 <__stop_program>
