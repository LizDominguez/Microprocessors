
Lab5c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000034c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00001d72  00802000  0000034c  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000464a  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003cda  00000000  00000000  00006836  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d5  00000000  00000000  0000a510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000aae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002da0  00000000  00000000  0000ab6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  0000d90c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000d994  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	1d e3       	ldi	r17, 0x3D	; 61
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ec e4       	ldi	r30, 0x4C	; 76
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 37       	cpi	r26, 0x72	; 114
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 99 01 	call	0x332	; 0x332 <main>
 234:	0c 94 a4 01 	jmp	0x348	; 0x348 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <ADC_init>:


void ADC_init()
{
	
	ADCA.CTRLA = 0x01; //channel 0 & 1 enabled 
 23c:	e0 e0       	ldi	r30, 0x00	; 0
 23e:	f2 e0       	ldi	r31, 0x02	; 2
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 83       	st	Z, r24
	ADCA.CTRLB = 0x1C; // 8 bit right adjusted, conversion mode
 244:	9c e1       	ldi	r25, 0x1C	; 28
 246:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = 0x30; //AREFB
 248:	90 e3       	ldi	r25, 0x30	; 48
 24a:	92 83       	std	Z+2, r25	; 0x02
	ADCA.CH0.CTRL = 0x83; //Dif with gain of 1  00011
 24c:	93 e8       	ldi	r25, 0x83	; 131
 24e:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.CH0.MUXCTRL = 0x00; //ADC0 differential with gain
 250:	11 a2       	std	Z+33, r1	; 0x21
	ADCB_PRESCALER = 0x07; //512
 252:	97 e0       	ldi	r25, 0x07	; 7
 254:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <__TEXT_REGION_LENGTH__+0x700244>
	PORTA.DIR = 0x01;
 258:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
 25c:	08 95       	ret

0000025e <USART_init>:
	
}

void USART_init() {
	
		USARTD0.CTRLB = 0x18; //RXEN/TEXEN
 25e:	e0 ea       	ldi	r30, 0xA0	; 160
 260:	f9 e0       	ldi	r31, 0x09	; 9
 262:	88 e1       	ldi	r24, 0x18	; 24
 264:	84 83       	std	Z+4, r24	; 0x04
		USARTD0.CTRLC = 0x3B; //asynchronous/odd parity/1 stop bit/8 data
 266:	8b e3       	ldi	r24, 0x3B	; 59
 268:	85 83       	std	Z+5, r24	; 0x05
		USARTD0.BAUDCTRLA = (BSel & 0xFF); //sets BAUDCTRLA to lower 8 bits of BSel
 26a:	87 e8       	ldi	r24, 0x87	; 135
 26c:	86 83       	std	Z+6, r24	; 0x06
		USARTD0.BAUDCTRLB = ((BScale << 4) & 0xF0) | ((BSel >> 8) & 0x0F);
 26e:	80 ee       	ldi	r24, 0xE0	; 224
 270:	87 83       	std	Z+7, r24	; 0x07
 272:	08 95       	ret

00000274 <IO_init>:
	
}

void IO_init() {
		
		PORTD.DIRSET = 0x08;	//set TxD as output	
 274:	e0 e6       	ldi	r30, 0x60	; 96
 276:	f6 e0       	ldi	r31, 0x06	; 6
 278:	88 e0       	ldi	r24, 0x08	; 8
 27a:	81 83       	std	Z+1, r24	; 0x01
		PORTD.OUTSET = 0x08;	//set TxD to high
 27c:	85 83       	std	Z+5, r24	; 0x05
		PORTD.DIRCLR = 0x04;	//set RxD pin as input
 27e:	84 e0       	ldi	r24, 0x04	; 4
 280:	82 83       	std	Z+2, r24	; 0x02
		
									//PortQ bits 1 and 3 enable and select
		PORTQ.DIRSET = 0x0A;	//PortD bits 2 and 3 serial pins
 282:	e0 ec       	ldi	r30, 0xC0	; 192
 284:	f7 e0       	ldi	r31, 0x07	; 7
 286:	8a e0       	ldi	r24, 0x0A	; 10
 288:	81 83       	std	Z+1, r24	; 0x01
		PORTQ.OUTCLR = 0x0A;   //connected to the USB lines
 28a:	86 83       	std	Z+6, r24	; 0x06
 28c:	08 95       	ret

0000028e <DISP_VOLT>:
}


void DISP_VOLT(){
	
	uint16_t reading = ADCA.CH0.RES;
 28e:	e0 e0       	ldi	r30, 0x00	; 0
 290:	f2 e0       	ldi	r31, 0x02	; 2
 292:	84 a1       	ldd	r24, Z+36	; 0x24
 294:	95 a1       	ldd	r25, Z+37	; 0x25
	uint16_t index = ADCA.CH0.RES;
 296:	24 a1       	ldd	r18, Z+36	; 0x24
 298:	35 a1       	ldd	r19, Z+37	; 0x25
	
	if (2*reading > 500) {
 29a:	ac 01       	movw	r20, r24
 29c:	44 0f       	add	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	45 3f       	cpi	r20, 0xF5	; 245
 2a2:	51 40       	sbci	r21, 0x01	; 1
 2a4:	20 f0       	brcs	.+8      	; 0x2ae <DISP_VOLT+0x20>
		reading = 500/2;
		index = 500/2;
 2a6:	2a ef       	ldi	r18, 0xFA	; 250
 2a8:	30 e0       	ldi	r19, 0x00	; 0
	
	uint16_t reading = ADCA.CH0.RES;
	uint16_t index = ADCA.CH0.RES;
	
	if (2*reading > 500) {
		reading = 500/2;
 2aa:	8a ef       	ldi	r24, 0xFA	; 250
 2ac:	90 e0       	ldi	r25, 0x00	; 0
		index = 500/2;
	}
	

	USARTD0.DATA = VOLT[2*reading];
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	fc 01       	movw	r30, r24
 2b8:	e0 50       	subi	r30, 0x00	; 0
 2ba:	f0 4e       	sbci	r31, 0xE0	; 224
 2bc:	80 81       	ld	r24, Z
 2be:	a0 ea       	ldi	r26, 0xA0	; 160
 2c0:	b9 e0       	ldi	r27, 0x09	; 9
 2c2:	8c 93       	st	X, r24
	USARTD0.DATA = VOLT_INDEX[2*index];
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	f9 01       	movw	r30, r18
 2ce:	e6 58       	subi	r30, 0x86	; 134
 2d0:	f4 4c       	sbci	r31, 0xC4	; 196
 2d2:	80 81       	ld	r24, Z
 2d4:	8c 93       	st	X, r24
 2d6:	08 95       	ret

000002d8 <DELAY>:
	
	
}

void DELAY(void)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <DELAY+0x6>
 2de:	1f 92       	push	r1
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;            //Volatile prevents compiler optimization
	for(ticks=0;ticks<=F_CPU;ticks++);	//increment 2e6 times -> ~ 1 sec
 2e4:	19 82       	std	Y+1, r1	; 0x01
 2e6:	1a 82       	std	Y+2, r1	; 0x02
 2e8:	1b 82       	std	Y+3, r1	; 0x03
 2ea:	1c 82       	std	Y+4, r1	; 0x04
 2ec:	89 81       	ldd	r24, Y+1	; 0x01
 2ee:	9a 81       	ldd	r25, Y+2	; 0x02
 2f0:	ab 81       	ldd	r26, Y+3	; 0x03
 2f2:	bc 81       	ldd	r27, Y+4	; 0x04
 2f4:	81 38       	cpi	r24, 0x81	; 129
 2f6:	94 48       	sbci	r25, 0x84	; 132
 2f8:	ae 41       	sbci	r26, 0x1E	; 30
 2fa:	b1 05       	cpc	r27, r1
 2fc:	a0 f4       	brcc	.+40     	; 0x326 <DELAY+0x4e>
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
 300:	9a 81       	ldd	r25, Y+2	; 0x02
 302:	ab 81       	ldd	r26, Y+3	; 0x03
 304:	bc 81       	ldd	r27, Y+4	; 0x04
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	a1 1d       	adc	r26, r1
 30a:	b1 1d       	adc	r27, r1
 30c:	89 83       	std	Y+1, r24	; 0x01
 30e:	9a 83       	std	Y+2, r25	; 0x02
 310:	ab 83       	std	Y+3, r26	; 0x03
 312:	bc 83       	std	Y+4, r27	; 0x04
 314:	89 81       	ldd	r24, Y+1	; 0x01
 316:	9a 81       	ldd	r25, Y+2	; 0x02
 318:	ab 81       	ldd	r26, Y+3	; 0x03
 31a:	bc 81       	ldd	r27, Y+4	; 0x04
 31c:	81 38       	cpi	r24, 0x81	; 129
 31e:	94 48       	sbci	r25, 0x84	; 132
 320:	ae 41       	sbci	r26, 0x1E	; 30
 322:	b1 05       	cpc	r27, r1
 324:	60 f3       	brcs	.-40     	; 0x2fe <DELAY+0x26>
}
 326:	24 96       	adiw	r28, 0x04	; 4
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <main>:

int main(void)
{
   

    ADC_init();	        
 332:	0e 94 1e 01 	call	0x23c	; 0x23c <ADC_init>
	USART_init();
 336:	0e 94 2f 01 	call	0x25e	; 0x25e <USART_init>
	IO_init();
 33a:	0e 94 3a 01 	call	0x274	; 0x274 <IO_init>
	

	
    while(1){

		DISP_VOLT();
 33e:	0e 94 47 01 	call	0x28e	; 0x28e <DISP_VOLT>
		DELAY();
 342:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <DELAY>
		
	
	}
 346:	fb cf       	rjmp	.-10     	; 0x33e <main+0xc>

00000348 <_exit>:
 348:	f8 94       	cli

0000034a <__stop_program>:
 34a:	ff cf       	rjmp	.-2      	; 0x34a <__stop_program>
