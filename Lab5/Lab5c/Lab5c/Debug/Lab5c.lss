
Lab5c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000093e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000970  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004859  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003cf6  00000000  00000000  00005269  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006f0  00000000  00000000  00008f5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  00009650  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002e35  00000000  00000000  00009728  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c3  00000000  00000000  0000c55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000c620  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 56 02 	call	0x4ac	; 0x4ac <main>
 218:	0c 94 73 04 	jmp	0x8e6	; 0x8e6 <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <CLK_init>:
#define BScale  -1


void CLK_init(void) {
	
	OSC.CTRL = 0x02;					//32 Mhz internal oscillator enable
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32 MHz oscillator ready flag
 226:	e0 e5       	ldi	r30, 0x50	; 80
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	81 81       	ldd	r24, Z+1	; 0x01
 22c:	81 ff       	sbrs	r24, 1
 22e:	fd cf       	rjmp	.-6      	; 0x22a <CLK_init+0xa>
	CPU_CCP = 0xD8; 					//IOREG
 230:	88 ed       	ldi	r24, 0xD8	; 216
 232:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01; 					//bit 0 is 32 MHz internal oscillator
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 23a:	08 95       	ret

0000023c <USART_init>:
	
}

void USART_init(void) {
	
	USARTD0.BAUDCTRLA = (BSel & 0xFF);			//sets BAUDCTRLA to lower 8 bits of BSel
 23c:	e0 ea       	ldi	r30, 0xA0	; 160
 23e:	f9 e0       	ldi	r31, 0x09	; 9
 240:	89 e8       	ldi	r24, 0x89	; 137
 242:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = ((BScale << 4) & 0xF0) | ((BSel >> 8) & 0x0F);
 244:	80 ef       	ldi	r24, 0xF0	; 240
 246:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLB = 0x18;						//RXEN/TEXEN
 248:	88 e1       	ldi	r24, 0x18	; 24
 24a:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0x0B;						//asynchronous/no parity/1 stop bit/8 data
 24c:	8b e0       	ldi	r24, 0x0B	; 11
 24e:	85 83       	std	Z+5, r24	; 0x05
 250:	08 95       	ret

00000252 <IO_init>:



void IO_init(void) {
	
	PORTD.DIRSET = 0xF8;	//set TxD and RBG LED as output
 252:	e0 e6       	ldi	r30, 0x60	; 96
 254:	f6 e0       	ldi	r31, 0x06	; 6
 256:	88 ef       	ldi	r24, 0xF8	; 248
 258:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0xF8;	//set TxD to high, LED to off
 25a:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRCLR = 0x04;	//set RxD pin as input
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	82 83       	std	Z+2, r24	; 0x02
	
	//PortQ bits 1 and 3 enable and select
	PORTQ.DIRSET = 0x0A;	//PortD bits 2 and 3 serial pins
 260:	e0 ec       	ldi	r30, 0xC0	; 192
 262:	f7 e0       	ldi	r31, 0x07	; 7
 264:	8a e0       	ldi	r24, 0x0A	; 10
 266:	81 83       	std	Z+1, r24	; 0x01
	PORTQ.OUTCLR = 0x0A;	//connected to the USB lines
 268:	86 83       	std	Z+6, r24	; 0x06
 26a:	08 95       	ret

0000026c <ADC_init>:


void ADC_init(void)
{
	
	PORTA.DIR = 0x00;			//Port A as input
 26c:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	ADCA.CTRLA = 0x01;			//channel 0 enabled
 270:	e0 e0       	ldi	r30, 0x00	; 0
 272:	f2 e0       	ldi	r31, 0x02	; 2
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 83       	st	Z, r24
	ADCA.CTRLB = 0x0C;			// 8 bit right adjusted, conversion mode
 278:	9c e0       	ldi	r25, 0x0C	; 12
 27a:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = 0x30;		//AREFB
 27c:	90 e3       	ldi	r25, 0x30	; 48
 27e:	92 83       	std	Z+2, r25	; 0x02
	ADCA.CH0.CTRL = 0x83;		//Dif with gain of 1  00011
 280:	93 e8       	ldi	r25, 0x83	; 131
 282:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.CH0.MUXCTRL = 0x0A;	//Pin 1 and 6  0001010
 284:	9a e0       	ldi	r25, 0x0A	; 10
 286:	91 a3       	std	Z+33, r25	; 0x21

	
	ADCA.INTFLAGS = 0x01;		// clearing flag
 288:	86 83       	std	Z+6, r24	; 0x06
 28a:	08 95       	ret

0000028c <ADC_read>:
}


int16_t ADC_read(void) {
	
	ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);			//start conversion
 28c:	e0 e0       	ldi	r30, 0x00	; 0
 28e:	f2 e0       	ldi	r31, 0x02	; 2
 290:	80 a1       	ldd	r24, Z+32	; 0x20
 292:	80 68       	ori	r24, 0x80	; 128
 294:	80 a3       	std	Z+32, r24	; 0x20
	while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));		//wait until conversion is complete
 296:	83 a1       	ldd	r24, Z+35	; 0x23
 298:	80 ff       	sbrs	r24, 0
 29a:	fd cf       	rjmp	.-6      	; 0x296 <ADC_read+0xa>
	ADCA.INTFLAGS = 0x01;								//clear flag
 29c:	e0 e0       	ldi	r30, 0x00	; 0
 29e:	f2 e0       	ldi	r31, 0x02	; 2
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	86 83       	std	Z+6, r24	; 0x06
	
	
	return ADCA.CH0.RES;
 2a4:	84 a1       	ldd	r24, Z+36	; 0x24
 2a6:	95 a1       	ldd	r25, Z+37	; 0x25
}
 2a8:	08 95       	ret

000002aa <send_char>:

void send_char(char c)
{
	
	while( !(USARTD0.STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
 2aa:	e0 ea       	ldi	r30, 0xA0	; 160
 2ac:	f9 e0       	ldi	r31, 0x09	; 9
 2ae:	91 81       	ldd	r25, Z+1	; 0x01
 2b0:	95 ff       	sbrs	r25, 5
 2b2:	fd cf       	rjmp	.-6      	; 0x2ae <send_char+0x4>
	
	USARTD0.DATA = c;
 2b4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 2b8:	08 95       	ret

000002ba <delay_3s>:
	
}


void delay_3s(void)
{
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	00 d0       	rcall	.+0      	; 0x2c0 <delay_3s+0x6>
 2c0:	1f 92       	push	r1
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;				//Volatile prevents compiler optimization
	for(ticks = 0; ticks <= 2000000; ticks++);	//increment 2e6 times -> ~ 1 sec
 2c6:	19 82       	std	Y+1, r1	; 0x01
 2c8:	1a 82       	std	Y+2, r1	; 0x02
 2ca:	1b 82       	std	Y+3, r1	; 0x03
 2cc:	1c 82       	std	Y+4, r1	; 0x04
 2ce:	89 81       	ldd	r24, Y+1	; 0x01
 2d0:	9a 81       	ldd	r25, Y+2	; 0x02
 2d2:	ab 81       	ldd	r26, Y+3	; 0x03
 2d4:	bc 81       	ldd	r27, Y+4	; 0x04
 2d6:	81 38       	cpi	r24, 0x81	; 129
 2d8:	94 48       	sbci	r25, 0x84	; 132
 2da:	ae 41       	sbci	r26, 0x1E	; 30
 2dc:	b1 05       	cpc	r27, r1
 2de:	a0 f4       	brcc	.+40     	; 0x308 <delay_3s+0x4e>
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	ab 81       	ldd	r26, Y+3	; 0x03
 2e6:	bc 81       	ldd	r27, Y+4	; 0x04
 2e8:	01 96       	adiw	r24, 0x01	; 1
 2ea:	a1 1d       	adc	r26, r1
 2ec:	b1 1d       	adc	r27, r1
 2ee:	89 83       	std	Y+1, r24	; 0x01
 2f0:	9a 83       	std	Y+2, r25	; 0x02
 2f2:	ab 83       	std	Y+3, r26	; 0x03
 2f4:	bc 83       	std	Y+4, r27	; 0x04
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	ab 81       	ldd	r26, Y+3	; 0x03
 2fc:	bc 81       	ldd	r27, Y+4	; 0x04
 2fe:	81 38       	cpi	r24, 0x81	; 129
 300:	94 48       	sbci	r25, 0x84	; 132
 302:	ae 41       	sbci	r26, 0x1E	; 30
 304:	b1 05       	cpc	r27, r1
 306:	60 f3       	brcs	.-40     	; 0x2e0 <delay_3s+0x26>
}
 308:	24 96       	adiw	r28, 0x04	; 4
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <send_Values>:



void send_Values() {
 314:	cf 92       	push	r12
 316:	df 92       	push	r13
 318:	ef 92       	push	r14
 31a:	ff 92       	push	r15
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	28 97       	sbiw	r28, 0x08	; 8
 326:	cd bf       	out	0x3d, r28	; 61
 328:	de bf       	out	0x3e, r29	; 62
	
	volatile int8_t adcVal = 0;
 32a:	19 82       	std	Y+1, r1	; 0x01
	volatile int intVal = 0;
 32c:	1a 82       	std	Y+2, r1	; 0x02
 32e:	1b 82       	std	Y+3, r1	; 0x03
	volatile float voltVal = 0;
 330:	1c 82       	std	Y+4, r1	; 0x04
 332:	1d 82       	std	Y+5, r1	; 0x05
 334:	1e 82       	std	Y+6, r1	; 0x06
 336:	1f 82       	std	Y+7, r1	; 0x07
	
	adcVal = ADC_read();
 338:	0e 94 46 01 	call	0x28c	; 0x28c <ADC_read>
 33c:	89 83       	std	Y+1, r24	; 0x01
	
	if (adcVal >= 0x80) {
 33e:	89 81       	ldd	r24, Y+1	; 0x01
		send_char((char)0x2D);
		adcVal *= -1;
	}
	
	else  {
		send_char((char)0x2B);
 340:	8b e2       	ldi	r24, 0x2B	; 43
 342:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	}

	//voltVal = (1/50)*adcVal + .0098
	voltVal = adcVal;
 346:	69 81       	ldd	r22, Y+1	; 0x01
 348:	06 2e       	mov	r0, r22
 34a:	00 0c       	add	r0, r0
 34c:	77 0b       	sbc	r23, r23
 34e:	88 0b       	sbc	r24, r24
 350:	99 0b       	sbc	r25, r25
 352:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__floatsisf>
 356:	6c 83       	std	Y+4, r22	; 0x04
 358:	7d 83       	std	Y+5, r23	; 0x05
 35a:	8e 83       	std	Y+6, r24	; 0x06
 35c:	9f 83       	std	Y+7, r25	; 0x07
	voltVal /= 50;
 35e:	6c 81       	ldd	r22, Y+4	; 0x04
 360:	7d 81       	ldd	r23, Y+5	; 0x05
 362:	8e 81       	ldd	r24, Y+6	; 0x06
 364:	9f 81       	ldd	r25, Y+7	; 0x07
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	48 e4       	ldi	r20, 0x48	; 72
 36c:	52 e4       	ldi	r21, 0x42	; 66
 36e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__divsf3>
 372:	6c 83       	std	Y+4, r22	; 0x04
 374:	7d 83       	std	Y+5, r23	; 0x05
 376:	8e 83       	std	Y+6, r24	; 0x06
 378:	9f 83       	std	Y+7, r25	; 0x07
	voltVal += .0098;
 37a:	6c 81       	ldd	r22, Y+4	; 0x04
 37c:	7d 81       	ldd	r23, Y+5	; 0x05
 37e:	8e 81       	ldd	r24, Y+6	; 0x06
 380:	9f 81       	ldd	r25, Y+7	; 0x07
 382:	2e e2       	ldi	r18, 0x2E	; 46
 384:	30 e9       	ldi	r19, 0x90	; 144
 386:	40 e2       	ldi	r20, 0x20	; 32
 388:	5c e3       	ldi	r21, 0x3C	; 60
 38a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__addsf3>
 38e:	6c 83       	std	Y+4, r22	; 0x04
 390:	7d 83       	std	Y+5, r23	; 0x05
 392:	8e 83       	std	Y+6, r24	; 0x06
 394:	9f 83       	std	Y+7, r25	; 0x07

	
	intVal = (int)voltVal;					//1st iteration
 396:	6c 81       	ldd	r22, Y+4	; 0x04
 398:	7d 81       	ldd	r23, Y+5	; 0x05
 39a:	8e 81       	ldd	r24, Y+6	; 0x06
 39c:	9f 81       	ldd	r25, Y+7	; 0x07
 39e:	0e 94 42 03 	call	0x684	; 0x684 <__fixsfsi>
 3a2:	6a 83       	std	Y+2, r22	; 0x02
 3a4:	7b 83       	std	Y+3, r23	; 0x03
	send_char((char)(intVal + '0'));
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	9b 81       	ldd	r25, Y+3	; 0x03
 3aa:	80 5d       	subi	r24, 0xD0	; 208
 3ac:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	send_char((char)0x2E);					//.
 3b0:	8e e2       	ldi	r24, 0x2E	; 46
 3b2:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	
	voltVal = 10*(voltVal - intVal);		//2nd iteration
 3b6:	cc 80       	ldd	r12, Y+4	; 0x04
 3b8:	dd 80       	ldd	r13, Y+5	; 0x05
 3ba:	ee 80       	ldd	r14, Y+6	; 0x06
 3bc:	ff 80       	ldd	r15, Y+7	; 0x07
 3be:	8a 81       	ldd	r24, Y+2	; 0x02
 3c0:	9b 81       	ldd	r25, Y+3	; 0x03
 3c2:	bc 01       	movw	r22, r24
 3c4:	99 0f       	add	r25, r25
 3c6:	88 0b       	sbc	r24, r24
 3c8:	99 0b       	sbc	r25, r25
 3ca:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__floatsisf>
 3ce:	9b 01       	movw	r18, r22
 3d0:	ac 01       	movw	r20, r24
 3d2:	c7 01       	movw	r24, r14
 3d4:	b6 01       	movw	r22, r12
 3d6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__subsf3>
 3da:	20 e0       	ldi	r18, 0x00	; 0
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	40 e2       	ldi	r20, 0x20	; 32
 3e0:	51 e4       	ldi	r21, 0x41	; 65
 3e2:	0e 94 06 04 	call	0x80c	; 0x80c <__mulsf3>
 3e6:	6c 83       	std	Y+4, r22	; 0x04
 3e8:	7d 83       	std	Y+5, r23	; 0x05
 3ea:	8e 83       	std	Y+6, r24	; 0x06
 3ec:	9f 83       	std	Y+7, r25	; 0x07
	intVal = (int)voltVal;
 3ee:	6c 81       	ldd	r22, Y+4	; 0x04
 3f0:	7d 81       	ldd	r23, Y+5	; 0x05
 3f2:	8e 81       	ldd	r24, Y+6	; 0x06
 3f4:	9f 81       	ldd	r25, Y+7	; 0x07
 3f6:	0e 94 42 03 	call	0x684	; 0x684 <__fixsfsi>
 3fa:	6a 83       	std	Y+2, r22	; 0x02
 3fc:	7b 83       	std	Y+3, r23	; 0x03
	send_char((char)(intVal + '0'));				
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	9b 81       	ldd	r25, Y+3	; 0x03
 402:	80 5d       	subi	r24, 0xD0	; 208
 404:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	
	voltVal = 10*(voltVal - intVal);		//3rd iteration
 408:	cc 80       	ldd	r12, Y+4	; 0x04
 40a:	dd 80       	ldd	r13, Y+5	; 0x05
 40c:	ee 80       	ldd	r14, Y+6	; 0x06
 40e:	ff 80       	ldd	r15, Y+7	; 0x07
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	9b 81       	ldd	r25, Y+3	; 0x03
 414:	bc 01       	movw	r22, r24
 416:	99 0f       	add	r25, r25
 418:	88 0b       	sbc	r24, r24
 41a:	99 0b       	sbc	r25, r25
 41c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__floatsisf>
 420:	9b 01       	movw	r18, r22
 422:	ac 01       	movw	r20, r24
 424:	c7 01       	movw	r24, r14
 426:	b6 01       	movw	r22, r12
 428:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__subsf3>
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	40 e2       	ldi	r20, 0x20	; 32
 432:	51 e4       	ldi	r21, 0x41	; 65
 434:	0e 94 06 04 	call	0x80c	; 0x80c <__mulsf3>
 438:	6c 83       	std	Y+4, r22	; 0x04
 43a:	7d 83       	std	Y+5, r23	; 0x05
 43c:	8e 83       	std	Y+6, r24	; 0x06
 43e:	9f 83       	std	Y+7, r25	; 0x07
	intVal = (int)voltVal;
 440:	6c 81       	ldd	r22, Y+4	; 0x04
 442:	7d 81       	ldd	r23, Y+5	; 0x05
 444:	8e 81       	ldd	r24, Y+6	; 0x06
 446:	9f 81       	ldd	r25, Y+7	; 0x07
 448:	0e 94 42 03 	call	0x684	; 0x684 <__fixsfsi>
 44c:	6a 83       	std	Y+2, r22	; 0x02
 44e:	7b 83       	std	Y+3, r23	; 0x03
	send_char((char)(intVal + '0'));
 450:	8a 81       	ldd	r24, Y+2	; 0x02
 452:	9b 81       	ldd	r25, Y+3	; 0x03
 454:	80 5d       	subi	r24, 0xD0	; 208
 456:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	send_char((char)0x20);					//space
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	
	//hex Values
	volatile int8_t hexVal = 0; 
 460:	18 86       	std	Y+8, r1	; 0x08
	hexVal = (adcVal >> 1);
 462:	89 81       	ldd	r24, Y+1	; 0x01
 464:	85 95       	asr	r24
 466:	88 87       	std	Y+8, r24	; 0x08
	
	send_char((char)0x28);							//(
 468:	88 e2       	ldi	r24, 0x28	; 40
 46a:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	send_char((char)0x30);							//0
 46e:	80 e3       	ldi	r24, 0x30	; 48
 470:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	send_char((char)0x78);							//x;
 474:	88 e7       	ldi	r24, 0x78	; 120
 476:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	send_char((char)(hexVal + '0'));				//firs byte
 47a:	88 85       	ldd	r24, Y+8	; 0x08
 47c:	80 5d       	subi	r24, 0xD0	; 208
 47e:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	send_char((char)((adcVal & 0x0F) + '0'));		//second byte
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	8f 70       	andi	r24, 0x0F	; 15
 486:	80 5d       	subi	r24, 0xD0	; 208
 488:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	send_char((char)0x29);							//)
 48c:	89 e2       	ldi	r24, 0x29	; 41
 48e:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	send_char((char)0x20);							//space
 492:	80 e2       	ldi	r24, 0x20	; 32
 494:	0e 94 55 01 	call	0x2aa	; 0x2aa <send_char>
	
	
}
 498:	28 96       	adiw	r28, 0x08	; 8
 49a:	cd bf       	out	0x3d, r28	; 61
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	ff 90       	pop	r15
 4a4:	ef 90       	pop	r14
 4a6:	df 90       	pop	r13
 4a8:	cf 90       	pop	r12
 4aa:	08 95       	ret

000004ac <main>:


int main(void)
{
   
	CLK_init();
 4ac:	0e 94 10 01 	call	0x220	; 0x220 <CLK_init>
    ADC_init();	
 4b0:	0e 94 36 01 	call	0x26c	; 0x26c <ADC_init>
	USART_init();
 4b4:	0e 94 1e 01 	call	0x23c	; 0x23c <USART_init>
	IO_init();     
 4b8:	0e 94 29 01 	call	0x252	; 0x252 <IO_init>

	
    while(1){
		
		send_Values();
 4bc:	0e 94 8a 01 	call	0x314	; 0x314 <send_Values>
		delay_3s();
 4c0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <delay_3s>

	}
 4c4:	fb cf       	rjmp	.-10     	; 0x4bc <main+0x10>

000004c6 <__subsf3>:
 4c6:	50 58       	subi	r21, 0x80	; 128

000004c8 <__addsf3>:
 4c8:	bb 27       	eor	r27, r27
 4ca:	aa 27       	eor	r26, r26
 4cc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__addsf3x>
 4d0:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_round>
 4d4:	0e 94 be 03 	call	0x77c	; 0x77c <__fp_pscA>
 4d8:	38 f0       	brcs	.+14     	; 0x4e8 <__addsf3+0x20>
 4da:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_pscB>
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <__addsf3+0x20>
 4e0:	39 f4       	brne	.+14     	; 0x4f0 <__addsf3+0x28>
 4e2:	9f 3f       	cpi	r25, 0xFF	; 255
 4e4:	19 f4       	brne	.+6      	; 0x4ec <__addsf3+0x24>
 4e6:	26 f4       	brtc	.+8      	; 0x4f0 <__addsf3+0x28>
 4e8:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_nan>
 4ec:	0e f4       	brtc	.+2      	; 0x4f0 <__addsf3+0x28>
 4ee:	e0 95       	com	r30
 4f0:	e7 fb       	bst	r30, 7
 4f2:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_inf>

000004f6 <__addsf3x>:
 4f6:	e9 2f       	mov	r30, r25
 4f8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_split3>
 4fc:	58 f3       	brcs	.-42     	; 0x4d4 <__addsf3+0xc>
 4fe:	ba 17       	cp	r27, r26
 500:	62 07       	cpc	r22, r18
 502:	73 07       	cpc	r23, r19
 504:	84 07       	cpc	r24, r20
 506:	95 07       	cpc	r25, r21
 508:	20 f0       	brcs	.+8      	; 0x512 <__addsf3x+0x1c>
 50a:	79 f4       	brne	.+30     	; 0x52a <__addsf3x+0x34>
 50c:	a6 f5       	brtc	.+104    	; 0x576 <__addsf3x+0x80>
 50e:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__fp_zero>
 512:	0e f4       	brtc	.+2      	; 0x516 <__addsf3x+0x20>
 514:	e0 95       	com	r30
 516:	0b 2e       	mov	r0, r27
 518:	ba 2f       	mov	r27, r26
 51a:	a0 2d       	mov	r26, r0
 51c:	0b 01       	movw	r0, r22
 51e:	b9 01       	movw	r22, r18
 520:	90 01       	movw	r18, r0
 522:	0c 01       	movw	r0, r24
 524:	ca 01       	movw	r24, r20
 526:	a0 01       	movw	r20, r0
 528:	11 24       	eor	r1, r1
 52a:	ff 27       	eor	r31, r31
 52c:	59 1b       	sub	r21, r25
 52e:	99 f0       	breq	.+38     	; 0x556 <__addsf3x+0x60>
 530:	59 3f       	cpi	r21, 0xF9	; 249
 532:	50 f4       	brcc	.+20     	; 0x548 <__addsf3x+0x52>
 534:	50 3e       	cpi	r21, 0xE0	; 224
 536:	68 f1       	brcs	.+90     	; 0x592 <__addsf3x+0x9c>
 538:	1a 16       	cp	r1, r26
 53a:	f0 40       	sbci	r31, 0x00	; 0
 53c:	a2 2f       	mov	r26, r18
 53e:	23 2f       	mov	r18, r19
 540:	34 2f       	mov	r19, r20
 542:	44 27       	eor	r20, r20
 544:	58 5f       	subi	r21, 0xF8	; 248
 546:	f3 cf       	rjmp	.-26     	; 0x52e <__addsf3x+0x38>
 548:	46 95       	lsr	r20
 54a:	37 95       	ror	r19
 54c:	27 95       	ror	r18
 54e:	a7 95       	ror	r26
 550:	f0 40       	sbci	r31, 0x00	; 0
 552:	53 95       	inc	r21
 554:	c9 f7       	brne	.-14     	; 0x548 <__addsf3x+0x52>
 556:	7e f4       	brtc	.+30     	; 0x576 <__addsf3x+0x80>
 558:	1f 16       	cp	r1, r31
 55a:	ba 0b       	sbc	r27, r26
 55c:	62 0b       	sbc	r22, r18
 55e:	73 0b       	sbc	r23, r19
 560:	84 0b       	sbc	r24, r20
 562:	ba f0       	brmi	.+46     	; 0x592 <__addsf3x+0x9c>
 564:	91 50       	subi	r25, 0x01	; 1
 566:	a1 f0       	breq	.+40     	; 0x590 <__addsf3x+0x9a>
 568:	ff 0f       	add	r31, r31
 56a:	bb 1f       	adc	r27, r27
 56c:	66 1f       	adc	r22, r22
 56e:	77 1f       	adc	r23, r23
 570:	88 1f       	adc	r24, r24
 572:	c2 f7       	brpl	.-16     	; 0x564 <__addsf3x+0x6e>
 574:	0e c0       	rjmp	.+28     	; 0x592 <__addsf3x+0x9c>
 576:	ba 0f       	add	r27, r26
 578:	62 1f       	adc	r22, r18
 57a:	73 1f       	adc	r23, r19
 57c:	84 1f       	adc	r24, r20
 57e:	48 f4       	brcc	.+18     	; 0x592 <__addsf3x+0x9c>
 580:	87 95       	ror	r24
 582:	77 95       	ror	r23
 584:	67 95       	ror	r22
 586:	b7 95       	ror	r27
 588:	f7 95       	ror	r31
 58a:	9e 3f       	cpi	r25, 0xFE	; 254
 58c:	08 f0       	brcs	.+2      	; 0x590 <__addsf3x+0x9a>
 58e:	b0 cf       	rjmp	.-160    	; 0x4f0 <__addsf3+0x28>
 590:	93 95       	inc	r25
 592:	88 0f       	add	r24, r24
 594:	08 f0       	brcs	.+2      	; 0x598 <__addsf3x+0xa2>
 596:	99 27       	eor	r25, r25
 598:	ee 0f       	add	r30, r30
 59a:	97 95       	ror	r25
 59c:	87 95       	ror	r24
 59e:	08 95       	ret

000005a0 <__divsf3>:
 5a0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__divsf3x>
 5a4:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_round>
 5a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_pscB>
 5ac:	58 f0       	brcs	.+22     	; 0x5c4 <__divsf3+0x24>
 5ae:	0e 94 be 03 	call	0x77c	; 0x77c <__fp_pscA>
 5b2:	40 f0       	brcs	.+16     	; 0x5c4 <__divsf3+0x24>
 5b4:	29 f4       	brne	.+10     	; 0x5c0 <__divsf3+0x20>
 5b6:	5f 3f       	cpi	r21, 0xFF	; 255
 5b8:	29 f0       	breq	.+10     	; 0x5c4 <__divsf3+0x24>
 5ba:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_inf>
 5be:	51 11       	cpse	r21, r1
 5c0:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_szero>
 5c4:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_nan>

000005c8 <__divsf3x>:
 5c8:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_split3>
 5cc:	68 f3       	brcs	.-38     	; 0x5a8 <__divsf3+0x8>

000005ce <__divsf3_pse>:
 5ce:	99 23       	and	r25, r25
 5d0:	b1 f3       	breq	.-20     	; 0x5be <__divsf3+0x1e>
 5d2:	55 23       	and	r21, r21
 5d4:	91 f3       	breq	.-28     	; 0x5ba <__divsf3+0x1a>
 5d6:	95 1b       	sub	r25, r21
 5d8:	55 0b       	sbc	r21, r21
 5da:	bb 27       	eor	r27, r27
 5dc:	aa 27       	eor	r26, r26
 5de:	62 17       	cp	r22, r18
 5e0:	73 07       	cpc	r23, r19
 5e2:	84 07       	cpc	r24, r20
 5e4:	38 f0       	brcs	.+14     	; 0x5f4 <__divsf3_pse+0x26>
 5e6:	9f 5f       	subi	r25, 0xFF	; 255
 5e8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ea:	22 0f       	add	r18, r18
 5ec:	33 1f       	adc	r19, r19
 5ee:	44 1f       	adc	r20, r20
 5f0:	aa 1f       	adc	r26, r26
 5f2:	a9 f3       	breq	.-22     	; 0x5de <__divsf3_pse+0x10>
 5f4:	35 d0       	rcall	.+106    	; 0x660 <__divsf3_pse+0x92>
 5f6:	0e 2e       	mov	r0, r30
 5f8:	3a f0       	brmi	.+14     	; 0x608 <__divsf3_pse+0x3a>
 5fa:	e0 e8       	ldi	r30, 0x80	; 128
 5fc:	32 d0       	rcall	.+100    	; 0x662 <__divsf3_pse+0x94>
 5fe:	91 50       	subi	r25, 0x01	; 1
 600:	50 40       	sbci	r21, 0x00	; 0
 602:	e6 95       	lsr	r30
 604:	00 1c       	adc	r0, r0
 606:	ca f7       	brpl	.-14     	; 0x5fa <__divsf3_pse+0x2c>
 608:	2b d0       	rcall	.+86     	; 0x660 <__divsf3_pse+0x92>
 60a:	fe 2f       	mov	r31, r30
 60c:	29 d0       	rcall	.+82     	; 0x660 <__divsf3_pse+0x92>
 60e:	66 0f       	add	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	bb 1f       	adc	r27, r27
 616:	26 17       	cp	r18, r22
 618:	37 07       	cpc	r19, r23
 61a:	48 07       	cpc	r20, r24
 61c:	ab 07       	cpc	r26, r27
 61e:	b0 e8       	ldi	r27, 0x80	; 128
 620:	09 f0       	breq	.+2      	; 0x624 <__divsf3_pse+0x56>
 622:	bb 0b       	sbc	r27, r27
 624:	80 2d       	mov	r24, r0
 626:	bf 01       	movw	r22, r30
 628:	ff 27       	eor	r31, r31
 62a:	93 58       	subi	r25, 0x83	; 131
 62c:	5f 4f       	sbci	r21, 0xFF	; 255
 62e:	3a f0       	brmi	.+14     	; 0x63e <__divsf3_pse+0x70>
 630:	9e 3f       	cpi	r25, 0xFE	; 254
 632:	51 05       	cpc	r21, r1
 634:	78 f0       	brcs	.+30     	; 0x654 <__divsf3_pse+0x86>
 636:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_inf>
 63a:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_szero>
 63e:	5f 3f       	cpi	r21, 0xFF	; 255
 640:	e4 f3       	brlt	.-8      	; 0x63a <__divsf3_pse+0x6c>
 642:	98 3e       	cpi	r25, 0xE8	; 232
 644:	d4 f3       	brlt	.-12     	; 0x63a <__divsf3_pse+0x6c>
 646:	86 95       	lsr	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b7 95       	ror	r27
 64e:	f7 95       	ror	r31
 650:	9f 5f       	subi	r25, 0xFF	; 255
 652:	c9 f7       	brne	.-14     	; 0x646 <__divsf3_pse+0x78>
 654:	88 0f       	add	r24, r24
 656:	91 1d       	adc	r25, r1
 658:	96 95       	lsr	r25
 65a:	87 95       	ror	r24
 65c:	97 f9       	bld	r25, 7
 65e:	08 95       	ret
 660:	e1 e0       	ldi	r30, 0x01	; 1
 662:	66 0f       	add	r22, r22
 664:	77 1f       	adc	r23, r23
 666:	88 1f       	adc	r24, r24
 668:	bb 1f       	adc	r27, r27
 66a:	62 17       	cp	r22, r18
 66c:	73 07       	cpc	r23, r19
 66e:	84 07       	cpc	r24, r20
 670:	ba 07       	cpc	r27, r26
 672:	20 f0       	brcs	.+8      	; 0x67c <__divsf3_pse+0xae>
 674:	62 1b       	sub	r22, r18
 676:	73 0b       	sbc	r23, r19
 678:	84 0b       	sbc	r24, r20
 67a:	ba 0b       	sbc	r27, r26
 67c:	ee 1f       	adc	r30, r30
 67e:	88 f7       	brcc	.-30     	; 0x662 <__divsf3_pse+0x94>
 680:	e0 95       	com	r30
 682:	08 95       	ret

00000684 <__fixsfsi>:
 684:	0e 94 49 03 	call	0x692	; 0x692 <__fixunssfsi>
 688:	68 94       	set
 68a:	b1 11       	cpse	r27, r1
 68c:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_szero>
 690:	08 95       	ret

00000692 <__fixunssfsi>:
 692:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_splitA>
 696:	88 f0       	brcs	.+34     	; 0x6ba <__fixunssfsi+0x28>
 698:	9f 57       	subi	r25, 0x7F	; 127
 69a:	98 f0       	brcs	.+38     	; 0x6c2 <__fixunssfsi+0x30>
 69c:	b9 2f       	mov	r27, r25
 69e:	99 27       	eor	r25, r25
 6a0:	b7 51       	subi	r27, 0x17	; 23
 6a2:	b0 f0       	brcs	.+44     	; 0x6d0 <__fixunssfsi+0x3e>
 6a4:	e1 f0       	breq	.+56     	; 0x6de <__fixunssfsi+0x4c>
 6a6:	66 0f       	add	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	1a f0       	brmi	.+6      	; 0x6b6 <__fixunssfsi+0x24>
 6b0:	ba 95       	dec	r27
 6b2:	c9 f7       	brne	.-14     	; 0x6a6 <__fixunssfsi+0x14>
 6b4:	14 c0       	rjmp	.+40     	; 0x6de <__fixunssfsi+0x4c>
 6b6:	b1 30       	cpi	r27, 0x01	; 1
 6b8:	91 f0       	breq	.+36     	; 0x6de <__fixunssfsi+0x4c>
 6ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fp_zero>
 6be:	b1 e0       	ldi	r27, 0x01	; 1
 6c0:	08 95       	ret
 6c2:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__fp_zero>
 6c6:	67 2f       	mov	r22, r23
 6c8:	78 2f       	mov	r23, r24
 6ca:	88 27       	eor	r24, r24
 6cc:	b8 5f       	subi	r27, 0xF8	; 248
 6ce:	39 f0       	breq	.+14     	; 0x6de <__fixunssfsi+0x4c>
 6d0:	b9 3f       	cpi	r27, 0xF9	; 249
 6d2:	cc f3       	brlt	.-14     	; 0x6c6 <__fixunssfsi+0x34>
 6d4:	86 95       	lsr	r24
 6d6:	77 95       	ror	r23
 6d8:	67 95       	ror	r22
 6da:	b3 95       	inc	r27
 6dc:	d9 f7       	brne	.-10     	; 0x6d4 <__fixunssfsi+0x42>
 6de:	3e f4       	brtc	.+14     	; 0x6ee <__fixunssfsi+0x5c>
 6e0:	90 95       	com	r25
 6e2:	80 95       	com	r24
 6e4:	70 95       	com	r23
 6e6:	61 95       	neg	r22
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	8f 4f       	sbci	r24, 0xFF	; 255
 6ec:	9f 4f       	sbci	r25, 0xFF	; 255
 6ee:	08 95       	ret

000006f0 <__floatunsisf>:
 6f0:	e8 94       	clt
 6f2:	09 c0       	rjmp	.+18     	; 0x706 <__floatsisf+0x12>

000006f4 <__floatsisf>:
 6f4:	97 fb       	bst	r25, 7
 6f6:	3e f4       	brtc	.+14     	; 0x706 <__floatsisf+0x12>
 6f8:	90 95       	com	r25
 6fa:	80 95       	com	r24
 6fc:	70 95       	com	r23
 6fe:	61 95       	neg	r22
 700:	7f 4f       	sbci	r23, 0xFF	; 255
 702:	8f 4f       	sbci	r24, 0xFF	; 255
 704:	9f 4f       	sbci	r25, 0xFF	; 255
 706:	99 23       	and	r25, r25
 708:	a9 f0       	breq	.+42     	; 0x734 <__floatsisf+0x40>
 70a:	f9 2f       	mov	r31, r25
 70c:	96 e9       	ldi	r25, 0x96	; 150
 70e:	bb 27       	eor	r27, r27
 710:	93 95       	inc	r25
 712:	f6 95       	lsr	r31
 714:	87 95       	ror	r24
 716:	77 95       	ror	r23
 718:	67 95       	ror	r22
 71a:	b7 95       	ror	r27
 71c:	f1 11       	cpse	r31, r1
 71e:	f8 cf       	rjmp	.-16     	; 0x710 <__floatsisf+0x1c>
 720:	fa f4       	brpl	.+62     	; 0x760 <__floatsisf+0x6c>
 722:	bb 0f       	add	r27, r27
 724:	11 f4       	brne	.+4      	; 0x72a <__floatsisf+0x36>
 726:	60 ff       	sbrs	r22, 0
 728:	1b c0       	rjmp	.+54     	; 0x760 <__floatsisf+0x6c>
 72a:	6f 5f       	subi	r22, 0xFF	; 255
 72c:	7f 4f       	sbci	r23, 0xFF	; 255
 72e:	8f 4f       	sbci	r24, 0xFF	; 255
 730:	9f 4f       	sbci	r25, 0xFF	; 255
 732:	16 c0       	rjmp	.+44     	; 0x760 <__floatsisf+0x6c>
 734:	88 23       	and	r24, r24
 736:	11 f0       	breq	.+4      	; 0x73c <__floatsisf+0x48>
 738:	96 e9       	ldi	r25, 0x96	; 150
 73a:	11 c0       	rjmp	.+34     	; 0x75e <__floatsisf+0x6a>
 73c:	77 23       	and	r23, r23
 73e:	21 f0       	breq	.+8      	; 0x748 <__floatsisf+0x54>
 740:	9e e8       	ldi	r25, 0x8E	; 142
 742:	87 2f       	mov	r24, r23
 744:	76 2f       	mov	r23, r22
 746:	05 c0       	rjmp	.+10     	; 0x752 <__floatsisf+0x5e>
 748:	66 23       	and	r22, r22
 74a:	71 f0       	breq	.+28     	; 0x768 <__floatsisf+0x74>
 74c:	96 e8       	ldi	r25, 0x86	; 134
 74e:	86 2f       	mov	r24, r22
 750:	70 e0       	ldi	r23, 0x00	; 0
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	2a f0       	brmi	.+10     	; 0x760 <__floatsisf+0x6c>
 756:	9a 95       	dec	r25
 758:	66 0f       	add	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	da f7       	brpl	.-10     	; 0x756 <__floatsisf+0x62>
 760:	88 0f       	add	r24, r24
 762:	96 95       	lsr	r25
 764:	87 95       	ror	r24
 766:	97 f9       	bld	r25, 7
 768:	08 95       	ret

0000076a <__fp_inf>:
 76a:	97 f9       	bld	r25, 7
 76c:	9f 67       	ori	r25, 0x7F	; 127
 76e:	80 e8       	ldi	r24, 0x80	; 128
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	08 95       	ret

00000776 <__fp_nan>:
 776:	9f ef       	ldi	r25, 0xFF	; 255
 778:	80 ec       	ldi	r24, 0xC0	; 192
 77a:	08 95       	ret

0000077c <__fp_pscA>:
 77c:	00 24       	eor	r0, r0
 77e:	0a 94       	dec	r0
 780:	16 16       	cp	r1, r22
 782:	17 06       	cpc	r1, r23
 784:	18 06       	cpc	r1, r24
 786:	09 06       	cpc	r0, r25
 788:	08 95       	ret

0000078a <__fp_pscB>:
 78a:	00 24       	eor	r0, r0
 78c:	0a 94       	dec	r0
 78e:	12 16       	cp	r1, r18
 790:	13 06       	cpc	r1, r19
 792:	14 06       	cpc	r1, r20
 794:	05 06       	cpc	r0, r21
 796:	08 95       	ret

00000798 <__fp_round>:
 798:	09 2e       	mov	r0, r25
 79a:	03 94       	inc	r0
 79c:	00 0c       	add	r0, r0
 79e:	11 f4       	brne	.+4      	; 0x7a4 <__fp_round+0xc>
 7a0:	88 23       	and	r24, r24
 7a2:	52 f0       	brmi	.+20     	; 0x7b8 <__fp_round+0x20>
 7a4:	bb 0f       	add	r27, r27
 7a6:	40 f4       	brcc	.+16     	; 0x7b8 <__fp_round+0x20>
 7a8:	bf 2b       	or	r27, r31
 7aa:	11 f4       	brne	.+4      	; 0x7b0 <__fp_round+0x18>
 7ac:	60 ff       	sbrs	r22, 0
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <__fp_round+0x20>
 7b0:	6f 5f       	subi	r22, 0xFF	; 255
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	8f 4f       	sbci	r24, 0xFF	; 255
 7b6:	9f 4f       	sbci	r25, 0xFF	; 255
 7b8:	08 95       	ret

000007ba <__fp_split3>:
 7ba:	57 fd       	sbrc	r21, 7
 7bc:	90 58       	subi	r25, 0x80	; 128
 7be:	44 0f       	add	r20, r20
 7c0:	55 1f       	adc	r21, r21
 7c2:	59 f0       	breq	.+22     	; 0x7da <__fp_splitA+0x10>
 7c4:	5f 3f       	cpi	r21, 0xFF	; 255
 7c6:	71 f0       	breq	.+28     	; 0x7e4 <__fp_splitA+0x1a>
 7c8:	47 95       	ror	r20

000007ca <__fp_splitA>:
 7ca:	88 0f       	add	r24, r24
 7cc:	97 fb       	bst	r25, 7
 7ce:	99 1f       	adc	r25, r25
 7d0:	61 f0       	breq	.+24     	; 0x7ea <__fp_splitA+0x20>
 7d2:	9f 3f       	cpi	r25, 0xFF	; 255
 7d4:	79 f0       	breq	.+30     	; 0x7f4 <__fp_splitA+0x2a>
 7d6:	87 95       	ror	r24
 7d8:	08 95       	ret
 7da:	12 16       	cp	r1, r18
 7dc:	13 06       	cpc	r1, r19
 7de:	14 06       	cpc	r1, r20
 7e0:	55 1f       	adc	r21, r21
 7e2:	f2 cf       	rjmp	.-28     	; 0x7c8 <__fp_split3+0xe>
 7e4:	46 95       	lsr	r20
 7e6:	f1 df       	rcall	.-30     	; 0x7ca <__fp_splitA>
 7e8:	08 c0       	rjmp	.+16     	; 0x7fa <__fp_splitA+0x30>
 7ea:	16 16       	cp	r1, r22
 7ec:	17 06       	cpc	r1, r23
 7ee:	18 06       	cpc	r1, r24
 7f0:	99 1f       	adc	r25, r25
 7f2:	f1 cf       	rjmp	.-30     	; 0x7d6 <__fp_splitA+0xc>
 7f4:	86 95       	lsr	r24
 7f6:	71 05       	cpc	r23, r1
 7f8:	61 05       	cpc	r22, r1
 7fa:	08 94       	sec
 7fc:	08 95       	ret

000007fe <__fp_zero>:
 7fe:	e8 94       	clt

00000800 <__fp_szero>:
 800:	bb 27       	eor	r27, r27
 802:	66 27       	eor	r22, r22
 804:	77 27       	eor	r23, r23
 806:	cb 01       	movw	r24, r22
 808:	97 f9       	bld	r25, 7
 80a:	08 95       	ret

0000080c <__mulsf3>:
 80c:	0e 94 19 04 	call	0x832	; 0x832 <__mulsf3x>
 810:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_round>
 814:	0e 94 be 03 	call	0x77c	; 0x77c <__fp_pscA>
 818:	38 f0       	brcs	.+14     	; 0x828 <__mulsf3+0x1c>
 81a:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_pscB>
 81e:	20 f0       	brcs	.+8      	; 0x828 <__mulsf3+0x1c>
 820:	95 23       	and	r25, r21
 822:	11 f0       	breq	.+4      	; 0x828 <__mulsf3+0x1c>
 824:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_inf>
 828:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_nan>
 82c:	11 24       	eor	r1, r1
 82e:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_szero>

00000832 <__mulsf3x>:
 832:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_split3>
 836:	70 f3       	brcs	.-36     	; 0x814 <__mulsf3+0x8>

00000838 <__mulsf3_pse>:
 838:	95 9f       	mul	r25, r21
 83a:	c1 f3       	breq	.-16     	; 0x82c <__mulsf3+0x20>
 83c:	95 0f       	add	r25, r21
 83e:	50 e0       	ldi	r21, 0x00	; 0
 840:	55 1f       	adc	r21, r21
 842:	62 9f       	mul	r22, r18
 844:	f0 01       	movw	r30, r0
 846:	72 9f       	mul	r23, r18
 848:	bb 27       	eor	r27, r27
 84a:	f0 0d       	add	r31, r0
 84c:	b1 1d       	adc	r27, r1
 84e:	63 9f       	mul	r22, r19
 850:	aa 27       	eor	r26, r26
 852:	f0 0d       	add	r31, r0
 854:	b1 1d       	adc	r27, r1
 856:	aa 1f       	adc	r26, r26
 858:	64 9f       	mul	r22, r20
 85a:	66 27       	eor	r22, r22
 85c:	b0 0d       	add	r27, r0
 85e:	a1 1d       	adc	r26, r1
 860:	66 1f       	adc	r22, r22
 862:	82 9f       	mul	r24, r18
 864:	22 27       	eor	r18, r18
 866:	b0 0d       	add	r27, r0
 868:	a1 1d       	adc	r26, r1
 86a:	62 1f       	adc	r22, r18
 86c:	73 9f       	mul	r23, r19
 86e:	b0 0d       	add	r27, r0
 870:	a1 1d       	adc	r26, r1
 872:	62 1f       	adc	r22, r18
 874:	83 9f       	mul	r24, r19
 876:	a0 0d       	add	r26, r0
 878:	61 1d       	adc	r22, r1
 87a:	22 1f       	adc	r18, r18
 87c:	74 9f       	mul	r23, r20
 87e:	33 27       	eor	r19, r19
 880:	a0 0d       	add	r26, r0
 882:	61 1d       	adc	r22, r1
 884:	23 1f       	adc	r18, r19
 886:	84 9f       	mul	r24, r20
 888:	60 0d       	add	r22, r0
 88a:	21 1d       	adc	r18, r1
 88c:	82 2f       	mov	r24, r18
 88e:	76 2f       	mov	r23, r22
 890:	6a 2f       	mov	r22, r26
 892:	11 24       	eor	r1, r1
 894:	9f 57       	subi	r25, 0x7F	; 127
 896:	50 40       	sbci	r21, 0x00	; 0
 898:	9a f0       	brmi	.+38     	; 0x8c0 <__mulsf3_pse+0x88>
 89a:	f1 f0       	breq	.+60     	; 0x8d8 <__mulsf3_pse+0xa0>
 89c:	88 23       	and	r24, r24
 89e:	4a f0       	brmi	.+18     	; 0x8b2 <__mulsf3_pse+0x7a>
 8a0:	ee 0f       	add	r30, r30
 8a2:	ff 1f       	adc	r31, r31
 8a4:	bb 1f       	adc	r27, r27
 8a6:	66 1f       	adc	r22, r22
 8a8:	77 1f       	adc	r23, r23
 8aa:	88 1f       	adc	r24, r24
 8ac:	91 50       	subi	r25, 0x01	; 1
 8ae:	50 40       	sbci	r21, 0x00	; 0
 8b0:	a9 f7       	brne	.-22     	; 0x89c <__mulsf3_pse+0x64>
 8b2:	9e 3f       	cpi	r25, 0xFE	; 254
 8b4:	51 05       	cpc	r21, r1
 8b6:	80 f0       	brcs	.+32     	; 0x8d8 <__mulsf3_pse+0xa0>
 8b8:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_inf>
 8bc:	0c 94 00 04 	jmp	0x800	; 0x800 <__fp_szero>
 8c0:	5f 3f       	cpi	r21, 0xFF	; 255
 8c2:	e4 f3       	brlt	.-8      	; 0x8bc <__mulsf3_pse+0x84>
 8c4:	98 3e       	cpi	r25, 0xE8	; 232
 8c6:	d4 f3       	brlt	.-12     	; 0x8bc <__mulsf3_pse+0x84>
 8c8:	86 95       	lsr	r24
 8ca:	77 95       	ror	r23
 8cc:	67 95       	ror	r22
 8ce:	b7 95       	ror	r27
 8d0:	f7 95       	ror	r31
 8d2:	e7 95       	ror	r30
 8d4:	9f 5f       	subi	r25, 0xFF	; 255
 8d6:	c1 f7       	brne	.-16     	; 0x8c8 <__mulsf3_pse+0x90>
 8d8:	fe 2b       	or	r31, r30
 8da:	88 0f       	add	r24, r24
 8dc:	91 1d       	adc	r25, r1
 8de:	96 95       	lsr	r25
 8e0:	87 95       	ror	r24
 8e2:	97 f9       	bld	r25, 7
 8e4:	08 95       	ret

000008e6 <_exit>:
 8e6:	f8 94       	cli

000008e8 <__stop_program>:
 8e8:	ff cf       	rjmp	.-2      	; 0x8e8 <__stop_program>
