
Lab5e.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000058e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00802000  0000058e  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000746  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005443  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003e7e  00000000  00000000  00005cbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c5  00000000  00000000  00009b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  0000a400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000346c  00000000  00000000  0000a620  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000471  00000000  00000000  0000da8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  0000defd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_14>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_71>
 120:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_72>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	11 e2       	ldi	r17, 0x21	; 33
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e8       	ldi	r30, 0x8E	; 142
 21c:	f5 e0       	ldi	r31, 0x05	; 5
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a4 34       	cpi	r26, 0x44	; 68
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 8c 02 	call	0x518	; 0x518 <main>
 234:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <CLK_init>:

void delay_3s(void)
{
	volatile uint32_t ticks;				//Volatile prevents compiler optimization
	for(ticks = 0; ticks <= 200000; ticks++);	//increment 2e6 times -> ~ 1 sec
}
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 242:	e0 e5       	ldi	r30, 0x50	; 80
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	81 81       	ldd	r24, Z+1	; 0x01
 248:	81 ff       	sbrs	r24, 1
 24a:	fd cf       	rjmp	.-6      	; 0x246 <CLK_init+0xa>
 24c:	88 ed       	ldi	r24, 0xD8	; 216
 24e:	84 bf       	out	0x34, r24	; 52
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 256:	08 95       	ret

00000258 <ADC_init>:
 258:	e0 e0       	ldi	r30, 0x00	; 0
 25a:	f6 e0       	ldi	r31, 0x06	; 6
 25c:	80 81       	ld	r24, Z
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	80 83       	st	Z, r24
 262:	e0 e0       	ldi	r30, 0x00	; 0
 264:	f2 e0       	ldi	r31, 0x02	; 2
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 83       	st	Z, r24
 26a:	9c e1       	ldi	r25, 0x1C	; 28
 26c:	91 83       	std	Z+1, r25	; 0x01
 26e:	90 e3       	ldi	r25, 0x30	; 48
 270:	92 83       	std	Z+2, r25	; 0x02
 272:	93 e8       	ldi	r25, 0x83	; 131
 274:	90 a3       	std	Z+32, r25	; 0x20
 276:	11 a2       	std	Z+33, r1	; 0x21
 278:	90 a7       	std	Z+40, r25	; 0x28
 27a:	81 a7       	std	Z+41, r24	; 0x29
 27c:	80 8f       	std	Z+24, r24	; 0x18
 27e:	11 8e       	std	Z+25, r1	; 0x19
 280:	96 e0       	ldi	r25, 0x06	; 6
 282:	92 a3       	std	Z+34, r25	; 0x22
 284:	9e e0       	ldi	r25, 0x0E	; 14
 286:	92 a7       	std	Z+42, r25	; 0x2a
 288:	93 e0       	ldi	r25, 0x03	; 3
 28a:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 28e:	86 83       	std	Z+6, r24	; 0x06
 290:	08 95       	ret

00000292 <USART_init>:
 292:	e0 ea       	ldi	r30, 0xA0	; 160
 294:	f9 e0       	ldi	r31, 0x09	; 9
 296:	89 e8       	ldi	r24, 0x89	; 137
 298:	86 83       	std	Z+6, r24	; 0x06
 29a:	80 ef       	ldi	r24, 0xF0	; 240
 29c:	87 83       	std	Z+7, r24	; 0x07
 29e:	88 e1       	ldi	r24, 0x18	; 24
 2a0:	84 83       	std	Z+4, r24	; 0x04
 2a2:	8b e0       	ldi	r24, 0x0B	; 11
 2a4:	85 83       	std	Z+5, r24	; 0x05
 2a6:	08 95       	ret

000002a8 <IO_init>:
 2a8:	e0 e6       	ldi	r30, 0x60	; 96
 2aa:	f6 e0       	ldi	r31, 0x06	; 6
 2ac:	88 ef       	ldi	r24, 0xF8	; 248
 2ae:	81 83       	std	Z+1, r24	; 0x01
 2b0:	85 83       	std	Z+5, r24	; 0x05
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	82 83       	std	Z+2, r24	; 0x02
 2b6:	e0 ec       	ldi	r30, 0xC0	; 192
 2b8:	f7 e0       	ldi	r31, 0x07	; 7
 2ba:	8a e0       	ldi	r24, 0x0A	; 10
 2bc:	81 83       	std	Z+1, r24	; 0x01
 2be:	86 83       	std	Z+6, r24	; 0x06
 2c0:	08 95       	ret

000002c2 <EBI_init>:
 2c2:	e0 ee       	ldi	r30, 0xE0	; 224
 2c4:	f6 e0       	ldi	r31, 0x06	; 6
 2c6:	87 e1       	ldi	r24, 0x17	; 23
 2c8:	80 83       	st	Z, r24
 2ca:	83 e1       	ldi	r24, 0x13	; 19
 2cc:	84 83       	std	Z+4, r24	; 0x04
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
 2d4:	e0 e4       	ldi	r30, 0x40	; 64
 2d6:	f4 e0       	ldi	r31, 0x04	; 4
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	80 83       	st	Z, r24
 2dc:	13 8a       	std	Z+19, r1	; 0x13
 2de:	80 e8       	ldi	r24, 0x80	; 128
 2e0:	82 8b       	std	Z+18, r24	; 0x12
 2e2:	85 e1       	ldi	r24, 0x15	; 21
 2e4:	80 8b       	std	Z+16, r24	; 0x10
 2e6:	08 95       	ret

000002e8 <__vector_71>:
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	08 b6       	in	r0, 0x38	; 56
 2f4:	0f 92       	push	r0
 2f6:	18 be       	out	0x38, r1	; 56
 2f8:	0b b6       	in	r0, 0x3b	; 59
 2fa:	0f 92       	push	r0
 2fc:	1b be       	out	0x3b, r1	; 59
 2fe:	8f 93       	push	r24
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
 304:	e0 e6       	ldi	r30, 0x60	; 96
 306:	f6 e0       	ldi	r31, 0x06	; 6
 308:	84 81       	ldd	r24, Z+4	; 0x04
 30a:	8f 7e       	andi	r24, 0xEF	; 239
 30c:	84 83       	std	Z+4, r24	; 0x04
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	8f 91       	pop	r24
 314:	0f 90       	pop	r0
 316:	0b be       	out	0x3b, r0	; 59
 318:	0f 90       	pop	r0
 31a:	08 be       	out	0x38, r0	; 56
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__vector_72>:
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	08 b6       	in	r0, 0x38	; 56
 332:	0f 92       	push	r0
 334:	18 be       	out	0x38, r1	; 56
 336:	0b b6       	in	r0, 0x3b	; 59
 338:	0f 92       	push	r0
 33a:	1b be       	out	0x3b, r1	; 59
 33c:	8f 93       	push	r24
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
 342:	e0 e6       	ldi	r30, 0x60	; 96
 344:	f6 e0       	ldi	r31, 0x06	; 6
 346:	84 81       	ldd	r24, Z+4	; 0x04
 348:	8f 7b       	andi	r24, 0xBF	; 191
 34a:	84 83       	std	Z+4, r24	; 0x04
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0b be       	out	0x3b, r0	; 59
 356:	0f 90       	pop	r0
 358:	08 be       	out	0x38, r0	; 56
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <read_photoresistor>:
 364:	e0 e0       	ldi	r30, 0x00	; 0
 366:	f2 e0       	ldi	r31, 0x02	; 2
 368:	80 a1       	ldd	r24, Z+32	; 0x20
 36a:	80 68       	ori	r24, 0x80	; 128
 36c:	80 a3       	std	Z+32, r24	; 0x20
 36e:	83 a1       	ldd	r24, Z+35	; 0x23
 370:	80 ff       	sbrs	r24, 0
 372:	fd cf       	rjmp	.-6      	; 0x36e <read_photoresistor+0xa>
 374:	e0 e0       	ldi	r30, 0x00	; 0
 376:	f2 e0       	ldi	r31, 0x02	; 2
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	86 83       	std	Z+6, r24	; 0x06
 37c:	84 a1       	ldd	r24, Z+36	; 0x24
 37e:	95 a1       	ldd	r25, Z+37	; 0x25
 380:	08 95       	ret

00000382 <read_DAD>:
 382:	e0 e0       	ldi	r30, 0x00	; 0
 384:	f2 e0       	ldi	r31, 0x02	; 2
 386:	80 a5       	ldd	r24, Z+40	; 0x28
 388:	80 68       	ori	r24, 0x80	; 128
 38a:	80 a7       	std	Z+40, r24	; 0x28
 38c:	83 a5       	ldd	r24, Z+43	; 0x2b
 38e:	80 ff       	sbrs	r24, 0
 390:	fd cf       	rjmp	.-6      	; 0x38c <read_DAD+0xa>
 392:	e0 e0       	ldi	r30, 0x00	; 0
 394:	f2 e0       	ldi	r31, 0x02	; 2
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	86 83       	std	Z+6, r24	; 0x06
 39a:	84 a5       	ldd	r24, Z+44	; 0x2c
 39c:	95 a5       	ldd	r25, Z+45	; 0x2d
 39e:	08 95       	ret

000003a0 <send_char>:
 3a0:	e0 ea       	ldi	r30, 0xA0	; 160
 3a2:	f9 e0       	ldi	r31, 0x09	; 9
 3a4:	91 81       	ldd	r25, Z+1	; 0x01
 3a6:	95 ff       	sbrs	r25, 5
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <send_char+0x4>
 3aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 3ae:	08 95       	ret

000003b0 <send_string>:
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ec 01       	movw	r28, r24
 3b6:	88 81       	ld	r24, Y
 3b8:	88 23       	and	r24, r24
 3ba:	31 f0       	breq	.+12     	; 0x3c8 <send_string+0x18>
 3bc:	21 96       	adiw	r28, 0x01	; 1
 3be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <send_char>
 3c2:	89 91       	ld	r24, Y+
 3c4:	81 11       	cpse	r24, r1
 3c6:	fb cf       	rjmp	.-10     	; 0x3be <send_string+0xe>
 3c8:	df 91       	pop	r29
 3ca:	cf 91       	pop	r28
 3cc:	08 95       	ret

000003ce <receive_char>:
 3ce:	e0 ea       	ldi	r30, 0xA0	; 160
 3d0:	f9 e0       	ldi	r31, 0x09	; 9
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	88 23       	and	r24, r24
 3d6:	ec f7       	brge	.-6      	; 0x3d2 <receive_char+0x4>
 3d8:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 3dc:	08 95       	ret

000003de <timer_on>:
 3de:	e0 e0       	ldi	r30, 0x00	; 0
 3e0:	f8 e0       	ldi	r31, 0x08	; 8
 3e2:	8f ef       	ldi	r24, 0xFF	; 255
 3e4:	86 a3       	std	Z+38, r24	; 0x26
 3e6:	17 a2       	std	Z+39, r1	; 0x27
 3e8:	87 e0       	ldi	r24, 0x07	; 7
 3ea:	80 83       	st	Z, r24
 3ec:	11 82       	std	Z+1, r1	; 0x01
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	86 83       	std	Z+6, r24	; 0x06
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	84 87       	std	Z+12, r24	; 0x0c
 3fc:	08 95       	ret

000003fe <__vector_14>:
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	08 b6       	in	r0, 0x38	; 56
 40a:	0f 92       	push	r0
 40c:	18 be       	out	0x38, r1	; 56
 40e:	09 b6       	in	r0, 0x39	; 57
 410:	0f 92       	push	r0
 412:	19 be       	out	0x39, r1	; 57
 414:	0b b6       	in	r0, 0x3b	; 59
 416:	0f 92       	push	r0
 418:	1b be       	out	0x3b, r1	; 59
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
 432:	0e 94 b2 01 	call	0x364	; 0x364 <read_photoresistor>
 436:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <send_string>
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0b be       	out	0x3b, r0	; 59
 456:	0f 90       	pop	r0
 458:	09 be       	out	0x39, r0	; 57
 45a:	0f 90       	pop	r0
 45c:	08 be       	out	0x38, r0	; 56
 45e:	0f 90       	pop	r0
 460:	0f be       	out	0x3f, r0	; 63
 462:	0f 90       	pop	r0
 464:	1f 90       	pop	r1
 466:	18 95       	reti

00000468 <SRAM_read>:
 468:	80 91 00 80 	lds	r24, 0x8000	; 0x808000 <__data_end+0x5ebc>
 46c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <send_char>
 470:	08 95       	ret

00000472 <delay_50us>:



void delay_50us(void)
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	00 d0       	rcall	.+0      	; 0x478 <delay_50us+0x6>
 478:	1f 92       	push	r1
 47a:	cd b7       	in	r28, 0x3d	; 61
 47c:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks;				//Volatile prevents compiler optimization
	for(ticks = 0; ticks <= 200; ticks++);	//increment 2e6 times -> ~ 1 sec
 47e:	19 82       	std	Y+1, r1	; 0x01
 480:	1a 82       	std	Y+2, r1	; 0x02
 482:	1b 82       	std	Y+3, r1	; 0x03
 484:	1c 82       	std	Y+4, r1	; 0x04
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	9a 81       	ldd	r25, Y+2	; 0x02
 48a:	ab 81       	ldd	r26, Y+3	; 0x03
 48c:	bc 81       	ldd	r27, Y+4	; 0x04
 48e:	89 3c       	cpi	r24, 0xC9	; 201
 490:	91 05       	cpc	r25, r1
 492:	a1 05       	cpc	r26, r1
 494:	b1 05       	cpc	r27, r1
 496:	a0 f4       	brcc	.+40     	; 0x4c0 <delay_50us+0x4e>
 498:	89 81       	ldd	r24, Y+1	; 0x01
 49a:	9a 81       	ldd	r25, Y+2	; 0x02
 49c:	ab 81       	ldd	r26, Y+3	; 0x03
 49e:	bc 81       	ldd	r27, Y+4	; 0x04
 4a0:	01 96       	adiw	r24, 0x01	; 1
 4a2:	a1 1d       	adc	r26, r1
 4a4:	b1 1d       	adc	r27, r1
 4a6:	89 83       	std	Y+1, r24	; 0x01
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	ab 83       	std	Y+3, r26	; 0x03
 4ac:	bc 83       	std	Y+4, r27	; 0x04
 4ae:	89 81       	ldd	r24, Y+1	; 0x01
 4b0:	9a 81       	ldd	r25, Y+2	; 0x02
 4b2:	ab 81       	ldd	r26, Y+3	; 0x03
 4b4:	bc 81       	ldd	r27, Y+4	; 0x04
 4b6:	89 3c       	cpi	r24, 0xC9	; 201
 4b8:	91 05       	cpc	r25, r1
 4ba:	a1 05       	cpc	r26, r1
 4bc:	b1 05       	cpc	r27, r1
 4be:	60 f3       	brcs	.-40     	; 0x498 <delay_50us+0x26>
}
 4c0:	24 96       	adiw	r28, 0x04	; 4
 4c2:	cd bf       	out	0x3d, r28	; 61
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <determine_function>:

void determine_function(char op) {
	
	uint16_t adcVal = 0x00;
	
	switch(op) {
 4cc:	83 36       	cpi	r24, 0x63	; 99
 4ce:	b1 f0       	breq	.+44     	; 0x4fc <determine_function+0x30>
 4d0:	28 f4       	brcc	.+10     	; 0x4dc <determine_function+0x10>
 4d2:	81 36       	cpi	r24, 0x61	; 97
 4d4:	49 f0       	breq	.+18     	; 0x4e8 <determine_function+0x1c>
 4d6:	82 36       	cpi	r24, 0x62	; 98
 4d8:	61 f0       	breq	.+24     	; 0x4f2 <determine_function+0x26>
 4da:	08 95       	ret
 4dc:	85 36       	cpi	r24, 0x65	; 101
 4de:	a1 f0       	breq	.+40     	; 0x508 <determine_function+0x3c>
 4e0:	80 f0       	brcs	.+32     	; 0x502 <determine_function+0x36>
 4e2:	86 36       	cpi	r24, 0x66	; 102
 4e4:	b1 f0       	breq	.+44     	; 0x512 <determine_function+0x46>
 4e6:	08 95       	ret

		case 'a':
		adcVal = read_photoresistor();
 4e8:	0e 94 b2 01 	call	0x364	; 0x364 <read_photoresistor>
		send_char(adcVal);
 4ec:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <send_char>
		break; 
 4f0:	08 95       	ret
		
		case 'b':
		adcVal = read_DAD();
 4f2:	0e 94 c1 01 	call	0x382	; 0x382 <read_DAD>
		send_char(adcVal);
 4f6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <send_char>
		break; 
 4fa:	08 95       	ret
		
		case 'c':
		timer_on();
 4fc:	0e 94 ef 01 	call	0x3de	; 0x3de <timer_on>
		break;
 500:	08 95       	ret



void timer_off() {
	
	TCC0.CTRLA = 0x00; 			//disable timer
 502:	10 92 00 08 	sts	0x0800, r1	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
 506:	08 95       	ret
		case 'd':
		timer_off();
		break;
		
		case 'e':
		adcVal = read_photoresistor();
 508:	0e 94 b2 01 	call	0x364	; 0x364 <read_photoresistor>


void SRAM_write(uint16_t CdS) {
	
	uint8_t volatile *ptr_8 = (uint16_t)0x8000;        // memory location 0x8000	
	*ptr_8 = CdS;    //write 0x37 into 0x8000	
 50c:	80 93 00 80 	sts	0x8000, r24	; 0x808000 <__data_end+0x5ebc>
 510:	08 95       	ret
		adcVal = read_photoresistor();
		SRAM_write(adcVal);
		break;
		
		case 'f':
		SRAM_read();
 512:	0e 94 34 02 	call	0x468	; 0x468 <SRAM_read>
 516:	08 95       	ret

00000518 <main>:
	
}


int main(void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	1f 92       	push	r1
 51e:	1f 92       	push	r1
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
   
	CLK_init();
 524:	0e 94 1e 01 	call	0x23c	; 0x23c <CLK_init>
    ADC_init();	 
 528:	0e 94 2c 01 	call	0x258	; 0x258 <ADC_init>
	EBI_init();       
 52c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <EBI_init>
	USART_init();
 530:	0e 94 49 01 	call	0x292	; 0x292 <USART_init>
	IO_init();
 534:	0e 94 54 01 	call	0x2a8	; 0x2a8 <IO_init>
	
	sei();						//global interrupt enable
 538:	78 94       	sei

	
    while(1){
		
		//display menu
		for(volatile int i = 0; i < sizeof(Menu); i++){
 53a:	19 82       	std	Y+1, r1	; 0x01
 53c:	1a 82       	std	Y+2, r1	; 0x02
 53e:	89 81       	ldd	r24, Y+1	; 0x01
 540:	9a 81       	ldd	r25, Y+2	; 0x02
 542:	0c 97       	sbiw	r24, 0x0c	; 12
 544:	c8 f4       	brcc	.+50     	; 0x578 <main+0x60>
			send_string(Menu[i]);
 546:	e9 81       	ldd	r30, Y+1	; 0x01
 548:	fa 81       	ldd	r31, Y+2	; 0x02
 54a:	ee 0f       	add	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	e0 50       	subi	r30, 0x00	; 0
 550:	f0 4e       	sbci	r31, 0xE0	; 224
 552:	80 81       	ld	r24, Z
 554:	91 81       	ldd	r25, Z+1	; 0x01
 556:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <send_string>
			send_string("\n");
 55a:	8c e0       	ldi	r24, 0x0C	; 12
 55c:	90 e2       	ldi	r25, 0x20	; 32
 55e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <send_string>
			delay_50us();
 562:	0e 94 39 02 	call	0x472	; 0x472 <delay_50us>

	
    while(1){
		
		//display menu
		for(volatile int i = 0; i < sizeof(Menu); i++){
 566:	89 81       	ldd	r24, Y+1	; 0x01
 568:	9a 81       	ldd	r25, Y+2	; 0x02
 56a:	01 96       	adiw	r24, 0x01	; 1
 56c:	89 83       	std	Y+1, r24	; 0x01
 56e:	9a 83       	std	Y+2, r25	; 0x02
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	9a 81       	ldd	r25, Y+2	; 0x02
 574:	0c 97       	sbiw	r24, 0x0c	; 12
 576:	38 f3       	brcs	.-50     	; 0x546 <main+0x2e>
			send_string(Menu[i]);
			send_string("\n");
			delay_50us();
		}
		
		send_string("\n");
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	90 e2       	ldi	r25, 0x20	; 32
 57c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <send_string>
		
		option = receive_char();
 580:	0e 94 e7 01 	call	0x3ce	; 0x3ce <receive_char>
		determine_function(option);	
 584:	0e 94 66 02 	call	0x4cc	; 0x4cc <determine_function>
	
	}
 588:	d8 cf       	rjmp	.-80     	; 0x53a <main+0x22>

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
