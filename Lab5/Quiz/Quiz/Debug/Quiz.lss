
Quiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000364  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004854  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00003cc6  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000598  00000000  00000000  000088f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00008e90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000030b1  00000000  00000000  00008ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000bfa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  0000bfed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 43 01 	call	0x286	; 0x286 <main>
 218:	0c 94 6d 01 	jmp	0x2da	; 0x2da <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <ADC_init>:


void ADC_init(void)
{
	
	PORTA.DIR = 0x00;			//Port A as input
 220:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	ADCA.CTRLA = 0x01;			//channel 0 enabled
 224:	e0 e0       	ldi	r30, 0x00	; 0
 226:	f2 e0       	ldi	r31, 0x02	; 2
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	80 83       	st	Z, r24
	ADCA.CTRLB = 0x0C;			// 8 bit right adjusted, conversion mode
 22c:	9c e0       	ldi	r25, 0x0C	; 12
 22e:	91 83       	std	Z+1, r25	; 0x01
	ADCA.REFCTRL = 0x30;		//AREFB
 230:	90 e3       	ldi	r25, 0x30	; 48
 232:	92 83       	std	Z+2, r25	; 0x02
	
	ADCA.CH0.CTRL = 0x81;		//single-ended with gain of 1  00001
 234:	91 e8       	ldi	r25, 0x81	; 129
 236:	90 a3       	std	Z+32, r25	; 0x20
	ADCA.CH0.MUXCTRL = 0x0A;	//Pin 1 and 6  0001010
 238:	9a e0       	ldi	r25, 0x0A	; 10
 23a:	91 a3       	std	Z+33, r25	; 0x21

	
	ADCA.INTFLAGS = 0x01;		// clearing flag
 23c:	86 83       	std	Z+6, r24	; 0x06
 23e:	08 95       	ret

00000240 <EBI_init>:
}


void EBI_init()
{
	PORTH.DIR = 0x17;       // Enable RE, WE, ALE1, CS0
 240:	e0 ee       	ldi	r30, 0xE0	; 224
 242:	f6 e0       	ldi	r31, 0x06	; 6
 244:	87 e1       	ldi	r24, 0x17	; 23
 246:	80 83       	st	Z, r24
	PORTH.OUT = 0x13;
 248:	83 e1       	ldi	r24, 0x13	; 19
 24a:	84 83       	std	Z+4, r24	; 0x04
	PORTK.DIR = 0xFF;       // Enable Address 7:0 (outputs)
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <__TEXT_REGION_LENGTH__+0x700720>
	
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc;				// ALE1 multiplexing, 3 port configuration
 252:	e0 e4       	ldi	r30, 0x40	; 64
 254:	f4 e0       	ldi	r31, 0x04	; 4
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 83       	st	Z, r24

	EBI.CS0.BASEADDR = (uint16_t) (CS0_Start >> 8) & 0xFFFF;  			// Set CS0 range to 0x128000 - 0x148000
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	92 e1       	ldi	r25, 0x12	; 18
 25e:	82 8b       	std	Z+18, r24	; 0x12
 260:	93 8b       	std	Z+19, r25	; 0x13
	EBI.CS0.CTRLA = EBI_CS_MODE_SRAM_gc | EBI_CS_ASPACE_32KB_gc;	    // SRAM mode, 32k address space
 262:	8d e1       	ldi	r24, 0x1D	; 29
 264:	80 8b       	std	Z+16, r24	; 0x10
 266:	08 95       	ret

00000268 <ADC_read>:


uint16_t ADC_read() {
	
	
	ADCA.CH0.CTRL |= (1 << ADC_CH_START_bp);			//start conversion
 268:	e0 e0       	ldi	r30, 0x00	; 0
 26a:	f2 e0       	ldi	r31, 0x02	; 2
 26c:	80 a1       	ldd	r24, Z+32	; 0x20
 26e:	80 68       	ori	r24, 0x80	; 128
 270:	80 a3       	std	Z+32, r24	; 0x20
	while(!(ADCA.CH0.INTFLAGS & ADC_CH_CHIF_bm));		//wait until conversion is complete
 272:	83 a1       	ldd	r24, Z+35	; 0x23
 274:	80 ff       	sbrs	r24, 0
 276:	fd cf       	rjmp	.-6      	; 0x272 <ADC_read+0xa>
	ADCA.INTFLAGS = 0x01;								//clear flag
 278:	e0 e0       	ldi	r30, 0x00	; 0
 27a:	f2 e0       	ldi	r31, 0x02	; 2
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	86 83       	std	Z+6, r24	; 0x06
	
	
	return ADCA.CH0.RES;
 280:	84 a1       	ldd	r24, Z+36	; 0x24
 282:	95 a1       	ldd	r25, Z+37	; 0x25
	
	
}
 284:	08 95       	ret

00000286 <main>:



int main(void)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	00 d0       	rcall	.+0      	; 0x28c <main+0x6>
 28c:	1f 92       	push	r1
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62

	 EBI_init();	        //Call init EBI function
 292:	0e 94 20 01 	call	0x240	; 0x240 <EBI_init>
	 ADC_init();
 296:	0e 94 10 01 	call	0x220	; 0x220 <ADC_init>
	 
	 volatile uint16_t adcVal = 0;
 29a:	19 82       	std	Y+1, r1	; 0x01
 29c:	1a 82       	std	Y+2, r1	; 0x02
	 volatile uint16_t mem_value = 0;
 29e:	1b 82       	std	Y+3, r1	; 0x03
 2a0:	1c 82       	std	Y+4, r1	; 0x04

	 
	 while(1){
		 
		 adcVal = ADC_read();
		 __far_mem_write(0x128000, adcVal);
 2a2:	0f 2e       	mov	r0, r31
 2a4:	c1 2c       	mov	r12, r1
 2a6:	f0 e8       	ldi	r31, 0x80	; 128
 2a8:	df 2e       	mov	r13, r31
 2aa:	f2 e1       	ldi	r31, 0x12	; 18
 2ac:	ef 2e       	mov	r14, r31
 2ae:	f1 2c       	mov	r15, r1
 2b0:	f0 2d       	mov	r31, r0
	 volatile uint16_t mem_value = 0;

	 
	 while(1){
		 
		 adcVal = ADC_read();
 2b2:	0e 94 34 01 	call	0x268	; 0x268 <ADC_read>
 2b6:	89 83       	std	Y+1, r24	; 0x01
 2b8:	9a 83       	std	Y+2, r25	; 0x02
		 __far_mem_write(0x128000, adcVal);
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	9a 81       	ldd	r25, Y+2	; 0x02
 2be:	0b b6       	in	r0, 0x3b	; 59
 2c0:	eb be       	out	0x3b, r14	; 59
 2c2:	f6 01       	movw	r30, r12
 2c4:	80 83       	st	Z, r24
 2c6:	0b be       	out	0x3b, r0	; 59
		 mem_value = __far_mem_read(0x128000);
 2c8:	0b b6       	in	r0, 0x3b	; 59
 2ca:	eb be       	out	0x3b, r14	; 59
 2cc:	f6 01       	movw	r30, r12
 2ce:	80 81       	ld	r24, Z
 2d0:	0b be       	out	0x3b, r0	; 59
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	8b 83       	std	Y+3, r24	; 0x03
 2d6:	9c 83       	std	Y+4, r25	; 0x04
		// mem_value /= 2;							//so it won't be optimized away
	 }
 2d8:	ec cf       	rjmp	.-40     	; 0x2b2 <main+0x2c>

000002da <_exit>:
 2da:	f8 94       	cli

000002dc <__stop_program>:
 2dc:	ff cf       	rjmp	.-2      	; 0x2dc <__stop_program>
