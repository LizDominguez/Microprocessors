
Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  00000832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802000  00802000  00000832  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005300  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d9d  00000000  00000000  00005c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0d  00000000  00000000  000099d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  0000a3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000369c  00000000  00000000  0000a5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035f  00000000  00000000  0000dc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000dfa7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_66>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a2 30       	cpi	r26, 0x02	; 2
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 4d 02 	call	0x49a	; 0x49a <main>
 228:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <CLK_init>:
volatile uint8_t gyroDataReady = 0x00;


void CLK_init(void) {
	
	OSC.CTRL = 0x02;							//32 Mhz internal oscillator enable
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32 MHz oscillator ready flag
 236:	e0 e5       	ldi	r30, 0x50	; 80
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	81 81       	ldd	r24, Z+1	; 0x01
 23c:	81 ff       	sbrs	r24, 1
 23e:	fd cf       	rjmp	.-6      	; 0x23a <CLK_init+0xa>
	CPU_CCP = 0xD8; 							//IOREG
 240:	88 ed       	ldi	r24, 0xD8	; 216
 242:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01; 							//bit 0 is 32 MHz internal oscillator
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 24a:	08 95       	ret

0000024c <PWM_init>:
void PWM_init() {


	//PORTD.DIRSET = 0x70;			//PORTD RBG LEDs as outputs

	TCD0.PERL = 0xFF;
 24c:	e0 e0       	ldi	r30, 0x00	; 0
 24e:	f9 e0       	ldi	r31, 0x09	; 9
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	86 a3       	std	Z+38, r24	; 0x26
	TCD0.PERH = 0xFF;				//period as highest resolution
 254:	87 a3       	std	Z+39, r24	; 0x27
	TCD0.CTRLA = 0x01;				//Timer 0 in Port D enable
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 83       	st	Z, r24
	TCD0.CTRLB = 0x73;				//enable OC0C, single slope PWM
 25a:	83 e7       	ldi	r24, 0x73	; 115
 25c:	81 83       	std	Z+1, r24	; 0x01

	PORTD.REMAP = 0x07;				//moving PORTD timer/counter pins
 25e:	87 e0       	ldi	r24, 0x07	; 7
 260:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
 264:	08 95       	ret

00000266 <SPI_init>:
}


void SPI_init()
{
	PORTA.DIR = 0xF8;		//Protocol Sel, others
 266:	e0 e0       	ldi	r30, 0x00	; 0
 268:	f6 e0       	ldi	r31, 0x06	; 6
 26a:	88 ef       	ldi	r24, 0xF8	; 248
 26c:	80 83       	st	Z, r24
	PORTA.OUT = 0x00;		//Protocol sel SPI
 26e:	14 82       	std	Z+4, r1	; 0x04
	PORTF.DIR = 0xBF;		//SSA, MOSI, SCK, MISO as input
 270:	e0 ea       	ldi	r30, 0xA0	; 160
 272:	f6 e0       	ldi	r31, 0x06	; 6
 274:	8f eb       	ldi	r24, 0xBF	; 191
 276:	80 83       	st	Z, r24
	PORTF.OUT = 0x18;		//SSA & SSG
 278:	88 e1       	ldi	r24, 0x18	; 24
 27a:	84 83       	std	Z+4, r24	; 0x04
	PORTC.DIR = 0x00;		//data direction
 27c:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	
	SPIF.CTRL = SPI_ENABLE_bm |				//enable, data order msb
 280:	80 e5       	ldi	r24, 0x50	; 80
 282:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x700bc0>
 286:	08 95       	ret

00000288 <USART_init>:
				
}

void USART_init(void) {
	
	PORTD.DIRSET = 0xF8;	//set TxD and RBG LED as output
 288:	e0 e6       	ldi	r30, 0x60	; 96
 28a:	f6 e0       	ldi	r31, 0x06	; 6
 28c:	88 ef       	ldi	r24, 0xF8	; 248
 28e:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0xF8;	//set TxD to high, LED to off
 290:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRCLR = 0x04;	//set RxD pin as input
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	82 83       	std	Z+2, r24	; 0x02
	
	//PortQ bits 1 and 3 enable and select
	PORTQ.DIRSET = 0x0A;	//PortD bits 2 and 3 serial pins
 296:	e0 ec       	ldi	r30, 0xC0	; 192
 298:	f7 e0       	ldi	r31, 0x07	; 7
 29a:	8a e0       	ldi	r24, 0x0A	; 10
 29c:	81 83       	std	Z+1, r24	; 0x01
	PORTQ.OUTCLR = 0x0A;	//connected to the USB lines
 29e:	86 83       	std	Z+6, r24	; 0x06
	
	USARTD0.BAUDCTRLA = (BSel & 0xFF);			//sets BAUDCTRLA to lower 8 bits of BSel
 2a0:	e0 ea       	ldi	r30, 0xA0	; 160
 2a2:	f9 e0       	ldi	r31, 0x09	; 9
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = ((BScale << 4) & 0xF0) | ((BSel >> 8) & 0x0F);
 2a8:	17 82       	std	Z+7, r1	; 0x07
	USARTD0.CTRLB = 0x18;						//RXEN/TEXEN
 2aa:	88 e1       	ldi	r24, 0x18	; 24
 2ac:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0x0B;						//asynchronous/no parity/1 stop bit/8 data
 2ae:	8b e0       	ldi	r24, 0x0B	; 11
 2b0:	85 83       	std	Z+5, r24	; 0x05
 2b2:	08 95       	ret

000002b4 <spiWrite>:
}

uint8_t spiWrite(uint8_t data) {
			
		SPIF.DATA = data;					//enable SPI
 2b4:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
		while(!(SPIF.STATUS & 0x80));		//wait for serial transfer
 2b8:	e0 ec       	ldi	r30, 0xC0	; 192
 2ba:	fb e0       	ldi	r31, 0x0B	; 11
 2bc:	82 81       	ldd	r24, Z+2	; 0x02
 2be:	88 23       	and	r24, r24
 2c0:	ec f7       	brge	.-6      	; 0x2bc <spiWrite+0x8>
		
		return SPIF.DATA;
 2c2:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
			
}
 2c6:	08 95       	ret

000002c8 <spiRead>:

uint8_t spiRead() {
	
	return spiWrite(0xFF);
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <spiWrite>
	
}
 2ce:	08 95       	ret

000002d0 <accRead>:

uint8_t accRead(uint8_t reg){
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	1f 92       	push	r1
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t read;
	
	PORTF.OUTCLR = 0x08;		//SSA clear
 2e0:	00 ea       	ldi	r16, 0xA0	; 160
 2e2:	16 e0       	ldi	r17, 0x06	; 6
 2e4:	68 94       	set
 2e6:	ff 24       	eor	r15, r15
 2e8:	f3 f8       	bld	r15, 3
 2ea:	f8 01       	movw	r30, r16
 2ec:	f6 82       	std	Z+6, r15	; 0x06
	PORTF.OUTSET = 0x04;		//Sensor sel acc
 2ee:	94 e0       	ldi	r25, 0x04	; 4
 2f0:	95 83       	std	Z+5, r25	; 0x05
	
	//RW, MS, AD[5:0], D[7:0]
	spiWrite(lsm330_spiRead_strobe | (reg & 0x3F));
 2f2:	8f 73       	andi	r24, 0x3F	; 63
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <spiWrite>
	read = spiRead();
 2fa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <spiRead>
 2fe:	89 83       	std	Y+1, r24	; 0x01
	
	PORTF.OUTSET = 0x08;		//SSA end transmission
 300:	f8 01       	movw	r30, r16
 302:	f5 82       	std	Z+5, r15	; 0x05
	
	return read;
 304:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 306:	0f 90       	pop	r0
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	ff 90       	pop	r15
 312:	08 95       	ret

00000314 <accWrite>:


void accWrite(uint8_t reg, uint8_t data) {
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	06 2f       	mov	r16, r22
	
	PORTF.OUTCLR = 0x08;		//SSA clear
 31e:	c0 ea       	ldi	r28, 0xA0	; 160
 320:	d6 e0       	ldi	r29, 0x06	; 6
 322:	18 e0       	ldi	r17, 0x08	; 8
 324:	1e 83       	std	Y+6, r17	; 0x06
	PORTF.OUTSET = 0x04;		//Sensor sel acc
 326:	94 e0       	ldi	r25, 0x04	; 4
 328:	9d 83       	std	Y+5, r25	; 0x05
	
	//RW, MS, AD[5:0], D[7:0]
	spiWrite(lsm330_spiWrite_strobe | (reg & 0x3F));
 32a:	8f 73       	andi	r24, 0x3F	; 63
 32c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <spiWrite>
	spiWrite(data);
 330:	80 2f       	mov	r24, r16
 332:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <spiWrite>
	
	PORTF.OUTSET = 0x08;		//SSA end transmission
 336:	1d 83       	std	Y+5, r17	; 0x05
	

}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <gyroRead>:

uint8_t gyroRead(uint8_t reg) {
 342:	ff 92       	push	r15
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	1f 92       	push	r1
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t read;
	
	PORTF.OUTCLR = 0x10;		//SSG
 352:	00 ea       	ldi	r16, 0xA0	; 160
 354:	16 e0       	ldi	r17, 0x06	; 6
 356:	68 94       	set
 358:	ff 24       	eor	r15, r15
 35a:	f4 f8       	bld	r15, 4
 35c:	f8 01       	movw	r30, r16
 35e:	f6 82       	std	Z+6, r15	; 0x06
	PORTF.OUTCLR = 0x04;		//Sensor sel gyro
 360:	94 e0       	ldi	r25, 0x04	; 4
 362:	96 83       	std	Z+6, r25	; 0x06
	
	
	//RW, MS, AD[5:0], D[7:0]
	spiWrite(lsm330_spiRead_strobe | (reg & 0x3F));
 364:	8f 73       	andi	r24, 0x3F	; 63
 366:	80 68       	ori	r24, 0x80	; 128
 368:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <spiWrite>
	read = spiRead();
 36c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <spiRead>
 370:	89 83       	std	Y+1, r24	; 0x01
	
	PORTF.OUTSET = 0x10;		//SSG end transmission
 372:	f8 01       	movw	r30, r16
 374:	f5 82       	std	Z+5, r15	; 0x05
	
	return read;
 376:	89 81       	ldd	r24, Y+1	; 0x01

}
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	08 95       	ret

00000386 <gyroWrite>:

void gyroWrite(uint8_t reg, uint8_t data) {
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	06 2f       	mov	r16, r22
	
	PORTF.OUTCLR = 0x10;		//SSG
 390:	c0 ea       	ldi	r28, 0xA0	; 160
 392:	d6 e0       	ldi	r29, 0x06	; 6
 394:	10 e1       	ldi	r17, 0x10	; 16
 396:	1e 83       	std	Y+6, r17	; 0x06
	PORTF.OUTCLR = 0x04;		//Sensor sel gyro
 398:	94 e0       	ldi	r25, 0x04	; 4
 39a:	9e 83       	std	Y+6, r25	; 0x06
	
	//RW, MS, AD[5:0], D[7:0]
	spiWrite(lsm330_spiWrite_strobe | (reg & 0x3F));
 39c:	8f 73       	andi	r24, 0x3F	; 63
 39e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <spiWrite>
	spiWrite(data);
 3a2:	80 2f       	mov	r24, r16
 3a4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <spiWrite>
	
	PORTF.OUTSET = 0x10;		//SSG end transmission
 3a8:	1d 83       	std	Y+5, r17	; 0x05

}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	08 95       	ret

000003b4 <accel_init>:
	Enable falling edge interrupt on PORTC pin 7
	Use CTRL_REG4_A to route DRDY signal to INT1_A and enable INT1 with rising edge
	Use CTRL_REG5_A to configure highest output rate and enable XYZ
	*/
	
	PORTC.INTCTRL = 0x01;		//interrupt 0 low level
 3b4:	e0 e4       	ldi	r30, 0x40	; 64
 3b6:	f6 e0       	ldi	r31, 0x06	; 6
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	81 87       	std	Z+9, r24	; 0x09
	PORTC.INT0MASK = 0x80;		//Pin 7 interrupt
 3bc:	80 e8       	ldi	r24, 0x80	; 128
 3be:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN7CTRL = 0x02;		//sense falling edge
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	87 8b       	std	Z+23, r24	; 0x17
	
	
	accWrite(CTRL_REG4_A, (CTRL_REG4_A_DR_EN |		//route DRDY to INT1_A and enable INT1 rising edge
 3c4:	68 ec       	ldi	r22, 0xC8	; 200
 3c6:	83 e2       	ldi	r24, 0x23	; 35
 3c8:	0e 94 8a 01 	call	0x314	; 0x314 <accWrite>
							CTRL_REG4_A_IEA |		
							CTRL_REG4_A_INT1_EN));	
													
			
	accWrite(CTRL_REG5_A, (CTRL_REG5_A_ODR3 |		//configure 1600Hz output rate and enable XYZ
 3cc:	67 e9       	ldi	r22, 0x97	; 151
 3ce:	80 e2       	ldi	r24, 0x20	; 32
 3d0:	0e 94 8a 01 	call	0x314	; 0x314 <accWrite>
 3d4:	08 95       	ret

000003d6 <gyro_init>:
	Leave BW[1:0] bit 00 and set PD bit for normal mode
	Set I2_DRDY bit in CTRL_REG3_G (signals when gyro is ready using INT2_G pin PA1)
	Choose 2000 dps for full scale selection FS[1:0] in CTRL_REG4_G
	*/
	
	PORTA.OUT = 0x08;				//gyro enable
 3d6:	e0 e0       	ldi	r30, 0x00	; 0
 3d8:	f6 e0       	ldi	r31, 0x06	; 6
 3da:	88 e0       	ldi	r24, 0x08	; 8
 3dc:	84 83       	std	Z+4, r24	; 0x04
	PORTA.INTCTRL = 0x01;			//interrupt 0 low level
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	81 87       	std	Z+9, r24	; 0x09
	PORTA.INT0MASK = 0x02;			//Pin 1 interrupt
 3e2:	92 e0       	ldi	r25, 0x02	; 2
 3e4:	92 87       	std	Z+10, r25	; 0x0a
	PORTA.PIN7CTRL = 0x01;			//sense rising edge
 3e6:	87 8b       	std	Z+23, r24	; 0x17

	
	gyroWrite(CTRL_REG1_G, (CTRL_REG1_G_DR1 |		//highest 100Hz, enable XYZ, normal mode
 3e8:	6f ec       	ldi	r22, 0xCF	; 207
 3ea:	80 e2       	ldi	r24, 0x20	; 32
 3ec:	0e 94 c3 01 	call	0x386	; 0x386 <gyroWrite>
							CTRL_REG1_G_ZEN |
							CTRL_REG1_G_YEN |
							CTRL_REG1_G_XEN));	
													
	
	gyroWrite(CTRL_REG3_G, CTRL_REG3_G_I2_DRDY);	//set I2_DRDY
 3f0:	68 e0       	ldi	r22, 0x08	; 8
 3f2:	82 e2       	ldi	r24, 0x22	; 34
 3f4:	0e 94 c3 01 	call	0x386	; 0x386 <gyroWrite>
	
	
	gyroWrite(CTRL_REG4_G, (CTRL_REG4_G_FS1 |
 3f8:	60 e3       	ldi	r22, 0x30	; 48
 3fa:	83 e2       	ldi	r24, 0x23	; 35
 3fc:	0e 94 c3 01 	call	0x386	; 0x386 <gyroWrite>
 400:	08 95       	ret

00000402 <send_char>:


void send_char(char c)
{
	
	while( !(USARTD0.STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
 402:	e0 ea       	ldi	r30, 0xA0	; 160
 404:	f9 e0       	ldi	r31, 0x09	; 9
 406:	91 81       	ldd	r25, Z+1	; 0x01
 408:	95 ff       	sbrs	r25, 5
 40a:	fd cf       	rjmp	.-6      	; 0x406 <send_char+0x4>
	USARTD0.DATA = c;
 40c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 410:	08 95       	ret

00000412 <__vector_2>:
	
}


ISR(PORTC_INT0_vect){
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	08 b6       	in	r0, 0x38	; 56
 41e:	0f 92       	push	r0
 420:	18 be       	out	0x38, r1	; 56
 422:	0b b6       	in	r0, 0x3b	; 59
 424:	0f 92       	push	r0
 426:	1b be       	out	0x3b, r1	; 59
 428:	8f 93       	push	r24
 42a:	ef 93       	push	r30
 42c:	ff 93       	push	r31
	accelDataReady = 0x01;
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <accelDataReady>
	PORTC.INTFLAGS |= 0x01;
 434:	e0 e4       	ldi	r30, 0x40	; 64
 436:	f6 e0       	ldi	r31, 0x06	; 6
 438:	84 85       	ldd	r24, Z+12	; 0x0c
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	84 87       	std	Z+12, r24	; 0x0c
}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	8f 91       	pop	r24
 444:	0f 90       	pop	r0
 446:	0b be       	out	0x3b, r0	; 59
 448:	0f 90       	pop	r0
 44a:	08 be       	out	0x38, r0	; 56
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__vector_66>:

ISR(PORTA_INT0_vect) {	
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	08 b6       	in	r0, 0x38	; 56
 462:	0f 92       	push	r0
 464:	18 be       	out	0x38, r1	; 56
 466:	0b b6       	in	r0, 0x3b	; 59
 468:	0f 92       	push	r0
 46a:	1b be       	out	0x3b, r1	; 59
 46c:	8f 93       	push	r24
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
	gyroDataReady = 0x01;	
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	PORTA.INTFLAGS |= 0x01;
 478:	e0 e0       	ldi	r30, 0x00	; 0
 47a:	f6 e0       	ldi	r31, 0x06	; 6
 47c:	84 85       	ldd	r24, Z+12	; 0x0c
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	84 87       	std	Z+12, r24	; 0x0c
}
 482:	ff 91       	pop	r31
 484:	ef 91       	pop	r30
 486:	8f 91       	pop	r24
 488:	0f 90       	pop	r0
 48a:	0b be       	out	0x3b, r0	; 59
 48c:	0f 90       	pop	r0
 48e:	08 be       	out	0x38, r0	; 56
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <main>:


int main(void)
{
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	2c 97       	sbiw	r28, 0x0c	; 12
 4a4:	cd bf       	out	0x3d, r28	; 61
 4a6:	de bf       	out	0x3e, r29	; 62
	PMIC.CTRL = 0x01;			//low level interrupts	
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	CLK_init();
 4ae:	0e 94 18 01 	call	0x230	; 0x230 <CLK_init>
	USART_init();
 4b2:	0e 94 44 01 	call	0x288	; 0x288 <USART_init>
    SPI_init();
 4b6:	0e 94 33 01 	call	0x266	; 0x266 <SPI_init>
	PWM_init();
 4ba:	0e 94 26 01 	call	0x24c	; 0x24c <PWM_init>
	
	gyroWrite(CTRL_REG1_G, 0x00);	//reset gyro
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	80 e2       	ldi	r24, 0x20	; 32
 4c2:	0e 94 c3 01 	call	0x386	; 0x386 <gyroWrite>
	accWrite(CTRL_REG4_A, 0x01);	//reset accelerometer
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	83 e2       	ldi	r24, 0x23	; 35
 4ca:	0e 94 8a 01 	call	0x314	; 0x314 <accWrite>
	
	gyro_init();
 4ce:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <gyro_init>
	accel_init();
 4d2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <accel_init>

	 
	sei();
 4d6:	78 94       	sei
			if( abs(ACCEL_Y_H) > 0x00 && abs(ACCEL_Z_H)  > 0x00 && abs(ACCEL_X_H)  == 0x00) {
				
				//CYAN
				
				//RED
				TCD0.CCAL = BLACK;
 4d8:	00 e0       	ldi	r16, 0x00	; 0
 4da:	19 e0       	ldi	r17, 0x09	; 9
 4dc:	ff 24       	eor	r15, r15
 4de:	fa 94       	dec	r15
				TCD0.CCAH = BLACK;
				
				//GREEN
				TCD0.CCBL = ~0xA8;
 4e0:	0f 2e       	mov	r0, r31
 4e2:	f7 e5       	ldi	r31, 0x57	; 87
 4e4:	df 2e       	mov	r13, r31
 4e6:	f0 2d       	mov	r31, r0
			if( abs(ACCEL_X_H) > 0x00 && abs(ACCEL_Y_H)  > 0x00 && abs(ACCEL_Z_H)  == 0x00) {
				
				//mystery color yellow?
				
				//RED
				TCD0.CCAL = DUTY_CYCLE;
 4e8:	0f 2e       	mov	r0, r31
 4ea:	f0 ef       	ldi	r31, 0xF0	; 240
 4ec:	ef 2e       	mov	r14, r31
 4ee:	f0 2d       	mov	r31, r0
			if( abs(ACCEL_X_H) > 0x00 && abs(ACCEL_Z_H)  > 0x00 && abs(ACCEL_Y_H)  == 0x00) {
				
				//purple
				
				//RED
				TCD0.CCAL = ~0x8A;
 4f0:	0f 2e       	mov	r0, r31
 4f2:	f5 e7       	ldi	r31, 0x75	; 117
 4f4:	bf 2e       	mov	r11, r31
 4f6:	f0 2d       	mov	r31, r0
				TCD0.CCAH = ~0x8A;
				
				//GREEN
				TCD0.CCBL = ~0x2C;
 4f8:	0f 2e       	mov	r0, r31
 4fa:	f3 ed       	ldi	r31, 0xD3	; 211
 4fc:	7f 2e       	mov	r7, r31
 4fe:	f0 2d       	mov	r31, r0
				TCD0.CCBH = BLACK;
				
				//BLUE
				TCD0.CCCL = ~0x9A;
 500:	0f 2e       	mov	r0, r31
 502:	f5 e6       	ldi	r31, 0x65	; 101
 504:	cf 2e       	mov	r12, r31
 506:	f0 2d       	mov	r31, r0
				//BLUE
				TCD0.CCCL = ~0xA5;
				TCD0.CCCH = ~0xA5;
				
				//GREEN
				TCD0.CCBL = ~0x21;
 508:	0f 2e       	mov	r0, r31
 50a:	fe ed       	ldi	r31, 0xDE	; 222
 50c:	4f 2e       	mov	r4, r31
 50e:	f0 2d       	mov	r31, r0
			if( abs(ACCEL_Y_H) > abs(ACCEL_Z_H) &&  abs(ACCEL_Y_H) > abs(ACCEL_X_H)){
				
				send_char('Y');
				
				//GREEN
				TCD0.CCBL = ~0x8D;
 510:	0f 2e       	mov	r0, r31
 512:	f2 e7       	ldi	r31, 0x72	; 114
 514:	8f 2e       	mov	r8, r31
 516:	f0 2d       	mov	r31, r0
				TCD0.CCBH = ~0x8D;
				
				//RED
				TCD0.CCAL = ~0x3C;
 518:	0f 2e       	mov	r0, r31
 51a:	f3 ec       	ldi	r31, 0xC3	; 195
 51c:	5f 2e       	mov	r5, r31
 51e:	f0 2d       	mov	r31, r0
				TCD0.CCAH = ~0x00;
				
				//BLUE
				TCD0.CCCL = ~0x0D;
 520:	0f 2e       	mov	r0, r31
 522:	f2 ef       	ldi	r31, 0xF2	; 242
 524:	6f 2e       	mov	r6, r31
 526:	f0 2d       	mov	r31, r0
				//RED
				
				send_char('X');
				
				//RED
				TCD0.CCAL = ~0xC2;
 528:	0f 2e       	mov	r0, r31
 52a:	fd e3       	ldi	r31, 0x3D	; 61
 52c:	9f 2e       	mov	r9, r31
 52e:	f0 2d       	mov	r31, r0
				TCD0.CCAH = ~0xC2;
				
				//GREEN
				TCD0.CCBL = ~0x1F;
 530:	0f 2e       	mov	r0, r31
 532:	f0 ee       	ldi	r31, 0xE0	; 224
 534:	af 2e       	mov	r10, r31
 536:	f0 2d       	mov	r31, r0
	volatile int8_t ACCEL_X_H, ACCEL_X_L, ACCEL_Y_H, ACCEL_Y_L, ACCEL_Z_H, ACCEL_Z_L;
	volatile uint8_t GYRO_X_H, GYRO_X_L, GYRO_Y_H, GYRO_Y_L, GYRO_Z_H, GYRO_Z_L;
	
    while(1){	
		
		if(gyroDataReady == 0x01){
 538:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 53c:	81 30       	cpi	r24, 0x01	; 1
 53e:	d9 f4       	brne	.+54     	; 0x576 <main+0xdc>
			GYRO_X_H = gyroRead(OUT_X_H_G);
 540:	89 e2       	ldi	r24, 0x29	; 41
 542:	0e 94 a1 01 	call	0x342	; 0x342 <gyroRead>
 546:	8f 83       	std	Y+7, r24	; 0x07
			GYRO_X_L = gyroRead(OUT_X_L_G);
 548:	88 e2       	ldi	r24, 0x28	; 40
 54a:	0e 94 a1 01 	call	0x342	; 0x342 <gyroRead>
 54e:	88 87       	std	Y+8, r24	; 0x08
			GYRO_Y_H = gyroRead(OUT_Y_H_G);
 550:	8b e2       	ldi	r24, 0x2B	; 43
 552:	0e 94 a1 01 	call	0x342	; 0x342 <gyroRead>
 556:	89 87       	std	Y+9, r24	; 0x09
			GYRO_Y_L = gyroRead(OUT_Y_L_G);
 558:	8a e2       	ldi	r24, 0x2A	; 42
 55a:	0e 94 a1 01 	call	0x342	; 0x342 <gyroRead>
 55e:	8a 87       	std	Y+10, r24	; 0x0a
			GYRO_Z_H = gyroRead(OUT_Z_H_G);
 560:	8d e2       	ldi	r24, 0x2D	; 45
 562:	0e 94 a1 01 	call	0x342	; 0x342 <gyroRead>
 566:	8b 87       	std	Y+11, r24	; 0x0b
			GYRO_Z_L = gyroRead(OUT_Z_L_G);
 568:	8c e2       	ldi	r24, 0x2C	; 44
 56a:	0e 94 a1 01 	call	0x342	; 0x342 <gyroRead>
 56e:	8c 87       	std	Y+12, r24	; 0x0c
			
			gyroDataReady = 0x00;
 570:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
 574:	e1 cf       	rjmp	.-62     	; 0x538 <main+0x9e>
		}
		
		else if(accelDataReady == 0x01){
 576:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <accelDataReady>
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	e9 f6       	brne	.-70     	; 0x538 <main+0x9e>

			ACCEL_X_H = accRead(OUT_X_H_A);
 57e:	89 e2       	ldi	r24, 0x29	; 41
 580:	0e 94 68 01 	call	0x2d0	; 0x2d0 <accRead>
 584:	89 83       	std	Y+1, r24	; 0x01
			ACCEL_X_L = accRead(OUT_X_L_A);
 586:	88 e2       	ldi	r24, 0x28	; 40
 588:	0e 94 68 01 	call	0x2d0	; 0x2d0 <accRead>
 58c:	8a 83       	std	Y+2, r24	; 0x02
			ACCEL_Y_H = accRead(OUT_Y_H_A);
 58e:	8b e2       	ldi	r24, 0x2B	; 43
 590:	0e 94 68 01 	call	0x2d0	; 0x2d0 <accRead>
 594:	8b 83       	std	Y+3, r24	; 0x03
			ACCEL_Y_L = accRead(OUT_Y_L_A);
 596:	8a e2       	ldi	r24, 0x2A	; 42
 598:	0e 94 68 01 	call	0x2d0	; 0x2d0 <accRead>
 59c:	8c 83       	std	Y+4, r24	; 0x04
			ACCEL_Z_H = accRead(OUT_Z_H_A);
 59e:	8d e2       	ldi	r24, 0x2D	; 45
 5a0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <accRead>
 5a4:	8d 83       	std	Y+5, r24	; 0x05
			ACCEL_Z_L = accRead(OUT_Z_L_A);
 5a6:	8c e2       	ldi	r24, 0x2C	; 44
 5a8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <accRead>
 5ac:	8e 83       	std	Y+6, r24	; 0x06
			
		

			if( abs(ACCEL_X_H) > abs(ACCEL_Z_H) && abs(ACCEL_X_H)  > abs(ACCEL_Y_H)){
 5ae:	29 81       	ldd	r18, Y+1	; 0x01
 5b0:	8d 81       	ldd	r24, Y+5	; 0x05
 5b2:	02 2e       	mov	r0, r18
 5b4:	00 0c       	add	r0, r0
 5b6:	33 0b       	sbc	r19, r19
 5b8:	33 23       	and	r19, r19
 5ba:	1c f4       	brge	.+6      	; 0x5c2 <main+0x128>
 5bc:	31 95       	neg	r19
 5be:	21 95       	neg	r18
 5c0:	31 09       	sbc	r19, r1
 5c2:	08 2e       	mov	r0, r24
 5c4:	00 0c       	add	r0, r0
 5c6:	99 0b       	sbc	r25, r25
 5c8:	99 23       	and	r25, r25
 5ca:	1c f4       	brge	.+6      	; 0x5d2 <main+0x138>
 5cc:	91 95       	neg	r25
 5ce:	81 95       	neg	r24
 5d0:	91 09       	sbc	r25, r1
 5d2:	82 17       	cp	r24, r18
 5d4:	93 07       	cpc	r25, r19
 5d6:	fc f4       	brge	.+62     	; 0x616 <main+0x17c>
 5d8:	29 81       	ldd	r18, Y+1	; 0x01
 5da:	8b 81       	ldd	r24, Y+3	; 0x03
 5dc:	02 2e       	mov	r0, r18
 5de:	00 0c       	add	r0, r0
 5e0:	33 0b       	sbc	r19, r19
 5e2:	33 23       	and	r19, r19
 5e4:	1c f4       	brge	.+6      	; 0x5ec <main+0x152>
 5e6:	31 95       	neg	r19
 5e8:	21 95       	neg	r18
 5ea:	31 09       	sbc	r19, r1
 5ec:	08 2e       	mov	r0, r24
 5ee:	00 0c       	add	r0, r0
 5f0:	99 0b       	sbc	r25, r25
 5f2:	99 23       	and	r25, r25
 5f4:	1c f4       	brge	.+6      	; 0x5fc <main+0x162>
 5f6:	91 95       	neg	r25
 5f8:	81 95       	neg	r24
 5fa:	91 09       	sbc	r25, r1
 5fc:	82 17       	cp	r24, r18
 5fe:	93 07       	cpc	r25, r19
 600:	54 f4       	brge	.+20     	; 0x616 <main+0x17c>
				
				//RED
				
				send_char('X');
 602:	88 e5       	ldi	r24, 0x58	; 88
 604:	0e 94 01 02 	call	0x402	; 0x402 <send_char>
				
				//RED
				TCD0.CCAL = ~0xC2;
 608:	f8 01       	movw	r30, r16
 60a:	90 a6       	std	Z+40, r9	; 0x28
				TCD0.CCAH = ~0xC2;
 60c:	91 a6       	std	Z+41, r9	; 0x29
				
				//GREEN
				TCD0.CCBL = ~0x1F;
 60e:	a2 a6       	std	Z+42, r10	; 0x2a
				TCD0.CCBH = ~0x00;
 610:	f3 a6       	std	Z+43, r15	; 0x2b
				
				//BLUE
				TCD0.CCCL = ~0x1F;
 612:	a4 a6       	std	Z+44, r10	; 0x2c
				TCD0.CCCH = ~0x00;	
 614:	f5 a6       	std	Z+45, r15	; 0x2d
					
			}
			
			if( abs(ACCEL_Y_H) > abs(ACCEL_Z_H) &&  abs(ACCEL_Y_H) > abs(ACCEL_X_H)){
 616:	2b 81       	ldd	r18, Y+3	; 0x03
 618:	8d 81       	ldd	r24, Y+5	; 0x05
 61a:	02 2e       	mov	r0, r18
 61c:	00 0c       	add	r0, r0
 61e:	33 0b       	sbc	r19, r19
 620:	33 23       	and	r19, r19
 622:	1c f4       	brge	.+6      	; 0x62a <main+0x190>
 624:	31 95       	neg	r19
 626:	21 95       	neg	r18
 628:	31 09       	sbc	r19, r1
 62a:	08 2e       	mov	r0, r24
 62c:	00 0c       	add	r0, r0
 62e:	99 0b       	sbc	r25, r25
 630:	99 23       	and	r25, r25
 632:	1c f4       	brge	.+6      	; 0x63a <main+0x1a0>
 634:	91 95       	neg	r25
 636:	81 95       	neg	r24
 638:	91 09       	sbc	r25, r1
 63a:	82 17       	cp	r24, r18
 63c:	93 07       	cpc	r25, r19
 63e:	fc f4       	brge	.+62     	; 0x67e <main+0x1e4>
 640:	2b 81       	ldd	r18, Y+3	; 0x03
 642:	89 81       	ldd	r24, Y+1	; 0x01
 644:	02 2e       	mov	r0, r18
 646:	00 0c       	add	r0, r0
 648:	33 0b       	sbc	r19, r19
 64a:	33 23       	and	r19, r19
 64c:	1c f4       	brge	.+6      	; 0x654 <main+0x1ba>
 64e:	31 95       	neg	r19
 650:	21 95       	neg	r18
 652:	31 09       	sbc	r19, r1
 654:	08 2e       	mov	r0, r24
 656:	00 0c       	add	r0, r0
 658:	99 0b       	sbc	r25, r25
 65a:	99 23       	and	r25, r25
 65c:	1c f4       	brge	.+6      	; 0x664 <main+0x1ca>
 65e:	91 95       	neg	r25
 660:	81 95       	neg	r24
 662:	91 09       	sbc	r25, r1
 664:	82 17       	cp	r24, r18
 666:	93 07       	cpc	r25, r19
 668:	54 f4       	brge	.+20     	; 0x67e <main+0x1e4>
				
				send_char('Y');
 66a:	89 e5       	ldi	r24, 0x59	; 89
 66c:	0e 94 01 02 	call	0x402	; 0x402 <send_char>
				
				//GREEN
				TCD0.CCBL = ~0x8D;
 670:	f8 01       	movw	r30, r16
 672:	82 a6       	std	Z+42, r8	; 0x2a
				TCD0.CCBH = ~0x8D;
 674:	83 a6       	std	Z+43, r8	; 0x2b
				
				//RED
				TCD0.CCAL = ~0x3C;
 676:	50 a6       	std	Z+40, r5	; 0x28
				TCD0.CCAH = ~0x00;
 678:	f1 a6       	std	Z+41, r15	; 0x29
				
				//BLUE
				TCD0.CCCL = ~0x0D;
 67a:	64 a6       	std	Z+44, r6	; 0x2c
				TCD0.CCCH = ~0x00;
 67c:	f5 a6       	std	Z+45, r15	; 0x2d
				
			}
			
			if( abs(ACCEL_Z_H) > abs(ACCEL_Y_H) && abs(ACCEL_Z_H) > abs(ACCEL_X_H)){
 67e:	2d 81       	ldd	r18, Y+5	; 0x05
 680:	8b 81       	ldd	r24, Y+3	; 0x03
 682:	02 2e       	mov	r0, r18
 684:	00 0c       	add	r0, r0
 686:	33 0b       	sbc	r19, r19
 688:	33 23       	and	r19, r19
 68a:	1c f4       	brge	.+6      	; 0x692 <main+0x1f8>
 68c:	31 95       	neg	r19
 68e:	21 95       	neg	r18
 690:	31 09       	sbc	r19, r1
 692:	08 2e       	mov	r0, r24
 694:	00 0c       	add	r0, r0
 696:	99 0b       	sbc	r25, r25
 698:	99 23       	and	r25, r25
 69a:	1c f4       	brge	.+6      	; 0x6a2 <main+0x208>
 69c:	91 95       	neg	r25
 69e:	81 95       	neg	r24
 6a0:	91 09       	sbc	r25, r1
 6a2:	82 17       	cp	r24, r18
 6a4:	93 07       	cpc	r25, r19
 6a6:	04 f5       	brge	.+64     	; 0x6e8 <main+0x24e>
 6a8:	2d 81       	ldd	r18, Y+5	; 0x05
 6aa:	89 81       	ldd	r24, Y+1	; 0x01
 6ac:	02 2e       	mov	r0, r18
 6ae:	00 0c       	add	r0, r0
 6b0:	33 0b       	sbc	r19, r19
 6b2:	33 23       	and	r19, r19
 6b4:	1c f4       	brge	.+6      	; 0x6bc <main+0x222>
 6b6:	31 95       	neg	r19
 6b8:	21 95       	neg	r18
 6ba:	31 09       	sbc	r19, r1
 6bc:	08 2e       	mov	r0, r24
 6be:	00 0c       	add	r0, r0
 6c0:	99 0b       	sbc	r25, r25
 6c2:	99 23       	and	r25, r25
 6c4:	1c f4       	brge	.+6      	; 0x6cc <main+0x232>
 6c6:	91 95       	neg	r25
 6c8:	81 95       	neg	r24
 6ca:	91 09       	sbc	r25, r1
 6cc:	82 17       	cp	r24, r18
 6ce:	93 07       	cpc	r25, r19
 6d0:	5c f4       	brge	.+22     	; 0x6e8 <main+0x24e>
				
				send_char('Z');	
 6d2:	8a e5       	ldi	r24, 0x5A	; 90
 6d4:	0e 94 01 02 	call	0x402	; 0x402 <send_char>
				
				//BLUE
				TCD0.CCCL = ~0xA5;
 6d8:	8a e5       	ldi	r24, 0x5A	; 90
 6da:	f8 01       	movw	r30, r16
 6dc:	84 a7       	std	Z+44, r24	; 0x2c
				TCD0.CCCH = ~0xA5;
 6de:	85 a7       	std	Z+45, r24	; 0x2d
				
				//GREEN
				TCD0.CCBL = ~0x21;
 6e0:	42 a6       	std	Z+42, r4	; 0x2a
				TCD0.CCBH = ~0x00;
 6e2:	f3 a6       	std	Z+43, r15	; 0x2b
				
				//RED
				TCD0.CCAL = ~0x00;
 6e4:	f0 a6       	std	Z+40, r15	; 0x28
				TCD0.CCAH = ~0x00;
 6e6:	f1 a6       	std	Z+41, r15	; 0x29
				
			}
			
			
			if( abs(ACCEL_X_H) > 0x00 && abs(ACCEL_Z_H)  > 0x00 && abs(ACCEL_Y_H)  == 0x00) {
 6e8:	89 81       	ldd	r24, Y+1	; 0x01
 6ea:	08 2e       	mov	r0, r24
 6ec:	00 0c       	add	r0, r0
 6ee:	99 0b       	sbc	r25, r25
 6f0:	99 23       	and	r25, r25
 6f2:	1c f4       	brge	.+6      	; 0x6fa <main+0x260>
 6f4:	91 95       	neg	r25
 6f6:	81 95       	neg	r24
 6f8:	91 09       	sbc	r25, r1
 6fa:	18 16       	cp	r1, r24
 6fc:	19 06       	cpc	r1, r25
 6fe:	b4 f4       	brge	.+44     	; 0x72c <main+0x292>
 700:	8d 81       	ldd	r24, Y+5	; 0x05
 702:	08 2e       	mov	r0, r24
 704:	00 0c       	add	r0, r0
 706:	99 0b       	sbc	r25, r25
 708:	99 23       	and	r25, r25
 70a:	1c f4       	brge	.+6      	; 0x712 <main+0x278>
 70c:	91 95       	neg	r25
 70e:	81 95       	neg	r24
 710:	91 09       	sbc	r25, r1
 712:	18 16       	cp	r1, r24
 714:	19 06       	cpc	r1, r25
 716:	54 f4       	brge	.+20     	; 0x72c <main+0x292>
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	81 11       	cpse	r24, r1
 71c:	07 c0       	rjmp	.+14     	; 0x72c <main+0x292>
				
				//purple
				
				//RED
				TCD0.CCAL = ~0x8A;
 71e:	f8 01       	movw	r30, r16
 720:	b0 a6       	std	Z+40, r11	; 0x28
				TCD0.CCAH = ~0x8A;
 722:	b1 a6       	std	Z+41, r11	; 0x29
				
				//GREEN
				TCD0.CCBL = ~0x2C;
 724:	72 a6       	std	Z+42, r7	; 0x2a
				TCD0.CCBH = BLACK;
 726:	f3 a6       	std	Z+43, r15	; 0x2b
				
				//BLUE
				TCD0.CCCL = ~0x9A;
 728:	c4 a6       	std	Z+44, r12	; 0x2c
				TCD0.CCCH = ~0x9A;
 72a:	c5 a6       	std	Z+45, r12	; 0x2d
				
			}
			
			if( abs(ACCEL_X_H) > 0x00 && abs(ACCEL_Y_H)  > 0x00 && abs(ACCEL_Z_H)  == 0x00) {
 72c:	89 81       	ldd	r24, Y+1	; 0x01
 72e:	08 2e       	mov	r0, r24
 730:	00 0c       	add	r0, r0
 732:	99 0b       	sbc	r25, r25
 734:	99 23       	and	r25, r25
 736:	1c f4       	brge	.+6      	; 0x73e <main+0x2a4>
 738:	91 95       	neg	r25
 73a:	81 95       	neg	r24
 73c:	91 09       	sbc	r25, r1
 73e:	18 16       	cp	r1, r24
 740:	19 06       	cpc	r1, r25
 742:	b4 f4       	brge	.+44     	; 0x770 <main+0x2d6>
 744:	8b 81       	ldd	r24, Y+3	; 0x03
 746:	08 2e       	mov	r0, r24
 748:	00 0c       	add	r0, r0
 74a:	99 0b       	sbc	r25, r25
 74c:	99 23       	and	r25, r25
 74e:	1c f4       	brge	.+6      	; 0x756 <main+0x2bc>
 750:	91 95       	neg	r25
 752:	81 95       	neg	r24
 754:	91 09       	sbc	r25, r1
 756:	18 16       	cp	r1, r24
 758:	19 06       	cpc	r1, r25
 75a:	54 f4       	brge	.+20     	; 0x770 <main+0x2d6>
 75c:	8d 81       	ldd	r24, Y+5	; 0x05
 75e:	81 11       	cpse	r24, r1
 760:	07 c0       	rjmp	.+14     	; 0x770 <main+0x2d6>
				
				//mystery color yellow?
				
				//RED
				TCD0.CCAL = DUTY_CYCLE;
 762:	f8 01       	movw	r30, r16
 764:	e0 a6       	std	Z+40, r14	; 0x28
				TCD0.CCAH = DUTY_CYCLE;
 766:	e1 a6       	std	Z+41, r14	; 0x29
				
				//GREEN
				TCD0.CCBL = DUTY_CYCLE;
 768:	e2 a6       	std	Z+42, r14	; 0x2a
				TCD0.CCBH = DUTY_CYCLE;
 76a:	e3 a6       	std	Z+43, r14	; 0x2b
				
				//BLUE
				TCD0.CCCL = BLACK;
 76c:	f4 a6       	std	Z+44, r15	; 0x2c
				TCD0.CCCH = BLACK;
 76e:	f5 a6       	std	Z+45, r15	; 0x2d
				
			}
			
			
			if( abs(ACCEL_Y_H) > 0x00 && abs(ACCEL_Z_H)  > 0x00 && abs(ACCEL_X_H)  == 0x00) {
 770:	8b 81       	ldd	r24, Y+3	; 0x03
 772:	08 2e       	mov	r0, r24
 774:	00 0c       	add	r0, r0
 776:	99 0b       	sbc	r25, r25
 778:	99 23       	and	r25, r25
 77a:	1c f4       	brge	.+6      	; 0x782 <main+0x2e8>
 77c:	91 95       	neg	r25
 77e:	81 95       	neg	r24
 780:	91 09       	sbc	r25, r1
 782:	18 16       	cp	r1, r24
 784:	19 06       	cpc	r1, r25
 786:	b4 f4       	brge	.+44     	; 0x7b4 <main+0x31a>
 788:	8d 81       	ldd	r24, Y+5	; 0x05
 78a:	08 2e       	mov	r0, r24
 78c:	00 0c       	add	r0, r0
 78e:	99 0b       	sbc	r25, r25
 790:	99 23       	and	r25, r25
 792:	1c f4       	brge	.+6      	; 0x79a <main+0x300>
 794:	91 95       	neg	r25
 796:	81 95       	neg	r24
 798:	91 09       	sbc	r25, r1
 79a:	18 16       	cp	r1, r24
 79c:	19 06       	cpc	r1, r25
 79e:	54 f4       	brge	.+20     	; 0x7b4 <main+0x31a>
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	81 11       	cpse	r24, r1
 7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <main+0x31a>
				
				//CYAN
				
				//RED
				TCD0.CCAL = BLACK;
 7a6:	f8 01       	movw	r30, r16
 7a8:	f0 a6       	std	Z+40, r15	; 0x28
				TCD0.CCAH = BLACK;
 7aa:	f1 a6       	std	Z+41, r15	; 0x29
				
				//GREEN
				TCD0.CCBL = ~0xA8;
 7ac:	d2 a6       	std	Z+42, r13	; 0x2a
				TCD0.CCBH = ~0xA8;
 7ae:	d3 a6       	std	Z+43, r13	; 0x2b
				
				//BLUE
				TCD0.CCCL = ~0xA8;
 7b0:	d4 a6       	std	Z+44, r13	; 0x2c
				TCD0.CCCH = ~0xA8;
 7b2:	d5 a6       	std	Z+45, r13	; 0x2d
				
				
			
	
			
			accelDataReady = 0x00;
 7b4:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <accelDataReady>
 7b8:	bf ce       	rjmp	.-642    	; 0x538 <main+0x9e>

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
