
Quiz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000664  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000006d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802000  00802000  000006d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ca8  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d49  00000000  00000000  00005480  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000844  00000000  00000000  000091c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00009a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003407  00000000  00000000  00009bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000395  00000000  00000000  0000cfe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000d378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_66>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a2 30       	cpi	r26, 0x02	; 2
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 4e 02 	call	0x49c	; 0x49c <main>
 228:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <CLK_init>:
volatile uint8_t gyroDataReady = 0x00;


void CLK_init(void) {
	
	OSC.CTRL = 0x02;							//32 Mhz internal oscillator enable
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));		//wait for 32 MHz oscillator ready flag
 236:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 23a:	81 ff       	sbrs	r24, 1
 23c:	fc cf       	rjmp	.-8      	; 0x236 <CLK_init+0x6>
	CPU_CCP = 0xD8; 							//IOREG
 23e:	88 ed       	ldi	r24, 0xD8	; 216
 240:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01; 							//bit 0 is 32 MHz internal oscillator
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 248:	08 95       	ret

0000024a <SPI_init>:
}


void SPI_init()
{
	PORTA.DIR = 0xF8;		//Protocol Sel, others
 24a:	e0 e0       	ldi	r30, 0x00	; 0
 24c:	f6 e0       	ldi	r31, 0x06	; 6
 24e:	88 ef       	ldi	r24, 0xF8	; 248
 250:	80 83       	st	Z, r24
	PORTA.OUT = 0x00;		//Protocol sel SPI
 252:	14 82       	std	Z+4, r1	; 0x04
	PORTF.DIR = 0xBF;		//SSA, MOSI, SCK, MISO as input
 254:	e0 ea       	ldi	r30, 0xA0	; 160
 256:	f6 e0       	ldi	r31, 0x06	; 6
 258:	8f eb       	ldi	r24, 0xBF	; 191
 25a:	80 83       	st	Z, r24
	PORTF.OUT = 0x18;		//SSA & SSG
 25c:	88 e1       	ldi	r24, 0x18	; 24
 25e:	84 83       	std	Z+4, r24	; 0x04
	PORTC.DIR = 0x00;		//data direction
 260:	10 92 40 06 	sts	0x0640, r1	; 0x800640 <__TEXT_REGION_LENGTH__+0x700640>
	
	SPIF.CTRL = SPI_ENABLE_bm |				//enable, data order msb
 264:	80 e5       	ldi	r24, 0x50	; 80
 266:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x700bc0>
 26a:	08 95       	ret

0000026c <USART_init>:
				
}

void USART_init(void) {
	
	PORTD.DIRSET = 0xF8;	//set TxD and RBG LED as output
 26c:	e0 e6       	ldi	r30, 0x60	; 96
 26e:	f6 e0       	ldi	r31, 0x06	; 6
 270:	88 ef       	ldi	r24, 0xF8	; 248
 272:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0xF8;	//set TxD to high, LED to off
 274:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRCLR = 0x04;	//set RxD pin as input
 276:	84 e0       	ldi	r24, 0x04	; 4
 278:	82 83       	std	Z+2, r24	; 0x02
	
	//PortQ bits 1 and 3 enable and select
	PORTQ.DIRSET = 0x0A;	//PortD bits 2 and 3 serial pins
 27a:	e0 ec       	ldi	r30, 0xC0	; 192
 27c:	f7 e0       	ldi	r31, 0x07	; 7
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	81 83       	std	Z+1, r24	; 0x01
	PORTQ.OUTCLR = 0x0A;	//connected to the USB lines
 282:	86 83       	std	Z+6, r24	; 0x06
	
	USARTD0.BAUDCTRLA = (BSel & 0xFF);			//sets BAUDCTRLA to lower 8 bits of BSel
 284:	e0 ea       	ldi	r30, 0xA0	; 160
 286:	f9 e0       	ldi	r31, 0x09	; 9
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = ((BScale << 4) & 0xF0) | ((BSel >> 8) & 0x0F);
 28c:	17 82       	std	Z+7, r1	; 0x07
	USARTD0.CTRLB = 0x18;						//RXEN/TEXEN
 28e:	88 e1       	ldi	r24, 0x18	; 24
 290:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0x0B;						//asynchronous/no parity/1 stop bit/8 data
 292:	8b e0       	ldi	r24, 0x0B	; 11
 294:	85 83       	std	Z+5, r24	; 0x05
 296:	08 95       	ret

00000298 <spiWrite>:
}

uint8_t spiWrite(uint8_t data) {
			
		SPIF.DATA = data;					//enable SPI
 298:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
		while(!(SPIF.STATUS & 0x80));		//wait for serial transfer
 29c:	80 91 c2 0b 	lds	r24, 0x0BC2	; 0x800bc2 <__TEXT_REGION_LENGTH__+0x700bc2>
 2a0:	87 ff       	sbrs	r24, 7
 2a2:	fc cf       	rjmp	.-8      	; 0x29c <spiWrite+0x4>
		
		return SPIF.DATA;
 2a4:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
			
}
 2a8:	08 95       	ret

000002aa <spiRead>:

uint8_t spiRead() {
	
	return spiWrite(0xFF);
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	0c 94 4c 01 	jmp	0x298	; 0x298 <spiWrite>

000002b0 <accRead>:
	
}

uint8_t accRead(uint8_t reg){
 2b0:	ff 92       	push	r15
 2b2:	0f 93       	push	r16
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	1f 92       	push	r1
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t read;
	
	PORTF.OUTCLR = 0x08;		//SSA clear
 2c0:	00 ea       	ldi	r16, 0xA0	; 160
 2c2:	16 e0       	ldi	r17, 0x06	; 6
 2c4:	98 e0       	ldi	r25, 0x08	; 8
 2c6:	f9 2e       	mov	r15, r25
 2c8:	f8 01       	movw	r30, r16
 2ca:	f6 82       	std	Z+6, r15	; 0x06
	PORTF.OUTSET = 0x04;		//Sensor sel acc
 2cc:	94 e0       	ldi	r25, 0x04	; 4
 2ce:	95 83       	std	Z+5, r25	; 0x05
	
	//RW, MS, AD[5:0], D[7:0]
	spiWrite(lsm330_spiRead_strobe | (reg & 0x3F));
 2d0:	8f 73       	andi	r24, 0x3F	; 63
 2d2:	80 68       	ori	r24, 0x80	; 128
 2d4:	0e 94 4c 01 	call	0x298	; 0x298 <spiWrite>
	read = spiRead();
 2d8:	0e 94 55 01 	call	0x2aa	; 0x2aa <spiRead>
 2dc:	89 83       	std	Y+1, r24	; 0x01
	
	PORTF.OUTSET = 0x08;		//SSA end transmission
 2de:	f8 01       	movw	r30, r16
 2e0:	f5 82       	std	Z+5, r15	; 0x05
	
	return read;
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	08 95       	ret

000002f2 <accWrite>:


void accWrite(uint8_t reg, uint8_t data) {
 2f2:	ef 92       	push	r14
 2f4:	ff 92       	push	r15
 2f6:	1f 93       	push	r17
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	1f 92       	push	r1
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
	
	PORTF.OUTCLR = 0x08;		//SSA clear
 302:	90 ea       	ldi	r25, 0xA0	; 160
 304:	e9 2e       	mov	r14, r25
 306:	96 e0       	ldi	r25, 0x06	; 6
 308:	f9 2e       	mov	r15, r25
 30a:	18 e0       	ldi	r17, 0x08	; 8
 30c:	f7 01       	movw	r30, r14
 30e:	16 83       	std	Z+6, r17	; 0x06
	PORTF.OUTSET = 0x04;		//Sensor sel acc
 310:	94 e0       	ldi	r25, 0x04	; 4
 312:	95 83       	std	Z+5, r25	; 0x05
	
	//RW, MS, AD[5:0], D[7:0]
	spiWrite(lsm330_spiWrite_strobe | (reg & 0x3F));
 314:	8f 73       	andi	r24, 0x3F	; 63
 316:	69 83       	std	Y+1, r22	; 0x01
 318:	0e 94 4c 01 	call	0x298	; 0x298 <spiWrite>
	spiWrite(data);
 31c:	69 81       	ldd	r22, Y+1	; 0x01
 31e:	86 2f       	mov	r24, r22
 320:	0e 94 4c 01 	call	0x298	; 0x298 <spiWrite>
	
	PORTF.OUTSET = 0x08;		//SSA end transmission
 324:	f7 01       	movw	r30, r14
 326:	15 83       	std	Z+5, r17	; 0x05
	

}
 328:	0f 90       	pop	r0
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	08 95       	ret

00000336 <gyroRead>:

uint8_t gyroRead(uint8_t reg) {
 336:	ff 92       	push	r15
 338:	0f 93       	push	r16
 33a:	1f 93       	push	r17
 33c:	cf 93       	push	r28
 33e:	df 93       	push	r29
 340:	1f 92       	push	r1
 342:	cd b7       	in	r28, 0x3d	; 61
 344:	de b7       	in	r29, 0x3e	; 62
	
	volatile uint8_t read;
	
	PORTF.OUTCLR = 0x10;		//SSG
 346:	00 ea       	ldi	r16, 0xA0	; 160
 348:	16 e0       	ldi	r17, 0x06	; 6
 34a:	90 e1       	ldi	r25, 0x10	; 16
 34c:	f9 2e       	mov	r15, r25
 34e:	f8 01       	movw	r30, r16
 350:	f6 82       	std	Z+6, r15	; 0x06
	PORTF.OUTCLR = 0x04;		//Sensor sel gyro
 352:	94 e0       	ldi	r25, 0x04	; 4
 354:	96 83       	std	Z+6, r25	; 0x06
	
	
	//RW, MS, AD[5:0], D[7:0]
	spiWrite(lsm330_spiRead_strobe | (reg & 0x3F));
 356:	8f 73       	andi	r24, 0x3F	; 63
 358:	80 68       	ori	r24, 0x80	; 128
 35a:	0e 94 4c 01 	call	0x298	; 0x298 <spiWrite>
	read = spiRead();
 35e:	0e 94 55 01 	call	0x2aa	; 0x2aa <spiRead>
 362:	89 83       	std	Y+1, r24	; 0x01
	
	PORTF.OUTSET = 0x10;		//SSG end transmission
 364:	f8 01       	movw	r30, r16
 366:	f5 82       	std	Z+5, r15	; 0x05
	
	return read;
 368:	89 81       	ldd	r24, Y+1	; 0x01

}
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	08 95       	ret

00000378 <gyroWrite>:

void gyroWrite(uint8_t reg, uint8_t data) {
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	1f 93       	push	r17
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	1f 92       	push	r1
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
	
	PORTF.OUTCLR = 0x10;		//SSG
 388:	90 ea       	ldi	r25, 0xA0	; 160
 38a:	e9 2e       	mov	r14, r25
 38c:	96 e0       	ldi	r25, 0x06	; 6
 38e:	f9 2e       	mov	r15, r25
 390:	10 e1       	ldi	r17, 0x10	; 16
 392:	f7 01       	movw	r30, r14
 394:	16 83       	std	Z+6, r17	; 0x06
	PORTF.OUTCLR = 0x04;		//Sensor sel gyro
 396:	94 e0       	ldi	r25, 0x04	; 4
 398:	96 83       	std	Z+6, r25	; 0x06
	
	//RW, MS, AD[5:0], D[7:0]
	spiWrite(lsm330_spiWrite_strobe | (reg & 0x3F));
 39a:	8f 73       	andi	r24, 0x3F	; 63
 39c:	69 83       	std	Y+1, r22	; 0x01
 39e:	0e 94 4c 01 	call	0x298	; 0x298 <spiWrite>
	spiWrite(data);
 3a2:	69 81       	ldd	r22, Y+1	; 0x01
 3a4:	86 2f       	mov	r24, r22
 3a6:	0e 94 4c 01 	call	0x298	; 0x298 <spiWrite>
	
	PORTF.OUTSET = 0x10;		//SSG end transmission
 3aa:	f7 01       	movw	r30, r14
 3ac:	15 83       	std	Z+5, r17	; 0x05

}
 3ae:	0f 90       	pop	r0
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	ff 90       	pop	r15
 3b8:	ef 90       	pop	r14
 3ba:	08 95       	ret

000003bc <accel_init>:
	Enable falling edge interrupt on PORTC pin 7
	Use CTRL_REG4_A to route DRDY signal to INT1_A and enable INT1 with rising edge
	Use CTRL_REG5_A to configure highest output rate and enable XYZ
	*/
	
	PORTC.INTCTRL = 0x01;		//interrupt 0 low level
 3bc:	e0 e4       	ldi	r30, 0x40	; 64
 3be:	f6 e0       	ldi	r31, 0x06	; 6
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	81 87       	std	Z+9, r24	; 0x09
	PORTC.INT0MASK = 0x80;		//Pin 7 interrupt
 3c4:	80 e8       	ldi	r24, 0x80	; 128
 3c6:	82 87       	std	Z+10, r24	; 0x0a
	PORTC.PIN7CTRL = 0x02;		//sense falling edge
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	87 8b       	std	Z+23, r24	; 0x17
	
	
	accWrite(CTRL_REG4_A, (CTRL_REG4_A_DR_EN |		//route DRDY to INT1_A and enable INT1 rising edge
 3cc:	68 ec       	ldi	r22, 0xC8	; 200
 3ce:	83 e2       	ldi	r24, 0x23	; 35
 3d0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <accWrite>
							CTRL_REG4_A_IEA |		
							CTRL_REG4_A_INT1_EN));	
													
			
	accWrite(CTRL_REG5_A, (CTRL_REG5_A_ODR3 |		//configure 1600Hz output rate and enable XYZ
 3d4:	67 e9       	ldi	r22, 0x97	; 151
 3d6:	80 e2       	ldi	r24, 0x20	; 32
 3d8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <accWrite>

000003dc <gyro_init>:
	Leave BW[1:0] bit 00 and set PD bit for normal mode
	Set I2_DRDY bit in CTRL_REG3_G (signals when gyro is ready using INT2_G pin PA1)
	Choose 2000 dps for full scale selection FS[1:0] in CTRL_REG4_G
	*/
	
	PORTA.OUT = 0x08;				//gyro enable
 3dc:	e0 e0       	ldi	r30, 0x00	; 0
 3de:	f6 e0       	ldi	r31, 0x06	; 6
 3e0:	88 e0       	ldi	r24, 0x08	; 8
 3e2:	84 83       	std	Z+4, r24	; 0x04
	PORTA.INTCTRL = 0x01;			//interrupt 0 low level
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	81 87       	std	Z+9, r24	; 0x09
	PORTA.INT0MASK = 0x02;			//Pin 1 interrupt
 3e8:	92 e0       	ldi	r25, 0x02	; 2
 3ea:	92 87       	std	Z+10, r25	; 0x0a
	PORTA.PIN7CTRL = 0x01;			//sense rising edge
 3ec:	87 8b       	std	Z+23, r24	; 0x17

	
	gyroWrite(CTRL_REG1_G, (CTRL_REG1_G_DR1 |		//highest 100Hz, enable XYZ, normal mode
 3ee:	6f ec       	ldi	r22, 0xCF	; 207
 3f0:	80 e2       	ldi	r24, 0x20	; 32
 3f2:	0e 94 bc 01 	call	0x378	; 0x378 <gyroWrite>
							CTRL_REG1_G_ZEN |
							CTRL_REG1_G_YEN |
							CTRL_REG1_G_XEN));	
													
	
	gyroWrite(CTRL_REG3_G, CTRL_REG3_G_I2_DRDY);	//set I2_DRDY
 3f6:	68 e0       	ldi	r22, 0x08	; 8
 3f8:	82 e2       	ldi	r24, 0x22	; 34
 3fa:	0e 94 bc 01 	call	0x378	; 0x378 <gyroWrite>
	
	
	gyroWrite(CTRL_REG4_G, (CTRL_REG4_G_FS1 |
 3fe:	60 e3       	ldi	r22, 0x30	; 48
 400:	83 e2       	ldi	r24, 0x23	; 35
 402:	0c 94 bc 01 	jmp	0x378	; 0x378 <gyroWrite>

00000406 <send_char>:


void send_char(char c)
{
	
	while( !(USARTD0.STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
 406:	90 91 a1 09 	lds	r25, 0x09A1	; 0x8009a1 <__TEXT_REGION_LENGTH__+0x7009a1>
 40a:	95 ff       	sbrs	r25, 5
 40c:	fc cf       	rjmp	.-8      	; 0x406 <send_char>
	USARTD0.DATA = c;
 40e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 412:	08 95       	ret

00000414 <__vector_2>:
	
}


ISR(PORTC_INT0_vect){
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	08 b6       	in	r0, 0x38	; 56
 420:	0f 92       	push	r0
 422:	18 be       	out	0x38, r1	; 56
 424:	0b b6       	in	r0, 0x3b	; 59
 426:	0f 92       	push	r0
 428:	1b be       	out	0x3b, r1	; 59
 42a:	8f 93       	push	r24
 42c:	ef 93       	push	r30
 42e:	ff 93       	push	r31
	accelDataReady = 0x01;
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <accelDataReady>
	PORTC.INTFLAGS |= 0x01;
 436:	e0 e4       	ldi	r30, 0x40	; 64
 438:	f6 e0       	ldi	r31, 0x06	; 6
 43a:	84 85       	ldd	r24, Z+12	; 0x0c
 43c:	81 60       	ori	r24, 0x01	; 1
 43e:	84 87       	std	Z+12, r24	; 0x0c
}
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	8f 91       	pop	r24
 446:	0f 90       	pop	r0
 448:	0b be       	out	0x3b, r0	; 59
 44a:	0f 90       	pop	r0
 44c:	08 be       	out	0x38, r0	; 56
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_66>:

ISR(PORTA_INT0_vect) {	
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	08 b6       	in	r0, 0x38	; 56
 464:	0f 92       	push	r0
 466:	18 be       	out	0x38, r1	; 56
 468:	0b b6       	in	r0, 0x3b	; 59
 46a:	0f 92       	push	r0
 46c:	1b be       	out	0x3b, r1	; 59
 46e:	8f 93       	push	r24
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
	gyroDataReady = 0x01;	
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	PORTA.INTFLAGS |= 0x01;
 47a:	e0 e0       	ldi	r30, 0x00	; 0
 47c:	f6 e0       	ldi	r31, 0x06	; 6
 47e:	84 85       	ldd	r24, Z+12	; 0x0c
 480:	81 60       	ori	r24, 0x01	; 1
 482:	84 87       	std	Z+12, r24	; 0x0c
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	8f 91       	pop	r24
 48a:	0f 90       	pop	r0
 48c:	0b be       	out	0x3b, r0	; 59
 48e:	0f 90       	pop	r0
 490:	08 be       	out	0x38, r0	; 56
 492:	0f 90       	pop	r0
 494:	0f be       	out	0x3f, r0	; 63
 496:	0f 90       	pop	r0
 498:	1f 90       	pop	r1
 49a:	18 95       	reti

0000049c <main>:


int main(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
 4a4:	2c 97       	sbiw	r28, 0x0c	; 12
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	de bf       	out	0x3e, r29	; 62
	PMIC.CTRL = 0x01;			//low level interrupts	
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	CLK_init();
 4b0:	0e 94 18 01 	call	0x230	; 0x230 <CLK_init>
	USART_init();
 4b4:	0e 94 36 01 	call	0x26c	; 0x26c <USART_init>
    SPI_init();
 4b8:	0e 94 25 01 	call	0x24a	; 0x24a <SPI_init>
	
	gyroWrite(CTRL_REG1_G, 0x00);	//reset gyro
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	80 e2       	ldi	r24, 0x20	; 32
 4c0:	0e 94 bc 01 	call	0x378	; 0x378 <gyroWrite>
	accWrite(CTRL_REG4_A, 0x01);	//reset accelerometer
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	83 e2       	ldi	r24, 0x23	; 35
 4c8:	0e 94 79 01 	call	0x2f2	; 0x2f2 <accWrite>
	
	gyro_init();
 4cc:	0e 94 ee 01 	call	0x3dc	; 0x3dc <gyro_init>
	accel_init();
 4d0:	0e 94 de 01 	call	0x3bc	; 0x3bc <accel_init>
	 
	sei();
 4d4:	78 94       	sei
	volatile int8_t ACCEL_X_H, ACCEL_X_L, ACCEL_Y_H, ACCEL_Y_L, ACCEL_Z_H, ACCEL_Z_L;
	volatile uint8_t GYRO_X_H, GYRO_X_L, GYRO_Y_H, GYRO_Y_L, GYRO_Z_H, GYRO_Z_L;
	
    while(1){	
		
		if(gyroDataReady == 0x01){
 4d6:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	d9 f4       	brne	.+54     	; 0x514 <main+0x78>
			GYRO_X_H = gyroRead(OUT_X_H_G);
 4de:	89 e2       	ldi	r24, 0x29	; 41
 4e0:	0e 94 9b 01 	call	0x336	; 0x336 <gyroRead>
 4e4:	8e 83       	std	Y+6, r24	; 0x06
			GYRO_X_L = gyroRead(OUT_X_L_G);
 4e6:	88 e2       	ldi	r24, 0x28	; 40
 4e8:	0e 94 9b 01 	call	0x336	; 0x336 <gyroRead>
 4ec:	8d 83       	std	Y+5, r24	; 0x05
			GYRO_Y_H = gyroRead(OUT_Y_H_G);
 4ee:	8b e2       	ldi	r24, 0x2B	; 43
 4f0:	0e 94 9b 01 	call	0x336	; 0x336 <gyroRead>
 4f4:	8c 83       	std	Y+4, r24	; 0x04
			GYRO_Y_L = gyroRead(OUT_Y_L_G);
 4f6:	8a e2       	ldi	r24, 0x2A	; 42
 4f8:	0e 94 9b 01 	call	0x336	; 0x336 <gyroRead>
 4fc:	8b 83       	std	Y+3, r24	; 0x03
			GYRO_Z_H = gyroRead(OUT_Z_H_G);
 4fe:	8d e2       	ldi	r24, 0x2D	; 45
 500:	0e 94 9b 01 	call	0x336	; 0x336 <gyroRead>
 504:	8a 83       	std	Y+2, r24	; 0x02
			GYRO_Z_L = gyroRead(OUT_Z_L_G);
 506:	8c e2       	ldi	r24, 0x2C	; 44
 508:	0e 94 9b 01 	call	0x336	; 0x336 <gyroRead>
 50c:	89 83       	std	Y+1, r24	; 0x01
			
			gyroDataReady = 0x00;
 50e:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
 512:	e1 cf       	rjmp	.-62     	; 0x4d6 <main+0x3a>
		}
		
		else if(accelDataReady == 0x01){
 514:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <accelDataReady>
 518:	81 30       	cpi	r24, 0x01	; 1
 51a:	e9 f6       	brne	.-70     	; 0x4d6 <main+0x3a>

			ACCEL_X_H = accRead(OUT_X_H_A);
 51c:	89 e2       	ldi	r24, 0x29	; 41
 51e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <accRead>
 522:	8c 87       	std	Y+12, r24	; 0x0c
			ACCEL_X_L = accRead(OUT_X_L_A);
 524:	88 e2       	ldi	r24, 0x28	; 40
 526:	0e 94 58 01 	call	0x2b0	; 0x2b0 <accRead>
 52a:	8b 87       	std	Y+11, r24	; 0x0b
			ACCEL_Y_H = accRead(OUT_Y_H_A);
 52c:	8b e2       	ldi	r24, 0x2B	; 43
 52e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <accRead>
 532:	8a 87       	std	Y+10, r24	; 0x0a
			ACCEL_Y_L = accRead(OUT_Y_L_A);
 534:	8a e2       	ldi	r24, 0x2A	; 42
 536:	0e 94 58 01 	call	0x2b0	; 0x2b0 <accRead>
 53a:	89 87       	std	Y+9, r24	; 0x09
			ACCEL_Z_H = accRead(OUT_Z_H_A);
 53c:	8d e2       	ldi	r24, 0x2D	; 45
 53e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <accRead>
 542:	88 87       	std	Y+8, r24	; 0x08
			ACCEL_Z_L = accRead(OUT_Z_L_A);
 544:	8c e2       	ldi	r24, 0x2C	; 44
 546:	0e 94 58 01 	call	0x2b0	; 0x2b0 <accRead>
 54a:	8f 83       	std	Y+7, r24	; 0x07
			

			if( abs(ACCEL_X_H) > abs(ACCEL_Z_H) && abs(ACCEL_X_H)  > abs(ACCEL_Y_H)){
 54c:	2c 85       	ldd	r18, Y+12	; 0x0c
 54e:	88 85       	ldd	r24, Y+8	; 0x08
 550:	02 2e       	mov	r0, r18
 552:	00 0c       	add	r0, r0
 554:	33 0b       	sbc	r19, r19
 556:	37 ff       	sbrs	r19, 7
 558:	03 c0       	rjmp	.+6      	; 0x560 <main+0xc4>
 55a:	31 95       	neg	r19
 55c:	21 95       	neg	r18
 55e:	31 09       	sbc	r19, r1
 560:	08 2e       	mov	r0, r24
 562:	00 0c       	add	r0, r0
 564:	99 0b       	sbc	r25, r25
 566:	97 ff       	sbrs	r25, 7
 568:	03 c0       	rjmp	.+6      	; 0x570 <main+0xd4>
 56a:	91 95       	neg	r25
 56c:	81 95       	neg	r24
 56e:	91 09       	sbc	r25, r1
 570:	82 17       	cp	r24, r18
 572:	93 07       	cpc	r25, r19
 574:	c4 f4       	brge	.+48     	; 0x5a6 <main+0x10a>
 576:	2c 85       	ldd	r18, Y+12	; 0x0c
 578:	8a 85       	ldd	r24, Y+10	; 0x0a
 57a:	02 2e       	mov	r0, r18
 57c:	00 0c       	add	r0, r0
 57e:	33 0b       	sbc	r19, r19
 580:	37 ff       	sbrs	r19, 7
 582:	03 c0       	rjmp	.+6      	; 0x58a <main+0xee>
 584:	31 95       	neg	r19
 586:	21 95       	neg	r18
 588:	31 09       	sbc	r19, r1
 58a:	08 2e       	mov	r0, r24
 58c:	00 0c       	add	r0, r0
 58e:	99 0b       	sbc	r25, r25
 590:	97 ff       	sbrs	r25, 7
 592:	03 c0       	rjmp	.+6      	; 0x59a <main+0xfe>
 594:	91 95       	neg	r25
 596:	81 95       	neg	r24
 598:	91 09       	sbc	r25, r1
 59a:	82 17       	cp	r24, r18
 59c:	93 07       	cpc	r25, r19
 59e:	1c f4       	brge	.+6      	; 0x5a6 <main+0x10a>
				
				send_char('X');	
 5a0:	88 e5       	ldi	r24, 0x58	; 88
 5a2:	0e 94 03 02 	call	0x406	; 0x406 <send_char>
					
			}
			
			if( abs(ACCEL_Y_H) > abs(ACCEL_Z_H) &&  abs(ACCEL_Y_H) > abs(ACCEL_X_H)){
 5a6:	2a 85       	ldd	r18, Y+10	; 0x0a
 5a8:	88 85       	ldd	r24, Y+8	; 0x08
 5aa:	02 2e       	mov	r0, r18
 5ac:	00 0c       	add	r0, r0
 5ae:	33 0b       	sbc	r19, r19
 5b0:	37 ff       	sbrs	r19, 7
 5b2:	03 c0       	rjmp	.+6      	; 0x5ba <main+0x11e>
 5b4:	31 95       	neg	r19
 5b6:	21 95       	neg	r18
 5b8:	31 09       	sbc	r19, r1
 5ba:	08 2e       	mov	r0, r24
 5bc:	00 0c       	add	r0, r0
 5be:	99 0b       	sbc	r25, r25
 5c0:	97 ff       	sbrs	r25, 7
 5c2:	03 c0       	rjmp	.+6      	; 0x5ca <main+0x12e>
 5c4:	91 95       	neg	r25
 5c6:	81 95       	neg	r24
 5c8:	91 09       	sbc	r25, r1
 5ca:	82 17       	cp	r24, r18
 5cc:	93 07       	cpc	r25, r19
 5ce:	c4 f4       	brge	.+48     	; 0x600 <main+0x164>
 5d0:	2a 85       	ldd	r18, Y+10	; 0x0a
 5d2:	8c 85       	ldd	r24, Y+12	; 0x0c
 5d4:	02 2e       	mov	r0, r18
 5d6:	00 0c       	add	r0, r0
 5d8:	33 0b       	sbc	r19, r19
 5da:	37 ff       	sbrs	r19, 7
 5dc:	03 c0       	rjmp	.+6      	; 0x5e4 <main+0x148>
 5de:	31 95       	neg	r19
 5e0:	21 95       	neg	r18
 5e2:	31 09       	sbc	r19, r1
 5e4:	08 2e       	mov	r0, r24
 5e6:	00 0c       	add	r0, r0
 5e8:	99 0b       	sbc	r25, r25
 5ea:	97 ff       	sbrs	r25, 7
 5ec:	03 c0       	rjmp	.+6      	; 0x5f4 <main+0x158>
 5ee:	91 95       	neg	r25
 5f0:	81 95       	neg	r24
 5f2:	91 09       	sbc	r25, r1
 5f4:	82 17       	cp	r24, r18
 5f6:	93 07       	cpc	r25, r19
 5f8:	1c f4       	brge	.+6      	; 0x600 <main+0x164>
				send_char('Y');
 5fa:	89 e5       	ldi	r24, 0x59	; 89
 5fc:	0e 94 03 02 	call	0x406	; 0x406 <send_char>
				
			}
			
			if( abs(ACCEL_Z_H) > abs(ACCEL_Y_H) && abs(ACCEL_Z_H) > abs(ACCEL_X_H)){
 600:	28 85       	ldd	r18, Y+8	; 0x08
 602:	8a 85       	ldd	r24, Y+10	; 0x0a
 604:	02 2e       	mov	r0, r18
 606:	00 0c       	add	r0, r0
 608:	33 0b       	sbc	r19, r19
 60a:	37 ff       	sbrs	r19, 7
 60c:	03 c0       	rjmp	.+6      	; 0x614 <main+0x178>
 60e:	31 95       	neg	r19
 610:	21 95       	neg	r18
 612:	31 09       	sbc	r19, r1
 614:	08 2e       	mov	r0, r24
 616:	00 0c       	add	r0, r0
 618:	99 0b       	sbc	r25, r25
 61a:	97 ff       	sbrs	r25, 7
 61c:	03 c0       	rjmp	.+6      	; 0x624 <main+0x188>
 61e:	91 95       	neg	r25
 620:	81 95       	neg	r24
 622:	91 09       	sbc	r25, r1
 624:	82 17       	cp	r24, r18
 626:	93 07       	cpc	r25, r19
 628:	c4 f4       	brge	.+48     	; 0x65a <main+0x1be>
 62a:	28 85       	ldd	r18, Y+8	; 0x08
 62c:	8c 85       	ldd	r24, Y+12	; 0x0c
 62e:	02 2e       	mov	r0, r18
 630:	00 0c       	add	r0, r0
 632:	33 0b       	sbc	r19, r19
 634:	37 ff       	sbrs	r19, 7
 636:	03 c0       	rjmp	.+6      	; 0x63e <main+0x1a2>
 638:	31 95       	neg	r19
 63a:	21 95       	neg	r18
 63c:	31 09       	sbc	r19, r1
 63e:	08 2e       	mov	r0, r24
 640:	00 0c       	add	r0, r0
 642:	99 0b       	sbc	r25, r25
 644:	97 ff       	sbrs	r25, 7
 646:	03 c0       	rjmp	.+6      	; 0x64e <main+0x1b2>
 648:	91 95       	neg	r25
 64a:	81 95       	neg	r24
 64c:	91 09       	sbc	r25, r1
 64e:	82 17       	cp	r24, r18
 650:	93 07       	cpc	r25, r19
 652:	1c f4       	brge	.+6      	; 0x65a <main+0x1be>
				send_char('Z');	
 654:	8a e5       	ldi	r24, 0x5A	; 90
 656:	0e 94 03 02 	call	0x406	; 0x406 <send_char>
				
			}
	
			
			accelDataReady = 0x00;
 65a:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <accelDataReady>
 65e:	3b cf       	rjmp	.-394    	; 0x4d6 <main+0x3a>

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
