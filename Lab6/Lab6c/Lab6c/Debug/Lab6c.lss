
Lab6c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000040a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  0000047e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802000  00802000  0000047e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049ae  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cfe  00000000  00000000  00004f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000731  00000000  00000000  00008c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00009340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000033e4  00000000  00000000  00009454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000219  00000000  00000000  0000c838  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000ca51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
   8:	0c 94 9a 01 	jmp	0x334	; 0x334 <__vector_2>
   c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
  fc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 100:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 104:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 108:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_66>
 10c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 110:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 114:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 118:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 11c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 120:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 124:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 128:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 12c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 130:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 134:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 138:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 13c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 140:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 144:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 148:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 14c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 150:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 154:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 158:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 15c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 160:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 164:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 168:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 16c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 170:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 174:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 178:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 17c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 180:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 184:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 188:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 18c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 190:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 194:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 198:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 19c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
 1f8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_clear_bss>:
 214:	20 e2       	ldi	r18, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
 21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
 21e:	a2 30       	cpi	r26, 0x02	; 2
 220:	b2 07       	cpc	r27, r18
 222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
 224:	0e 94 c6 01 	call	0x38c	; 0x38c <main>
 228:	0c 94 03 02 	jmp	0x406	; 0x406 <_exit>

0000022c <__bad_interrupt>:
 22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <CLK_init>:
uint8_t spiRead() {
	
	return spiWrite(0xFF);
	//uint8_t read = 0x80;
	
}
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 236:	e0 e5       	ldi	r30, 0x50	; 80
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	81 81       	ldd	r24, Z+1	; 0x01
 23c:	81 ff       	sbrs	r24, 1
 23e:	fd cf       	rjmp	.-6      	; 0x23a <CLK_init+0xa>
 240:	88 ed       	ldi	r24, 0xD8	; 216
 242:	84 bf       	out	0x34, r24	; 52
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 24a:	08 95       	ret

0000024c <SPI_init>:
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
 252:	e0 ea       	ldi	r30, 0xA0	; 160
 254:	f6 e0       	ldi	r31, 0x06	; 6
 256:	80 83       	st	Z, r24
 258:	88 e1       	ldi	r24, 0x18	; 24
 25a:	84 83       	std	Z+4, r24	; 0x04
 25c:	87 e7       	ldi	r24, 0x77	; 119
 25e:	80 93 c0 0b 	sts	0x0BC0, r24	; 0x800bc0 <__TEXT_REGION_LENGTH__+0x700bc0>
 262:	08 95       	ret

00000264 <spiWrite>:
 264:	80 93 c3 0b 	sts	0x0BC3, r24	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
 268:	e0 ec       	ldi	r30, 0xC0	; 192
 26a:	fb e0       	ldi	r31, 0x0B	; 11
 26c:	82 81       	ldd	r24, Z+2	; 0x02
 26e:	88 23       	and	r24, r24
 270:	ec f7       	brge	.-6      	; 0x26c <spiWrite+0x8>
 272:	80 91 c3 0b 	lds	r24, 0x0BC3	; 0x800bc3 <__TEXT_REGION_LENGTH__+0x700bc3>
 276:	08 95       	ret

00000278 <accWrite>:

void accWrite(uint8_t reg, uint8_t data) {
 278:	1f 93       	push	r17
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	16 2f       	mov	r17, r22
	
	uint8_t accData = 0;
	
	PORTA.OUT = 0x00;		//Protocol sel
 280:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
	PORTF.OUT = 0x04;		//SSA, Sensor sel acc
 284:	c0 ea       	ldi	r28, 0xA0	; 160
 286:	d6 e0       	ldi	r29, 0x06	; 6
 288:	94 e0       	ldi	r25, 0x04	; 4
 28a:	9c 83       	std	Y+4, r25	; 0x04
	
	//RW, MS, AD[5:0], D[7:0]
	accData = spiWrite(reg);
 28c:	0e 94 32 01 	call	0x264	; 0x264 <spiWrite>
	accData = spiWrite(data);
 290:	81 2f       	mov	r24, r17
 292:	0e 94 32 01 	call	0x264	; 0x264 <spiWrite>
	
	PORTF.OUT = 0x08;		//SSA end transmission, disable SCK
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	8c 83       	std	Y+4, r24	; 0x04
	

}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

000002a2 <gyroWrite>:

void gyroWrite(uint8_t reg, uint8_t data) {
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	16 2f       	mov	r17, r22
	
	uint8_t gyroData = 0;
	
	PORTA.OUT = 0x00;		//Protocol sel SPI
 2aa:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
	PORTF.OUT = 0x00;		//SSG, sensor select gyro
 2ae:	c0 ea       	ldi	r28, 0xA0	; 160
 2b0:	d6 e0       	ldi	r29, 0x06	; 6
 2b2:	1c 82       	std	Y+4, r1	; 0x04
	
	//RW, MS, AD[5:0], D[7:0]
	gyroData = spiWrite(reg);
 2b4:	0e 94 32 01 	call	0x264	; 0x264 <spiWrite>
	gyroData = spiWrite(data);
 2b8:	81 2f       	mov	r24, r17
 2ba:	0e 94 32 01 	call	0x264	; 0x264 <spiWrite>

	PORTF.OUT = 0x10;		//SSG end transmission, disable SCK
 2be:	80 e1       	ldi	r24, 0x10	; 16
 2c0:	8c 83       	std	Y+4, r24	; 0x04

}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	08 95       	ret

000002ca <accel_init>:
	Enable falling edge interrupt on PORTC pin 7
	Use CTRL_REG4_A to route DRDY signal to INT1_A and enable INT1 with rising edge
	Use CTRL_REG5_A to configure highest output rate and enable XYZ
	*/
		
	PORTC.INTCTRL = 0x01;		//interrupt 0 low level
 2ca:	e0 e4       	ldi	r30, 0x40	; 64
 2cc:	f6 e0       	ldi	r31, 0x06	; 6
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	81 87       	std	Z+9, r24	; 0x09
	PORTC.INT0MASK = 0x80;		//Pin 7 interrupt
 2d2:	90 e8       	ldi	r25, 0x80	; 128
 2d4:	92 87       	std	Z+10, r25	; 0x0a
	PORTC.DIRSET = 0x00;		//data direction
 2d6:	11 82       	std	Z+1, r1	; 0x01
	PORTC.PIN7CTRL = 0x02;		//sense falling edge
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	97 8b       	std	Z+23, r25	; 0x17

	PMIC.CTRL = 0x01;			//low level interrupts
 2dc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>

	accWrite(CTRL_REG4_A, CTRL_REG4_A_STRT);		//reset accelerometer
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	83 e2       	ldi	r24, 0x23	; 35
 2e4:	0e 94 3c 01 	call	0x278	; 0x278 <accWrite>
	
	accWrite(CTRL_REG4_A, (CTRL_REG4_A_DR_EN |		//route DRDY to INT1_A and enable INT1 rising edge
 2e8:	68 e8       	ldi	r22, 0x88	; 136
 2ea:	83 e2       	ldi	r24, 0x23	; 35
 2ec:	0e 94 3c 01 	call	0x278	; 0x278 <accWrite>
						   CTRL_REG4_A_INT1_EN));			
			
	accWrite(CTRL_REG5_A, (CTRL_REG5_A_ODR3 |		//configure 1600Hz output rate and enable XYZ
 2f0:	67 e9       	ldi	r22, 0x97	; 151
 2f2:	80 e2       	ldi	r24, 0x20	; 32
 2f4:	0e 94 3c 01 	call	0x278	; 0x278 <accWrite>
 2f8:	08 95       	ret

000002fa <gyro_init>:
	Leave BW[1:0] bit 00 and set PD bit for normal mode
	Set I2_DRDY bit in CTRL_REG3_G (signals when gyro is ready using INT2_G pin PA1)
	Choose 2000 dps for full scale selection FS[1:0] in CTRL_REG4_G
	*/
	
	PORTA.OUT = 0x08;				//gyro enable
 2fa:	e0 e0       	ldi	r30, 0x00	; 0
 2fc:	f6 e0       	ldi	r31, 0x06	; 6
 2fe:	88 e0       	ldi	r24, 0x08	; 8
 300:	84 83       	std	Z+4, r24	; 0x04
	PORTA.INTCTRL = 0x01;			//interrupt 0 low level
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	91 87       	std	Z+9, r25	; 0x09
	PORTA.INT0MASK = 0x02;			//Pin 1 interrupt
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	82 87       	std	Z+10, r24	; 0x0a
	PORTA.DIRSET &= ~0x02;			//data direction
 30a:	81 81       	ldd	r24, Z+1	; 0x01
 30c:	8d 7f       	andi	r24, 0xFD	; 253
 30e:	81 83       	std	Z+1, r24	; 0x01
	PORTA.PIN7CTRL = 0x01;			//sense rising edge
 310:	97 8b       	std	Z+23, r25	; 0x17
	
	gyroWrite(CTRL_REG1_G, 0x01);			//reset gyroscope
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	80 e2       	ldi	r24, 0x20	; 32
 316:	0e 94 51 01 	call	0x2a2	; 0x2a2 <gyroWrite>
	
	gyroWrite(CTRL_REG1_G, (CTRL_REG1_G_DR1 |		//highest 100Hz, enable XYZ, normal mode
 31a:	6f ec       	ldi	r22, 0xCF	; 207
 31c:	80 e2       	ldi	r24, 0x20	; 32
 31e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <gyroWrite>
							CTRL_REG1_G_PD	|
							CTRL_REG1_G_ZEN |
							CTRL_REG1_G_YEN |
							CTRL_REG1_G_XEN));			
	
	gyroWrite(CTRL_REG3_G, CTRL_REG3_G_I2_DRDY);	//set I2_DRDY
 322:	68 e0       	ldi	r22, 0x08	; 8
 324:	82 e2       	ldi	r24, 0x22	; 34
 326:	0e 94 51 01 	call	0x2a2	; 0x2a2 <gyroWrite>
	
	gyroWrite(CTRL_REG4_G, (CTRL_REG4_G_FS1 |
 32a:	60 e3       	ldi	r22, 0x30	; 48
 32c:	83 e2       	ldi	r24, 0x23	; 35
 32e:	0e 94 51 01 	call	0x2a2	; 0x2a2 <gyroWrite>
 332:	08 95       	ret

00000334 <__vector_2>:
							CTRL_REG4_G_FS0));		//2000 dps
	
}

ISR(PORTC_INT0_vect){
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	08 b6       	in	r0, 0x38	; 56
 340:	0f 92       	push	r0
 342:	18 be       	out	0x38, r1	; 56
 344:	8f 93       	push	r24
	accelDataReady = 0x01;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 01 20 	sts	0x2001, r24	; 0x802001 <accelDataReady>
	gyroDataReady = 0x00;
 34c:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <_edata>
}
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	08 be       	out	0x38, r0	; 56
 356:	0f 90       	pop	r0
 358:	0f be       	out	0x3f, r0	; 63
 35a:	0f 90       	pop	r0
 35c:	1f 90       	pop	r1
 35e:	18 95       	reti

00000360 <__vector_66>:

ISR(PORTA_INT0_vect) {
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	08 b6       	in	r0, 0x38	; 56
 36c:	0f 92       	push	r0
 36e:	18 be       	out	0x38, r1	; 56
 370:	8f 93       	push	r24
	
	gyroDataReady = 0x01;
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	80 93 00 20 	sts	0x2000, r24	; 0x802000 <_edata>
	accelDataReady = 0x00;
 378:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <accelDataReady>
	
}
 37c:	8f 91       	pop	r24
 37e:	0f 90       	pop	r0
 380:	08 be       	out	0x38, r0	; 56
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <main>:

int main(void)
{
 38c:	cf 93       	push	r28
 38e:	df 93       	push	r29
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
 394:	68 97       	sbiw	r28, 0x18	; 24
 396:	cd bf       	out	0x3d, r28	; 61
 398:	de bf       	out	0x3e, r29	; 62
	CLK_init();
 39a:	0e 94 18 01 	call	0x230	; 0x230 <CLK_init>
    SPI_init();	 
 39e:	0e 94 26 01 	call	0x24c	; 0x24c <SPI_init>
	accel_init();
 3a2:	0e 94 65 01 	call	0x2ca	; 0x2ca <accel_init>
	gyro_init();
 3a6:	0e 94 7d 01 	call	0x2fa	; 0x2fa <gyro_init>
			ACCEL_Y_L = OUT_Y_L_A;
			ACCEL_Z_H = OUT_Z_H_A;
			ACCEL_Z_L = OUT_Z_L_A;
		}
		else if(gyroDataReady == 0x01){
			GYRO_X_H = OUT_X_H_G;
 3aa:	09 e2       	ldi	r16, 0x29	; 41
 3ac:	10 e0       	ldi	r17, 0x00	; 0
			GYRO_X_L = OUT_X_L_G;
 3ae:	a8 e2       	ldi	r26, 0x28	; 40
 3b0:	b0 e0       	ldi	r27, 0x00	; 0
			GYRO_Y_H = OUT_Y_H_G;
 3b2:	eb e2       	ldi	r30, 0x2B	; 43
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
			GYRO_Y_L = OUT_Y_L_G;
 3b6:	6a e2       	ldi	r22, 0x2A	; 42
 3b8:	70 e0       	ldi	r23, 0x00	; 0
			GYRO_Z_H = OUT_Z_H_G;
 3ba:	4d e2       	ldi	r20, 0x2D	; 45
 3bc:	50 e0       	ldi	r21, 0x00	; 0
			GYRO_Z_L = OUT_Z_L_G;
 3be:	2c e2       	ldi	r18, 0x2C	; 44
 3c0:	30 e0       	ldi	r19, 0x00	; 0
	volatile uint16_t ACCEL_X_H, ACCEL_X_L, ACCEL_Y_H, ACCEL_Y_L, ACCEL_Z_H, ACCEL_Z_L;
	volatile uint16_t GYRO_X_H, GYRO_X_L, GYRO_Y_H, GYRO_Y_L, GYRO_Z_H, GYRO_Z_L;
	
    while(1){
		
		if(accelDataReady == 0x01){
 3c2:	80 91 01 20 	lds	r24, 0x2001	; 0x802001 <accelDataReady>
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	69 f4       	brne	.+26     	; 0x3e4 <main+0x58>
			ACCEL_X_H = OUT_X_H_A;
 3ca:	09 83       	std	Y+1, r16	; 0x01
 3cc:	1a 83       	std	Y+2, r17	; 0x02
			ACCEL_X_L = OUT_X_L_A;
 3ce:	ab 83       	std	Y+3, r26	; 0x03
 3d0:	bc 83       	std	Y+4, r27	; 0x04
			ACCEL_Y_H = OUT_Y_H_A;
 3d2:	ed 83       	std	Y+5, r30	; 0x05
 3d4:	fe 83       	std	Y+6, r31	; 0x06
			ACCEL_Y_L = OUT_Y_L_A;
 3d6:	6f 83       	std	Y+7, r22	; 0x07
 3d8:	78 87       	std	Y+8, r23	; 0x08
			ACCEL_Z_H = OUT_Z_H_A;
 3da:	49 87       	std	Y+9, r20	; 0x09
 3dc:	5a 87       	std	Y+10, r21	; 0x0a
			ACCEL_Z_L = OUT_Z_L_A;
 3de:	2b 87       	std	Y+11, r18	; 0x0b
 3e0:	3c 87       	std	Y+12, r19	; 0x0c
 3e2:	ef cf       	rjmp	.-34     	; 0x3c2 <main+0x36>
		}
		else if(gyroDataReady == 0x01){
 3e4:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <_edata>
 3e8:	81 30       	cpi	r24, 0x01	; 1
 3ea:	59 f7       	brne	.-42     	; 0x3c2 <main+0x36>
			GYRO_X_H = OUT_X_H_G;
 3ec:	0d 87       	std	Y+13, r16	; 0x0d
 3ee:	1e 87       	std	Y+14, r17	; 0x0e
			GYRO_X_L = OUT_X_L_G;
 3f0:	af 87       	std	Y+15, r26	; 0x0f
 3f2:	b8 8b       	std	Y+16, r27	; 0x10
			GYRO_Y_H = OUT_Y_H_G;
 3f4:	e9 8b       	std	Y+17, r30	; 0x11
 3f6:	fa 8b       	std	Y+18, r31	; 0x12
			GYRO_Y_L = OUT_Y_L_G;
 3f8:	6b 8b       	std	Y+19, r22	; 0x13
 3fa:	7c 8b       	std	Y+20, r23	; 0x14
			GYRO_Z_H = OUT_Z_H_G;
 3fc:	4d 8b       	std	Y+21, r20	; 0x15
 3fe:	5e 8b       	std	Y+22, r21	; 0x16
			GYRO_Z_L = OUT_Z_L_G;
 400:	2f 8b       	std	Y+23, r18	; 0x17
 402:	38 8f       	std	Y+24, r19	; 0x18
 404:	de cf       	rjmp	.-68     	; 0x3c2 <main+0x36>

00000406 <_exit>:
 406:	f8 94       	cli

00000408 <__stop_program>:
 408:	ff cf       	rjmp	.-2      	; 0x408 <__stop_program>
