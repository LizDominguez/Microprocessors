
Lab7d.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000044e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000021e  00802000  0000044e  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080221e  0080221e  00000700  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000730  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005244  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003d65  00000000  00000000  00005a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000792  00000000  00000000  00009799  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00009f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c1c  00000000  00000000  0000a040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016c  00000000  00000000  0000dc5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
   c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  10:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  18:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  1c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  20:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  24:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  28:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  2c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  30:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  34:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  38:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  3c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  40:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  44:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  48:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  4c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  50:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  54:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  58:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  5c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  60:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  64:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  68:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  6c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  70:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  74:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  78:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  7c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  80:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  84:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  88:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  8c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  90:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  94:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  98:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  9c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  bc:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <__vector_47>
  c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
  fc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 100:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 104:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 108:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 10c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 110:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 114:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 118:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 11c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 120:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 124:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 128:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 12c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 130:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 134:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 138:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 13c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 140:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 144:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 148:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 14c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 150:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 154:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 158:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 15c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 160:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 164:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 168:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 16c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 170:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 174:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 178:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 17c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 180:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 184:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 188:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 18c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 190:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 194:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 198:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 19c:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1a8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ac:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1b8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1bc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1c8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1cc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1d8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1dc:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1e8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1ec:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f0:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f4:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>
 1f8:	0c 94 24 01 	jmp	0x248	; 0x248 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	12 e2       	ldi	r17, 0x22	; 34
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ee e4       	ldi	r30, 0x4E	; 78
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	ae 31       	cpi	r26, 0x1E	; 30
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59

00000230 <__do_clear_bss>:
 230:	22 e2       	ldi	r18, 0x22	; 34
 232:	ae e1       	ldi	r26, 0x1E	; 30
 234:	b2 e2       	ldi	r27, 0x22	; 34
 236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
 238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
 23a:	a0 32       	cpi	r26, 0x20	; 32
 23c:	b2 07       	cpc	r27, r18
 23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>
 240:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
 244:	0c 94 25 02 	jmp	0x44a	; 0x44a <_exit>

00000248 <__bad_interrupt>:
 248:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000024c <CLK_init>:
}

void DAC_write(uint16_t data) {
	
	while (!(DACA.STATUS & DAC_CH0DRE_bm));			//wait for data register to empty
	DACA.CH0DATA = data;
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 252:	e0 e5       	ldi	r30, 0x50	; 80
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	81 81       	ldd	r24, Z+1	; 0x01
 258:	81 ff       	sbrs	r24, 1
 25a:	fd cf       	rjmp	.-6      	; 0x256 <CLK_init+0xa>
 25c:	88 ed       	ldi	r24, 0xD8	; 216
 25e:	84 bf       	out	0x34, r24	; 52
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>
 266:	20 91 0a 20 	lds	r18, 0x200A	; 0x80200a <Freq+0x4>
 26a:	30 91 0b 20 	lds	r19, 0x200B	; 0x80200b <Freq+0x5>
 26e:	e0 e0       	ldi	r30, 0x00	; 0
 270:	fa e0       	ldi	r31, 0x0A	; 10
 272:	26 a3       	std	Z+38, r18	; 0x26
 274:	37 a3       	std	Z+39, r19	; 0x27
 276:	80 83       	st	Z, r24
 278:	10 a2       	std	Z+32, r1	; 0x20
 27a:	11 a2       	std	Z+33, r1	; 0x21
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	86 83       	std	Z+6, r24	; 0x06
 280:	08 95       	ret

00000282 <DMA_init>:
 282:	e0 e0       	ldi	r30, 0x00	; 0
 284:	f1 e0       	ldi	r31, 0x01	; 1
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	80 83       	st	Z, r24
 28a:	95 ea       	ldi	r25, 0xA5	; 165
 28c:	90 8b       	std	Z+16, r25	; 0x10
 28e:	99 e5       	ldi	r25, 0x59	; 89
 290:	92 8b       	std	Z+18, r25	; 0x12
 292:	83 8b       	std	Z+19, r24	; 0x13
 294:	88 ec       	ldi	r24, 0xC8	; 200
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	84 8b       	std	Z+20, r24	; 0x14
 29a:	95 8b       	std	Z+21, r25	; 0x15
 29c:	88 ef       	ldi	r24, 0xF8	; 248
 29e:	90 e2       	ldi	r25, 0x20	; 32
 2a0:	80 8f       	std	Z+24, r24	; 0x18
 2a2:	91 8f       	std	Z+25, r25	; 0x19
 2a4:	12 8e       	std	Z+26, r1	; 0x1a
 2a6:	88 e1       	ldi	r24, 0x18	; 24
 2a8:	84 8f       	std	Z+28, r24	; 0x1c
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	85 8f       	std	Z+29, r24	; 0x1d
 2ae:	16 8e       	std	Z+30, r1	; 0x1e
 2b0:	08 95       	ret

000002b2 <DAC_init>:
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
 2b8:	e0 e0       	ldi	r30, 0x00	; 0
 2ba:	f3 e0       	ldi	r31, 0x03	; 3
 2bc:	85 e0       	ldi	r24, 0x05	; 5
 2be:	80 83       	st	Z, r24
 2c0:	11 82       	std	Z+1, r1	; 0x01
 2c2:	88 e1       	ldi	r24, 0x18	; 24
 2c4:	82 83       	std	Z+2, r24	; 0x02
 2c6:	08 95       	ret

000002c8 <USART_init>:
	
}

void USART_init() {
	
	PORTD.DIRSET = 0xF8;	//set TxD and RBG LED as output
 2c8:	e0 e6       	ldi	r30, 0x60	; 96
 2ca:	f6 e0       	ldi	r31, 0x06	; 6
 2cc:	88 ef       	ldi	r24, 0xF8	; 248
 2ce:	81 83       	std	Z+1, r24	; 0x01
	PORTD.OUTSET = 0xF8;	//set TxD to high, LED to off
 2d0:	85 83       	std	Z+5, r24	; 0x05
	PORTD.DIRCLR = 0x04;	//set RxD pin as input
 2d2:	84 e0       	ldi	r24, 0x04	; 4
 2d4:	82 83       	std	Z+2, r24	; 0x02
	
	//PortQ bits 1 and 3 enable and select
	PORTQ.DIRSET = 0x0A;	//PortD bits 2 and 3 serial pins
 2d6:	e0 ec       	ldi	r30, 0xC0	; 192
 2d8:	f7 e0       	ldi	r31, 0x07	; 7
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	81 83       	std	Z+1, r24	; 0x01
	PORTQ.OUTCLR = 0x0A;	//connected to the USB lines
 2de:	86 83       	std	Z+6, r24	; 0x06
	
	USARTD0.BAUDCTRLA = (BSel & 0xFF);			//sets BAUDCTRLA to lower 8 bits of BSel
 2e0:	e0 ea       	ldi	r30, 0xA0	; 160
 2e2:	f9 e0       	ldi	r31, 0x09	; 9
 2e4:	89 e8       	ldi	r24, 0x89	; 137
 2e6:	86 83       	std	Z+6, r24	; 0x06
	USARTD0.BAUDCTRLB = ((BScale << 4) & 0xF0) | ((BSel >> 8) & 0x0F);
 2e8:	80 ef       	ldi	r24, 0xF0	; 240
 2ea:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.CTRLB = 0x18;						//RXEN/TEXEN
 2ec:	88 e1       	ldi	r24, 0x18	; 24
 2ee:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLC = 0x0B;						//asynchronous/no parity/1 stop bit/8 data
 2f0:	8b e0       	ldi	r24, 0x0B	; 11
 2f2:	85 83       	std	Z+5, r24	; 0x05
 2f4:	08 95       	ret

000002f6 <receive_char>:
	
}

char receive_char()
{
	while( !(USARTD0.STATUS & USART_RXCIF_bm) );		//Interesting DRIF didn't work.
 2f6:	e0 ea       	ldi	r30, 0xA0	; 160
 2f8:	f9 e0       	ldi	r31, 0x09	; 9
 2fa:	81 81       	ldd	r24, Z+1	; 0x01
 2fc:	88 23       	and	r24, r24
 2fe:	ec f7       	brge	.-6      	; 0x2fa <receive_char+0x4>
	return USARTD0.DATA;
 300:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
}
 304:	08 95       	ret

00000306 <send_char>:

void send_char(char c)
{
	
	while( !(USARTD0.STATUS & USART_DREIF_bm) ); //Wait until DATA buffer is empty
 306:	e0 ea       	ldi	r30, 0xA0	; 160
 308:	f9 e0       	ldi	r31, 0x09	; 9
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	95 ff       	sbrs	r25, 5
 30e:	fd cf       	rjmp	.-6      	; 0x30a <send_char+0x4>
	
	USARTD0.DATA = c;
 310:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 314:	08 95       	ret

00000316 <send_string>:
	
}


void send_string(char *text)
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	ec 01       	movw	r28, r24
	while(*text)
 31c:	88 81       	ld	r24, Y
 31e:	88 23       	and	r24, r24
 320:	31 f0       	breq	.+12     	; 0x32e <send_string+0x18>
 322:	21 96       	adiw	r28, 0x01	; 1
	{
		send_char(*text++);
 324:	0e 94 83 01 	call	0x306	; 0x306 <send_char>
}


void send_string(char *text)
{
	while(*text)
 328:	89 91       	ld	r24, Y+
 32a:	81 11       	cpse	r24, r1
 32c:	fb cf       	rjmp	.-10     	; 0x324 <send_string+0xe>
	{
		send_char(*text++);
	}
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <output_sine>:


void output_sine() {
	while(DMA.STATUS & 0x10);
 334:	e0 e0       	ldi	r30, 0x00	; 0
 336:	f1 e0       	ldi	r31, 0x01	; 1
 338:	84 81       	ldd	r24, Z+4	; 0x04
 33a:	84 fd       	sbrc	r24, 4
 33c:	fd cf       	rjmp	.-6      	; 0x338 <output_sine+0x4>
	DMA.CH0.SRCADDR0 = ((uint16_t)(&sine[0]) >> 0) & 0xFF;
 33e:	88 ef       	ldi	r24, 0xF8	; 248
 340:	90 e2       	ldi	r25, 0x20	; 32
 342:	e0 e0       	ldi	r30, 0x00	; 0
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = ((uint16_t)(&sine[0]) >>  8) & 0xFF;
 348:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = 0;
 34a:	12 8e       	std	Z+26, r1	; 0x1a
 34c:	08 95       	ret

0000034e <output_triangle>:
}

void output_triangle() {
	while(DMA.STATUS & 0x10);
 34e:	e0 e0       	ldi	r30, 0x00	; 0
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	84 81       	ldd	r24, Z+4	; 0x04
 354:	84 fd       	sbrc	r24, 4
 356:	fd cf       	rjmp	.-6      	; 0x352 <output_triangle+0x4>
	DMA.CH0.SRCADDR0 = ((uint16_t)(&tri[0]) >> 0) & 0xFF;
 358:	8e e2       	ldi	r24, 0x2E	; 46
 35a:	90 e2       	ldi	r25, 0x20	; 32
 35c:	e0 e0       	ldi	r30, 0x00	; 0
 35e:	f1 e0       	ldi	r31, 0x01	; 1
 360:	80 8f       	std	Z+24, r24	; 0x18
	DMA.CH0.SRCADDR1 = ((uint16_t)(&tri[0]) >>  8) & 0xFF;
 362:	91 8f       	std	Z+25, r25	; 0x19
	DMA.CH0.SRCADDR2 = 0;
 364:	12 8e       	std	Z+26, r1	; 0x1a
 366:	08 95       	ret

00000368 <determine_function>:

void determine_function(char op) {
	
	int index = 0;
	
	switch(op) {
 368:	83 37       	cpi	r24, 0x73	; 115
 36a:	19 f0       	breq	.+6      	; 0x372 <determine_function+0xa>
 36c:	84 37       	cpi	r24, 0x74	; 116
 36e:	21 f0       	breq	.+8      	; 0x378 <determine_function+0x10>
 370:	06 c0       	rjmp	.+12     	; 0x37e <determine_function+0x16>

		case 's':
		output_sine();
 372:	0e 94 9a 01 	call	0x334	; 0x334 <output_sine>
		break;
 376:	08 95       	ret
		
		case 't':
		output_triangle();
 378:	0e 94 a7 01 	call	0x34e	; 0x34e <output_triangle>
		break;
 37c:	08 95       	ret
		
		default:
		index = (int)op - 0x30;
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	c0 97       	sbiw	r24, 0x30	; 48
		if (index == 0) {
 382:	19 f4       	brne	.+6      	; 0x38a <determine_function+0x22>
			TCE0.CTRLA = 0x00;				//enable counter
 384:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__TEXT_REGION_LENGTH__+0x700a00>
 388:	08 95       	ret
		}
		else{
			TCE0.CTRLA = 0x01;				//enable counter
 38a:	a0 e0       	ldi	r26, 0x00	; 0
 38c:	ba e0       	ldi	r27, 0x0A	; 10
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	2c 93       	st	X, r18
			TCE0.PER = Freq[index];
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	fc 01       	movw	r30, r24
 39c:	ea 5f       	subi	r30, 0xFA	; 250
 39e:	ff 4d       	sbci	r31, 0xDF	; 223
 3a0:	80 81       	ld	r24, Z
 3a2:	91 81       	ldd	r25, Z+1	; 0x01
 3a4:	96 96       	adiw	r26, 0x26	; 38
 3a6:	8d 93       	st	X+, r24
 3a8:	9c 93       	st	X, r25
 3aa:	97 97       	sbiw	r26, 0x27	; 39
 3ac:	08 95       	ret

000003ae <__vector_47>:
		break;

	}
}

ISR(TCE0_OVF_vect){	
 3ae:	1f 92       	push	r1
 3b0:	0f 92       	push	r0
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	0f 92       	push	r0
 3b6:	11 24       	eor	r1, r1
 3b8:	08 b6       	in	r0, 0x38	; 56
 3ba:	0f 92       	push	r0
 3bc:	18 be       	out	0x38, r1	; 56
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
	i = 1;	
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	80 93 1e 22 	sts	0x221E, r24	; 0x80221e <__data_end>
 3ca:	90 93 1f 22 	sts	0x221F, r25	; 0x80221f <__data_end+0x1>
}
 3ce:	9f 91       	pop	r25
 3d0:	8f 91       	pop	r24
 3d2:	0f 90       	pop	r0
 3d4:	08 be       	out	0x38, r0	; 56
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <main>:


int main(void)
{
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <main+0x6>
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
	CLK_init();
 3ea:	0e 94 26 01 	call	0x24c	; 0x24c <CLK_init>
    DAC_init();	
 3ee:	0e 94 59 01 	call	0x2b2	; 0x2b2 <DAC_init>
	DMA_init();
 3f2:	0e 94 41 01 	call	0x282	; 0x282 <DMA_init>
	USART_init();
 3f6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <USART_init>
	
	PMIC_CTRL = 0x02;
 3fa:	82 e0       	ldi	r24, 0x02	; 2
 3fc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 400:	78 94       	sei
		
	volatile char option;
	
    while(1){
		
		option = receive_char();
 402:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <receive_char>
 406:	89 83       	std	Y+1, r24	; 0x01
		determine_function(option);
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	0e 94 b4 01 	call	0x368	; 0x368 <determine_function>
		
		//display menu
		for(volatile int i = 0; i < sizeof(Menu); i++){
 40e:	1a 82       	std	Y+2, r1	; 0x02
 410:	1b 82       	std	Y+3, r1	; 0x03
 412:	8a 81       	ldd	r24, Y+2	; 0x02
 414:	9b 81       	ldd	r25, Y+3	; 0x03
 416:	06 97       	sbiw	r24, 0x06	; 6
 418:	a0 f7       	brcc	.-24     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			send_string(Menu[i]);
 41a:	ea 81       	ldd	r30, Y+2	; 0x02
 41c:	fb 81       	ldd	r31, Y+3	; 0x03
 41e:	ee 0f       	add	r30, r30
 420:	ff 1f       	adc	r31, r31
 422:	e0 50       	subi	r30, 0x00	; 0
 424:	f0 4e       	sbci	r31, 0xE0	; 224
 426:	80 81       	ld	r24, Z
 428:	91 81       	ldd	r25, Z+1	; 0x01
 42a:	0e 94 8b 01 	call	0x316	; 0x316 <send_string>
			send_string("\n");
 42e:	82 ec       	ldi	r24, 0xC2	; 194
 430:	91 e2       	ldi	r25, 0x21	; 33
 432:	0e 94 8b 01 	call	0x316	; 0x316 <send_string>
		
		option = receive_char();
		determine_function(option);
		
		//display menu
		for(volatile int i = 0; i < sizeof(Menu); i++){
 436:	8a 81       	ldd	r24, Y+2	; 0x02
 438:	9b 81       	ldd	r25, Y+3	; 0x03
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	8a 83       	std	Y+2, r24	; 0x02
 43e:	9b 83       	std	Y+3, r25	; 0x03
 440:	8a 81       	ldd	r24, Y+2	; 0x02
 442:	9b 81       	ldd	r25, Y+3	; 0x03
 444:	06 97       	sbiw	r24, 0x06	; 6
 446:	48 f3       	brcs	.-46     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 448:	dc cf       	rjmp	.-72     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>

0000044a <_exit>:
 44a:	f8 94       	cli

0000044c <__stop_program>:
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__stop_program>
